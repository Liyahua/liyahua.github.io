<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Leoli's  blog]]></title>
  <subtitle><![CDATA[Follow your heart]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.stackops.info//"/>
  <updated>2015-08-17T16:10:00.706Z</updated>
  <id>http://www.stackops.info//</id>
  
  <author>
    <name><![CDATA[liyahua]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Cisco-2960交换机配置]]></title>
    <link href="http://www.stackops.info/2015/08/17/Cisco-2960%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.stackops.info/2015/08/17/Cisco-2960交换机配置/</id>
    <published>2015-08-17T12:32:58.000Z</published>
    <updated>2015-08-17T16:10:00.706Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p><em>接上一篇blog，这次补充具体的配置命令</em>：</p>
<p>网络大概拓扑：<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/EC拓扑.jpg" alt="topo"></p>
<h2 id="具体的配置思路：">具体的配置思路：</h2><ul>
<li>1 配置交换机基本功能</li>
<li>2 配置RSTP协议</li>
<li>3 配置Portfast</li>
<li>4 配置Etherchannel</li>
<li>5 配置端口安全（可选）</li>
<li>6 校验检查</li>
</ul>
<h3 id="步骤一：配置交换机的基本环境：">步骤一：配置交换机的基本环境：</h3><p>cisco交换机开机的时间可能会有点长，和一般的系统一样也都会执行post加电自检等行为，需等待几秒钟。</p>
<h4 id="交换机的基本状态：">交换机的基本状态：</h4><pre><code>rommon&gt;   ROM状态
hostname&gt;    用户模式
hostname<span class="comment">#    特权模式</span>
hostname(config)<span class="comment">#    全局配置模式</span>
hostname(config-<span class="keyword">if</span>)<span class="comment">#    接口状态</span>
</code></pre><h4 id="switch基础配置：">switch基础配置：</h4><pre><code><span class="keyword">switch</span>&gt; enable  ：进入特权模式
<span class="keyword">switch</span><span class="preprocessor">#config terminal    :进入全局配置模式</span>
<span class="keyword">switch</span>(config)<span class="preprocessor"># enable password *yourpasswd*  :配置你的特权密码。</span>
不过使用 enable password  *yourpasswd*  ，你的密码会明文存储，可以使用命令：
<span class="preprocessor">#service passwd-encryption  对密码进行加密。也可以直接配置密文密码：</span>
<span class="keyword">switch</span>(config)<span class="preprocessor"># enable secret  *yourpasswd*   </span>
这样在使用<span class="preprocessor">#show run 看配置的时候你的密码就会加密存放。</span>

sw2(config)<span class="preprocessor">#<span class="keyword">line</span> console <span class="number">0</span>  ： 进入console控制台</span>
sw2(config-line)<span class="preprocessor">#no exec-timeout  ：关掉超时时间</span>
sw2(config-line)<span class="preprocessor">#logging synchronous  ：光标同步，再输入命令的时候不会因为控制台的消息而打断。</span>
sw2(config-line)<span class="preprocessor">#exit  ： 退出console控制台</span>
sw2(config)<span class="preprocessor">#hostname sw2  ：将交换机的名字改为sw2</span>
sw2(config)<span class="preprocessor">#no ip domain lookup  ： 关闭域名查询，如果不关掉的话，错误的命令可能引起查询而卡在</span>
Translating <span class="string">"sw2"</span>...<span class="function">domain <span class="title">server</span> <span class="params">(<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span>)</span> 这个状态， 这时候就需要等待。（大多数卡住的情况可以使用ctrl+shift+6来终止）。</span>
</code></pre><h5 id="给vlan配置ip地址：">给vlan配置ip地址：</h5><pre><code>sw1<span class="preprocessor">#conf terminal </span>
Enter configuration commands, one per line.  End with CNTL/Z.
sw1(config)<span class="preprocessor">#interface vlan1</span>
sw1(config-<span class="keyword">if</span>)<span class="preprocessor">#ip add <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> </span>
sw1(config-<span class="keyword">if</span>)<span class="preprocessor">#no shut</span>

sw2<span class="preprocessor">#configure terminal </span>
Enter configuration commands, one per line.  End with CNTL/Z.
sw2(config)<span class="preprocessor">#interface vlan1</span>
sw2(config-<span class="keyword">if</span>)<span class="preprocessor">#ip add <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span>
sw2(config-<span class="keyword">if</span>)<span class="preprocessor">#no shut</span>
</code></pre><h5 id="配置过ip地址后，要验证连通性，否则后面的ssh服务无法完成。">配置过ip地址后，要验证连通性，否则后面的ssh服务无法完成。</h5><pre><code>sw2<span class="preprocessor">#ping <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span> source <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></span>

Type escape sequence to <span class="built_in">abort</span>.
Sending <span class="number">5</span>, <span class="number">100</span>-byte ICMP Echos to <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>, timeout is <span class="number">2</span> seconds:
Packet sent with a source address of <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> 
!!!!!
Success rate is <span class="number">100</span> percent (<span class="number">5</span>/<span class="number">5</span>), round-trip min/avg/max = <span class="number">8</span>/<span class="number">48</span>/<span class="number">68</span> ms
</code></pre><h4 id="配置ssh功能">配置ssh功能</h4><p>因为telnet在网络中时明文传输的，不安全，而ssh也正在被众多企业所应用，所以这里演示配置ssh服务：<br>全局模式下配置：</p>
<pre><code><span class="function"><span class="title">sw2</span><span class="params">(config)</span></span><span class="id">#ip</span> domain name sw2<span class="class">.com</span>   ：配置域名
<span class="id">#crypto</span> key generate rsa  modulus <span class="number">1024</span>   :生成ssh的key
<span class="id">#username</span> sw2 pass xxx  ：创建用户和密码
<span class="id">#ip</span> ssh logging events  : 开启 ssh的控制台信息。如果有人登录，会报信息。
<span class="id">#ip</span> ssh max <span class="number">5</span> ：定义同时最多多少人同时ssh登录。
<span class="hexcolor">#acc</span>ess-list  <span class="number">1</span> permit  <span class="number">10.0</span>.<span class="number">0.0</span> <span class="number">0.0</span>.<span class="number">0.255</span>  ：设置访问控制列表，只允许指定的网段ipssh登录。（注意掩码使用的是反掩码）
<span class="hexcolor">#acc</span>ess-list <span class="number">1</span> deny any ：access-list的默认行为，除了放行的网段，其他都拒绝。
<span class="id">#line</span> vty <span class="number">0</span> <span class="number">4</span>  ：指定<span class="number">0</span>-<span class="number">4</span> 总共<span class="number">5</span>个vty可同时登录。
<span class="id">#login</span> local   ： 将本地的认证信息加载。
<span class="hexcolor">#acc</span>ess-class <span class="number">1</span> <span class="keyword">in</span> ： 将访问控制列表放在入口方向。
<span class="function"><span class="title">sw1</span><span class="params">(config-line)</span></span><span class="id">#transport</span> <span class="tag">input</span> ssh  : 定义使用ssh进行传输。
<span class="function"><span class="title">sw1</span><span class="params">(config)</span></span><span class="id">#ip</span> ssh source-interface  vlan <span class="number">1</span>   ：定义使用ssh的源接口。交换机上使用的是vlan1
</code></pre><h4 id="加上banner信息：">加上banner信息：</h4><pre><code><span class="function"><span class="title">sw1</span><span class="params">(config)</span></span><span class="id">#banner</span> login @
“输入文本信息并以@作为结束符”
WARNNING! ACCESS RESTRICTED!
@
</code></pre><p>这样当用户ssh登录这台交换机的时候就会看到banner的信息。</p>
<p>两台交换机ssh配置相类似，配置完后，分别在两台交换机上尝试登录对方：</p>
<pre><code>sw1<span class="preprocessor">#ssh -l sw2 <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>   ：-l 指定用户名， 后面加ip地址。</span>

Password:                输入之前设置的密码后即可登录

sw2&gt;en
% No password <span class="built_in">set</span>            这里需要注意，必须配置了特权密码的情况下才能进入特权模式。否则会像这里一样报错。
sw2&gt;

sw2&gt;en
Password:     添加特权密码后即可正常登录。 
sw2<span class="preprocessor">#</span>
</code></pre><hr>
<h3 id="步骤二：配置RSTP协议：">步骤二：配置RSTP协议：</h3><pre><code><span class="function"><span class="title">sw1</span><span class="params">(config)</span></span><span class="id">#spanning-tree</span> mode rapid-pvst  全局配置模式下启用RSTP协议。
</code></pre><p>这里就是简单启用RSTP协议，只有两台交换机，没必要指定根桥等特性。</p>
<p>当RSTP配置完成之后，我们可以查看RSTP协议是否起效。</p>
<pre><code>Switch#<span class="operator"><span class="keyword">show</span> spanning-tree summery    检测vlan生成树配置    可以看到交换机端口角色变换。
<span class="keyword">Switch</span>#<span class="keyword">show</span> spanning-tree vlan&lt;vlan-<span class="keyword">id</span>&gt; detail    浏览详细生成树配置信息  
<span class="keyword">Switch</span>#<span class="keyword">show</span> spanning-tree <span class="keyword">interface</span> &lt;<span class="built_in">int</span>-<span class="keyword">id</span>&gt; detail    浏览详细生成树端口配置信息</span>
</code></pre><p>注意RSTP协议是相对于vlan来说的。</p>
<p>我们在没配置etherchannel的时候会发现，当我们在交换机之间用两个网线连接的时候，会有一个接口处于blk（block）状态，不会进行数据的转发。这是正常的，说明RSTP协议起作用了，防止环路的出现。</p>
<hr>
<h3 id="步骤三：配置portfast：">步骤三：配置portfast：</h3><p>在一些准备用于连接服务器的接口，进行快速端口的配置portfast。这样连接服务器的端口会直接跳过状态变化，直接变为forwarding状态。</p>
<pre><code><span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#spanning-tree</span> portfast   ：开启快速端口，加快接口收敛速度。
</code></pre><p>同时也可以使用宏命令：</p>
<pre><code><span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#switchport</span>  host
</code></pre><p>提供终端设备访问的端口可以配置一条宏命令：#switchport  host，在指定的交换机端口上执行了这条命令后，交换机会执行以下行为：把交换机端口置于Access模式，启用生成树Portfast特性并禁用通道组（channel group)。相当于一条命令执行多个动作，如果想撤销这个命令，不能简单的使用#no switchport host ，必须在全局模式中使用 #default interface  interface-id命令。这个命令会将所有接口恢复默认配置。</p>
<hr>
<h3 id="步骤四：配置Etherchannel：">步骤四：配置Etherchannel：</h3><p><strong>注意</strong>：配置成etherchannel的接口配置必须相同，无论双工模式还是速率，接口模式access|trunk，必须相同。在这里不做改变即可。</p>
<pre><code><span class="keyword">switch</span>(config)<span class="preprocessor">#interface range fasternet0/<span class="number">1</span> - <span class="number">2</span>    将fasternet0/<span class="number">1</span>和<span class="number">0</span>/<span class="number">2</span> 口捆绑，注意最多不能够超过<span class="number">8</span>根，且接口号必须连续。 </span>
<span class="keyword">switch</span>(config-<span class="keyword">if</span>)<span class="preprocessor">#channel-group <span class="number">1</span> mode on    配置以太通道模式 直接使用on模式，不用协议自动创建。 </span>
<span class="keyword">switch</span>(config-<span class="keyword">if</span>)<span class="preprocessor">#port-channel load-balance {dst-mac | src-mac}在链路间实现负载均衡 这里可以选择基于src-dst-mac 源和目的mac进行负载分担。</span>
<span class="keyword">switch</span><span class="preprocessor">#show etherchannel  <span class="number">1</span>  summary    查看通道信息  ，可以查看捆绑的链路有哪些，以及接口的状态。</span>
<span class="keyword">switch</span><span class="preprocessor">#show  etherchannel  load-balance    查看通道负载均衡信息</span>

<span class="keyword">switch</span><span class="preprocessor">#show ip interface brief   查看接口的时候，我们会看到通过etherchannel捆绑产生的一个逻辑接口portchannel，并且处于up状态。</span>
</code></pre><hr>
<h3 id="步骤五：配置端口安全（可选）">步骤五：配置端口安全（可选）</h3><pre><code><span class="function"><span class="title">sw2</span><span class="params">(config)</span></span><span class="id">#int</span> fa1/<span class="number">1</span>  进入你要配置端口安全的接口
<span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#switchport</span> port-security   启用端口安全。
<span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#switchport</span> port-security  mac-add sticky  ：进行端口mac地址绑定，一个端口只能绑定一个mac地址，意味着只能连接服务器，不能连接交换机，并且服务器使用虚拟化的时候，虚拟出来的mac可能会被误杀。所以慎用，否则可能会导致接口进入down状态。


<span class="id">#show</span>  port-security  <span class="tag">address</span> ：这个一定要看到输出画面。
</code></pre><hr>
<h3 id="步骤六：校验">步骤六：校验</h3><p>可以拿服务器进行测试，看负载分担是否生效，还有从etherchannel中拔掉一根网线是否会造成整个portchannel都down掉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="Cisco" scheme="http://www.stackops.info/tags/Cisco/"/>
    
      <category term="switch" scheme="http://www.stackops.info/tags/switch/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[机房网络优化]]></title>
    <link href="http://www.stackops.info/2015/08/15/%E6%9C%BA%E6%88%BF%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/"/>
    <id>http://www.stackops.info/2015/08/15/机房网络优化/</id>
    <published>2015-08-15T12:50:58.000Z</published>
    <updated>2015-08-16T15:56:16.154Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="硬件介绍：">硬件介绍：</h2><p>cisco经典的接入层交换机：catalyst 2960</p>
<h2 id="机房网络分析：">机房网络分析：</h2><p>网络拓扑比较简单，主要分为内网和外网两个环境。电信机房托管，外网几乎不用做太多改变。整个网络只需要一些二层的配置，网络层都由电信机房提供，我们只需要用交换机接入即可。因为服务器大概的角色分配是web应用服务器和DB，内网之间的数据读写比较平凡，相对来说对网络带宽要求比较高。据说之前有因为交换机带宽瓶颈带来过down机现象。本次改善主要是针对带宽扩展而做的。之前的交换机都是当傻瓜交换机用，无任何配置，无任何链路冗余。<br>需要改进的几点：</p>
<ul>
<li>1， 配置RSTP生成树协议，即快速生成树。</li>
<li>2， 配置Etherchannel，以太信道，即链路聚合</li>
<li>3， 连接服务器的端口配置portfast，即快速端口。</li>
<li>4， (可选)配置端口安全，mac和ip地址绑定。</li>
</ul>
<hr>
<h3 id="一，简单介绍STP：">一，简单介绍STP：</h3><p>STP即生成树协议。实现高可用性是企业网络的主要目标之一，确保高可用性的方法是通过网络来提供设备，模块和链路的二层冗余，但是提供二层网络冗余又可能会形成桥接环路，如果产生桥接环路，数据包就会永远在设备间循环，产生广播风暴，占用网络带宽。生成树协议就是用来防止二层环路的。</p>
<p>STP只允许存在一条活动的路径，并同时阻塞其他冗余路径。在（active）活跃路径失效的情况下，冗余路径就会有一条路径成为活动路径。</p>
<h3 id="STP的几个常用版本：">STP的几个常用版本：</h3><ul>
<li><p>1， <strong>PVST+（每VLAN生成树增强版）</strong>：对stp进行增强后的版本，会为网络中配置的每个vlan提供一个独立的802.1D生成树实例。这个独立的实例支持很多增强特性：Portfast，BPUD guard，BPDU过滤，根防护（root guard）和环路保护（loop guard）。为每个vlan分别创建一个vlan会占用很多cpu和内存资源，但是这可以为每个vlan生成一个根桥。是STP树对每个VLAN的流量来说都是最优的。</p>
</li>
<li><p>2，    <strong>RSTP（快速STP）</strong>： STP的进化版本，它可以使STP更快速地收敛，这个版本可以解决很多手链的问题，不过由于这仍然是单实例的STP协议，因此它无法解决出现次优路径的问题。（次优路径的产生是因为当有多个vlan同时存在一台交换机上时，stp只会针对一个实例（vlan）进行路径选择，选出来的路径并不一定适合其他vlan故产生次优路由）。本拓扑中，两台交换机都直接连接的是内网，主要是由服务器内网接口和远程卡接口组成，之间需要互相通信，故不应该进行vlan划分。选择这种stp，收敛速度快，当发生网络故障，恢复速度相对较快。</p>
</li>
<li><p>3， <strong>MSTP(多生成树)</strong>：巨型交换网使用，cisco私有的，可以将多个拥有同样数据流量需求的VLAN映射进同一个生成树实例中。CISCO的实施方案可以提供最多16个RSTP实例，并将同一个物理和逻辑拓扑中的多个VLAN合进一个公共的RSTP实例中，每个实例都支持PortFast，BPDUguard，BPDU过滤和root guard。</p>
</li>
</ul>
<p>选择RSTP的原因：二层网络拓扑简单，无复杂vlan划分。收敛速度上看，RSTP算法源比802.1D STP要优越的多，甚至比PVST+的速度更快，大大提高了任何一个vlan在链路建立起来时拓扑收敛的速度，同时它也大大减少了任何非直连链路出现故障时，BackboneFast的收敛时间。</p>
<h3 id="RSTP的端口状态：">RSTP的端口状态：</h3><p>总共有三种端口状态：丢弃状态，学习状态和转发状态，丢弃状态，代表了802.1D STP的禁用，阻塞和监听状态</p>
<ul>
<li>丢弃（discarding）：15s，阻止传输数据帧的行为，可以阻断二层环路。</li>
<li>学习（learning）：15s，接收数据帧，并用来填充MAC表，以对未知单播数据帧的泛洪行为进行限制</li>
<li>转发（forwarding）：处于稳定状态，转发数据。</li>
</ul>
<h3 id="RSTP端口角色：">RSTP端口角色：</h3><ul>
<li>根端口：非根网桥上选择出来与根网桥相连的端口，每台交换机只有一个根端口。端口标记是R，根端口稳定状态处于转发状态。</li>
<li>指定端口：每个王端中至少有一个交换机端口作为该网段的指定端口。指定端口处于转发状态。端口标记为：D</li>
<li>替代端口：用来提供去往根网桥替代路径的端口，在稳定工作状态处于丢弃状态。当指定端口出现故障的时候会过度为指定端口。替代端口标记为A。</li>
<li>备份端口：交换机上一个额外的交换机端口，作用是为交换机充当指定交换机那个网段提供一条备份链路。备份端口处于丢弃状态。端口标记为B。</li>
<li>禁用端口：不担当任何角色。</li>
</ul>
<p><strong>注意</strong>：那些直接连接到服务器的端口，通常不会在网络中产生桥接环路，可以直接允许他们直接过度到转发状态，而跳过监听和学习阶段。边缘端口（就是启用了portfast的端口）和点到点链路会快速过度到转发状态。注意不能将交换机和交换机相连的端口配置成快速端口。</p>
<hr>
<h2 id="二，介绍EtherChannel：">二，介绍EtherChannel：</h2><p>1），作用：链路捆绑，（最多8条物理链路捆绑，为什么是8条？据说是模拟双绞线的收发）多条链路被逻辑上捆绑成一条，提高带宽，同时可以对流量进行负载分担；提供一定的冗余性，只要交换机之间还有一条链路时正常工作的，那么Etherchannel就会照常工作，尽管他的吞吐量会相应的降低；</p>
<p>2）cisco设备被捆绑的接口端号必须是连续的；华为的设备接口号可以不连续；</p>
<p>3）被捆绑的接口的所有配置必须一致（trunk）端口的速率，双工模式，vlan信息的设置必须完全一致。如果有4个100M和4个10M，则只有4个100M的工作；（这里交换机是10/100/1000M自适应的，那就不做改变，让所有参与etherchannel的接口配置都相同）。</p>
<p>2， EC的分类：<br>      1）二层EC，分为三类：<br>          a，8个access 模式捆绑；<br>          b，8个trunk link捆绑，<br>          c，access模式（接口加入某个vlan）<br>      2）三层EC：noswitchport  二层接口提升为三层<br>        portchannel 逻辑接口，IP地址加给portchannel；</p>
<p>路由器不能做EC，而使用FRR：快速重路由；</p>
<p>3，EC的配置分为两种<br>    1）手动配置：接口下：channel-group 《id》  mode on<br>2）协议协商：pagp/lacp<br>     <strong>PAGP(端口聚集协议）</strong>:cisco私有；<strong>自动创建EC链路</strong>，pagp数据包就会在启用了EC端口之间发送，以协商建立起来这条通道；<br>     <strong>LACP链路聚合控制协议</strong>：IEEE定义；可以将多个物理端口捆绑起来来建立一条EC通道；混合交换机环境中应该用这种协议来部署EC，在CISCO环境中，这两种协议都是支持的；</p>
<hr>
<p><strong>PAGP模式</strong>：<br>数据包每30s发送一次；PAGP会通过这些数据报来查看两端的配置是否一致，<br>模式：<br>AUTO：被动协商状态，会对PAGP数据包做出响应，但不会主动发起协商（此为默认模式）<br>Desirable：主动协商状态，接口会发送PAGP数据包来主动与其他接口进行协商；<br>ON：这种模式会强制端口不使用PAGP而形成EC，这种模式下，接口不会交换PAgp数据包；<br>Non-silent：non-silent是Auto和Desirable模式使用的关键字；这种模式会使用PAGP来进行操作，使接口连接到一个通道组中，并使用这个接口来进行数据传输；</p>
<table>
<thead>
<tr>
<th>模式</th>
<th style="text-align:center">隧道</th>
<th>模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>on</td>
<td style="text-align:center">可以建立</td>
<td>on</td>
</tr>
<tr>
<td>on/auto/desirable</td>
<td style="text-align:center">无法建立</td>
<td>off</td>
</tr>
<tr>
<td>auto/desirable</td>
<td style="text-align:center">可以建立</td>
<td>Desirable</td>
</tr>
<tr>
<td>auto/on</td>
<td style="text-align:center">无法建立</td>
<td>auto</td>
</tr>
</tbody>
</table>
<p>这里需要注意的是On模式，使用这条命令等于手动将接口设置为了EC，而无需进行任何的协商；不过，只有另一端也设置了on之后，这一设置才会有效；因为on模式不会进行协商；</p>
<p><strong>LACP模式</strong>：<br>passive：被动协商模式，接口会对LACP数据包做出响应，但不会主动发起协商（默认模式）；<br>Active；主动协商状态，接口会通过发送LACP数据包主动与其他接口进行协商；<br>On：这种模式会强制端口形成EC，并且不需要PAGP或LACP；</p>
<table>
<thead>
<tr>
<th>模式</th>
<th style="text-align:center">隧道</th>
<th>模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>on</td>
<td style="text-align:center">可以建立</td>
<td>on</td>
</tr>
<tr>
<td>on/active/passive</td>
<td style="text-align:center">无法建立</td>
<td>off</td>
</tr>
<tr>
<td>active/passive</td>
<td style="text-align:center">可以建立</td>
<td>active</td>
</tr>
<tr>
<td>passive/on</td>
<td style="text-align:center">无法建立</td>
<td>passive</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="配置EC的指导方针：">配置EC的指导方针：</h2><ul>
<li>1，支持EC，最大8个接口支持一个EC；</li>
<li>2，速率及双工模式：所有接口必须工作在相同的速率和双攻模式下，如果一个接口处于关闭状态，那么这条链路就会失效，而流量就会通过EC捆绑的其他接口流向对端；</li>
<li>3，交换多口分析器与EC：如果某个端口被配置为SPAN目标端口，那么EC就不会建立起来；</li>
<li>4，三层EC：管理员应该为Portchannel逻辑接口分配三层地址，而不是为通道中的物理接口分配地址；</li>
<li>5，vlan匹配：必须将EC内的所有端口划分进相同的VLAN中，或者将其配置为TRUNK。两台交换机所有链路的Native vlan 也必须匹配；</li>
<li><ol>
<li>vlan的取值范围：如果两边允许的vlan范畴不同，那么接口就不会建立起EC；</li>
</ol>
</li>
<li>7，STP路径开销：管理员仅将STP端口路径开销设置为不同的值，不会使接口在建立EC的过程中出现不兼容的问题；</li>
<li>8，端口通道与接口配置的对比：在配置好EC后，任何在port channel 接口上的配置都会对EC构成影响，而所有应用在物理接口上的配置却只会影响到其配置的那个特定接口；</li>
</ul>
<hr>
<h2 id="EC负载分担选项：">EC负载分担选项：</h2><p>当EC建立起来之后，流量就会在多条链路之间负载分担；<br>如果负载分担基于目的IP地址的，那么大多数流量都会通过同一条物理链路进行转发，因为路由器只能通过一个IP地址去往EC束中对端接口，因此这个IP地址只会与第一个物理端口相关联，也就是说所有去往这个地址的流量都会通过同一条物理链路到达对端，而这会使负载分担机制变得很低，另一方面，如果负载分担是基于MAC地址执行的，那么流量就会相当好的在两条物理链路之间进行分担，因为每一台交换机上拥有每一台PC的MAC地址；</p>
<pre><code><span class="keyword">port</span>-channel  load-balance [<span class="keyword">type</span>]
<span class="keyword">type</span>: src-mac,dst-mac,src-dst-mac,src-ip,dst-ip,src-dst-ip,src-<span class="keyword">port</span>,dst-<span class="keyword">port</span>,src-dst-<span class="keyword">port</span>;
</code></pre><p><strong>基于源MAC的负载分担</strong>：来自不同主机的数据包就会从通道的不同端口中转发出去，而来自同一台主机的数据包也会从通道的同一个端口中转发出去，这就是实现了负载分担（而交换机学到的MAC地址并不会变化）；</p>
<p><strong>基于目的MAC的负载分担</strong>：设备会根据数据帧的目的MAC地址来判断应该将数据包通过通道的哪个端口转发出去，于是去往同一目的地的数据包就会从通道的同一个端口中转发出去，而去往不同主机的数据包则会从通道的不同端口中转发出去；</p>
<p><strong>基于源ip</strong>：来自不同的ip的数据包就会从不同的端口中转发，而同一个ip的数据包也会从同一个端口转发出去。</p>
<p><strong>基于目的ip</strong>：去往不同的ip地址的数据包慧聪不同的端口进行转发，而去往同一个ip的数据包会从同一个端口转发。</p>
<p><strong>基于src-ip,dst-ip</strong>：针对来自不同ip，去往不同目的ip的数据包从不同的端口进行转发，而从同一个源ip出发，去往同一个目的ip的数据包会从同一个端口转发。</p>
<p><strong>基于src-mac,dst-mac</strong>：针对来自不同的mac地址去网不同的目的mac地址的数据包从不同的端口转发，而从同一个源mac去往同一个目的mac的数据包会从同一个端口转发。</p>
<p>当前的网络拓扑中，比较适合src-ip+dst-ip和src-mac+dst-mac这两种负载分担方式。同时可能存在虚拟mac和虚拟ip的现象，可以选择基于src-mac+dst-mac的方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="Etherchannel" scheme="http://www.stackops.info/tags/Etherchannel/"/>
    
      <category term="RSTP" scheme="http://www.stackops.info/tags/RSTP/"/>
    
      <category term="portfast" scheme="http://www.stackops.info/tags/portfast/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用submin搭建图形化svn管理工具]]></title>
    <link href="http://www.stackops.info/2015/08/09/%E4%BD%BF%E7%94%A8submin%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BD%A2%E5%8C%96svn%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.stackops.info/2015/08/09/使用submin搭建图形化svn管理工具/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-19T08:43:51.166Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="具体的安装步骤分四个部分：">具体的安装步骤分四个部分：</h2><ul>
<li>安装subversion+mod_dav_svn模块。</li>
<li>apache安装</li>
<li>python安装</li>
<li>submin安装</li>
<li>apache配置</li>
<li>问题汇总<h3 id="1-安装subversion+mod_dav_svn模块：">1.安装subversion+mod_dav_svn模块：</h3></li>
</ul>
<p><strong>注意:</strong>这里一定要安装mod_dav_svn这个模块。subversion也直接用yum安装即可。</p>
<pre><code><span class="id">#yum</span> install subversion  mod_dav_svn
</code></pre><p>如果没有安装mod_dav_svn这个模块则会导致不能打开库，不能使用svn的客户端连接svn库。</p>
<p>提示如下错误：</p>
<pre><code>[root@submin modules]# /etc/init.<span class="keyword">d</span>/httpd restart

Stopping httpd:                                            [  OK  ]

Starting httpd: httpd: <span class="keyword">Syntax</span> <span class="keyword">error</span> <span class="keyword">on</span> <span class="keyword">line</span> 221 of /etc/httpd/<span class="keyword">conf</span>/httpd.<span class="keyword">conf</span>: <span class="keyword">Syntax</span> <span class="keyword">error</span> <span class="keyword">on</span> <span class="keyword">line</span> 2 of /etc/httpd/<span class="keyword">conf</span>.<span class="keyword">d</span>/subversion.<span class="keyword">conf</span>: Cannot load /etc/httpd/modules/mod_dav_svn.<span class="keyword">so</span> into server: /etc/httpd/modules/mod_dav_svn.<span class="keyword">so</span>: cannot <span class="keyword">open</span> shared object <span class="keyword">file</span>: <span class="keyword">No</span> such <span class="keyword">file</span> or directory

                                                           [FAILED]
</code></pre><p><strong>并且每次对apache的配置文件进行修改之后都要记得进行httpd服务的重启。</strong></p>
<h3 id="2_安装apache2-2-15(可以编译或者直接yum安装，视情况而定)">2 安装apache2.2.15(可以编译或者直接yum安装，视情况而定)</h3><hr>
<p>安装apache中间由于涉及到很多依赖的插件，因此需要先完成apr，pcre等安装才能进行apache安装。<br>具体的安装操作命令如下：</p>
<h4 id="a)_apr安装_//_#_这里直接用yum安装即可：_#yum_install_apr_apr-util">a) apr安装      // # 这里直接用yum安装即可： #yum  install  apr   apr-util</h4><pre><code>wget http:<span class="comment">//www.apache.org/dist/apr/apr-1.4.6.tar.gz</span>
tar -xzvf apr-<span class="number">1.4</span><span class="number">.6</span>.tar.gz
cd apr-<span class="number">1.4</span><span class="number">.6</span>
./configure --prefix=/opt/apr --enable-threads
make
make install
</code></pre><h4 id="b)_apr-util安装">b) apr-util安装</h4><pre><code>wget http:<span class="comment">//www.apache.org/dist/apr/apr-util-1.5.1.tar.gz</span>
tar -xzvf apr-util-<span class="number">1.5</span><span class="number">.1</span>.tar.gz
cd apr-util-<span class="number">1.5</span><span class="number">.1</span>
./configure --prefix=/opt/apr --with-apr=/opt/apr
make
make install
</code></pre><h4 id="c)_pcre安装_//#直接yum安装:_#yum_install_pcre">c) pcre安装    //#直接yum安装:  #yum install pcre</h4><pre><code>wget <span class="symbol">http:</span>/<span class="regexp">/sourceforge.net/projects</span><span class="regexp">/pcre/files</span><span class="regexp">/pcre/</span><span class="number">8.32</span>/pcre-<span class="number">8.32</span>.tar.gz/download
tar -xzvf pcre-<span class="number">8.32</span>.tar.gz
cd pcre-<span class="number">8.32</span>
./configure --prefix=<span class="regexp">/opt/pcre</span>
make
make install
</code></pre><h4 id="d)_apache2-4-4安装_//注意这里submin2对apache2-2支持更好些，并没选择2-4-4直接用yum安装apache2-2即可。#yum_install_httpd">d) apache2.4.4安装    //注意这里submin2对apache2.2支持更好些，并没选择2.4.4直接用yum安装apache2.2即可。#yum install httpd</h4><pre><code>wget http:<span class="comment">//www.apache.org/dist/httpd/httpd-2.4.4.tar.gz</span>
tar -xzvf httpd-<span class="number">2.4</span><span class="number">.4</span>.tar.gz
cd httpd-<span class="number">2.4</span><span class="number">.4</span>
./configure --prefix=<span class="regexp">/opt/</span>apache24 --<span class="keyword">with</span>-pcre=<span class="regexp">/opt/</span>pcre --<span class="keyword">with</span>-apr=<span class="regexp">/opt/</span>apr --<span class="keyword">with</span>-apr-util=<span class="regexp">/opt/</span>apr  --enable-cgid  --enable-cgi
make clean
make
make install
</code></pre><h3 id="2-_安装python2-7-3_#//这里还是简单起见，直接yum安装python2-6（系统默认就带的是python2-6）个人使用的是python2-6没有问题。">2. 安装python2.7.3  #//这里还是简单起见，直接yum安装python2.6（系统默认就带的是python2.6）个人使用的是python2.6没有问题。</h3><hr>
<p>由于submin需要使用到sqlite3数据库，因此在安装python2.7.3的时候，把sqlite3模块安装上。但2.7.3的安装脚本中存在bug，需要打最新的patch解决。具体的步骤如下：</p>
<pre><code>yum search sqlite3
yum <span class="operator"><span class="keyword">install</span> sqlite-devel
wget <span class="keyword">http</span>://python.org/<span class="keyword">ftp</span>/python/<span class="number">2.7</span><span class="number">.3</span>/Python-<span class="number">2.7</span><span class="number">.3</span>.tar.bz2
tar -xvjf Python-<span class="number">2.7</span><span class="number">.3</span>.tar.bz2
cd Python-<span class="number">2.7</span><span class="number">.3</span>
more README
wget <span class="keyword">http</span>://bugs.python.org/file25647/sqlite3_int64_v2.<span class="keyword">patch</span>
<span class="keyword">patch</span> -p1 &lt; sqlite3_int64_v2.<span class="keyword">patch</span>  #打补丁   
./configure
make
make <span class="keyword">install</span></span>
</code></pre><p>因为是通过sqlite这个数据库存储用户的账户名和密码。而且验证的时候也是直接从sqlite数据库中读取比较，所以不要忘记安装  apr-util-sqlite</p>
<pre><code><span class="id">#yum</span> install apr-util-sqlite
</code></pre><p>这个包。安装正常之后我们可以在/usr/lib64/apr-util-1/这个目录下看到apr_dbd_sqlite3.so这个动态库。</p>
<pre><code>[root@svnadmin conf]<span class="preprocessor"># cd /usr/lib64/apr-util-<span class="number">1</span>/</span>

[root@svnadmin apr-util-<span class="number">1</span>]<span class="preprocessor"># ls</span>

apr_dbd_sqlite3-<span class="number">1.</span>so  apr_dbd_sqlite3.so  apr_ldap-<span class="number">1.</span>so  apr_ldap.so

[root@svnadmin apr-util-<span class="number">1</span>]<span class="preprocessor"># ll</span>

total <span class="number">28</span>

-rwxr-xr-x. <span class="number">1</span> root root <span class="number">15792</span> Jun <span class="number">25</span>  <span class="number">2011</span> apr_dbd_sqlite3-<span class="number">1.</span>so

lrwxrwxrwx. <span class="number">1</span> root root    <span class="number">20</span> Aug <span class="number">13</span> <span class="number">15</span>:<span class="number">51</span> apr_dbd_sqlite3.so -&gt; apr_dbd_sqlite3-<span class="number">1.</span>so

-rwxr-xr-x. <span class="number">1</span> root root  <span class="number">9488</span> Jun <span class="number">25</span>  <span class="number">2011</span> apr_ldap-<span class="number">1.</span>so

lrwxrwxrwx. <span class="number">1</span> root root    <span class="number">13</span> Aug <span class="number">13</span> <span class="number">14</span>:<span class="number">25</span> apr_ldap.so -&gt; apr_ldap-<span class="number">1.</span>so
</code></pre><h2 id="3-_安装submin">3. 安装submin</h2><hr>
<p>安装submin过程比较简单的，直接使用python执行安装包中的安装脚本。</p>
<pre><code>wget http:<span class="comment">//supermind.nl/submin/current/submin-2.1.0-1.tar.gz</span>
tar -zxvf submin-<span class="number">2.1</span>.<span class="number">0</span>-<span class="number">1</span><span class="class">.tar</span><span class="class">.gz</span>
cd submin-<span class="number">2.1</span>.<span class="number">0</span>-<span class="number">1</span>
python setup<span class="class">.py</span> install  <span class="comment">//还是使用的python2.6安装。使用python2.7安装可能会报错：</span>

submin2-admin /var/lib/submin initenv liyahua@xxx<span class="class">.com</span>   <span class="comment">//这里是初始化submin的安装环境，指定submin的安装路径，根据自己的实际情况来选择，例如我们可以将svn的repository存放在/opt/svnroot目录下，就在这里进行修改。</span>
</code></pre><h2 id="4-_配置apache">4. 配置apache</h2><hr>
<p>配置apache的过程中需要修改submin的配置文件。默认安装路径是/var/lib/submin/，需要安装相应的模块：</p>
<h3 id="例如报错：">例如报错：</h3><p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/12a90e46-b7dd-4480-8fc5-490ee586bbd5.png" alt="error"><br>报错有  <strong>mod_dbd</strong>和<strong>mod_auth_dbd</strong>两个模块没有加载。只需要在/etc/httpd/conf/httpd.conf中加载相关的模块就可以了。</p>
<pre><code><span class="keyword"><span class="common">LoadModule</span></span> authn_dbd_module modules/mod_authn_dbd.so
<span class="keyword"><span class="common">LoadModule</span></span> dbd_module modules/mod_dbd.so
</code></pre><p><strong>配置apache</strong>，主要是设置submin的conf文件，另外需要dbd,authz,cgi的module就可以。如果启动过程发现缺少，就打开配置即可。</p>
<p>另外一个问题就是在配置完毕后，访问submin报403错误，后查到是，submin的脚本是在apache2.2的基础上开发的，没有支持apache2.4.4，需要设置符合apache2.4.4的访问策略。//我这里使用的是apache2.2，所以没有上述的问题。</p>
<pre><code>[root@localhost ~]# tail -<span class="number">10</span>f /opt/apache24/conf/httpd.conf
<span class="preprocessor">#BrowserMatch "MSIE 10.0;" bad_DNT</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#RequestHeader unset DNT env=bad_DNT</span>
<span class="preprocessor">#</span>
Include /<span class="keyword">var</span>/lib/submin/conf/apache-webui-cgi.conf
Include /<span class="keyword">var</span>/lib/submin/conf/apache-svn.conf
</code></pre><p>这里附上我修改过后的submin的配置文件：</p>
<pre><code><span class="tag">&lt;Virtualhost *:80&gt;</span>
        <span class="keyword">serveradmin</span> liyahua@xxx.com
        <span class="keyword"><span class="common">Servername</span></span> svnadmin.xx.com
        <span class="keyword"><span class="common">DocumentRoot</span></span> /var/lib/submin/cgi-bin

     <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">On</span>
        <span class="keyword"><span class="common">RewriteRule</span></span> ^[/]?$ http://svnadmin.ci.com/submin<span class="sqbracket"> [L,R]</span>
<span class="tag">&lt;IfModule !mod_authn_dbd.c&gt;</span>
    <span class="comment"># Nothing should work, so show a page describing this</span>
    <span class="keyword">AliasMatch</span> <span class="string">"^/svn"</span> /usr/lib/python2.6/site-packages/submin/static/www/nomodauthndbd.html
    <span class="tag">&lt;Location "/svn"&gt;</span>
        <span class="keyword"><span class="common">Order</span></span> allow,deny
        <span class="keyword"><span class="common">Allow</span></span> from <span class="literal">all</span>
    <span class="tag">&lt;/Location&gt;</span>
<span class="tag">&lt;/IfModule&gt;</span>
<span class="tag">&lt;IfModule mod_authn_dbd.c&gt;</span>
    <span class="keyword">DBDriver</span> sqlite3
    <span class="keyword">DBDParams</span> <span class="string">"/var/lib/submin/conf/submin.db"</span>    #这是一个sqlite的数据库文件，存放了用户名和密码。

    <span class="tag">&lt;IfModule mod_dav_svn.c&gt;</span>
        <span class="tag">&lt;Location "/svn"&gt;</span>
            <span class="keyword">DAV</span> svn
            <span class="keyword">SVNParentPath</span> /var/lib/submin/svn   #这给目录里面存放了所有的svn库

            <span class="keyword">AuthType</span> Basic
            <span class="keyword">AuthName</span> <span class="string">"Subversion repository"</span>

            <span class="comment"># Authentication</span>
            <span class="keyword">AuthBasicProvider</span> dbd
            <span class="keyword">AuthDBDUserPWQuery</span> <span class="string">"SELECT password FROM users WHERE name=%s"</span>

            <span class="comment"># Authorization</span>
            <span class="keyword">AuthzSVNAccessFile</span> /var/lib/submin/conf/authz       #这个文件定义了不同的用户角色，具有不同的权限

            <span class="keyword">Satisfy</span> Any
            <span class="keyword">Require</span> valid-user
        <span class="tag">&lt;/Location&gt;</span>
    <span class="tag">&lt;/IfModule&gt;</span>

<span class="tag">&lt;/IfModule&gt;</span>
<span class="tag">&lt;/VirtualHost&gt;</span>
</code></pre><p>当通过浏览器访问web管理界面的时候：<a href="http://192.168.3.48/submin会提示你输入账户和密码，这时候你可以点击页面上的" target="_blank" rel="external">http://192.168.3.48/submin会提示你输入账户和密码，这时候你可以点击页面上的</a>  Forgot your  password , 然后会主动发一封邮件给root用户：<br>可以通过命令：# cat /var/spool/mail/root 查看发过来的重置密码的连接，我们可以通过该链接进行密码的修改：<br>    From: root@localhost.novalocal<br>    To: liyahua@xxx.com<br>    Subject: Submin password reset request<br>    Message-Id: <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#50;&#x30;&#49;&#53;&#48;&#56;&#49;&#x33;&#48;&#54;&#x32;&#x37;&#x35;&#x35;&#x2e;&#66;&#x36;&#56;&#54;&#70;&#x36;&#49;&#70;&#x37;&#68;&#64;&#x73;&#118;&#x6e;&#x61;&#100;&#x6d;&#x69;&#110;&#x2e;&#110;&#x6f;&#x76;&#97;&#108;&#111;&#x63;&#x61;&#x6c;">&#50;&#x30;&#49;&#53;&#48;&#56;&#49;&#x33;&#48;&#54;&#x32;&#x37;&#x35;&#x35;&#x2e;&#66;&#x36;&#56;&#54;&#70;&#x36;&#49;&#70;&#x37;&#68;&#64;&#x73;&#118;&#x6e;&#x61;&#100;&#x6d;&#x69;&#110;&#x2e;&#110;&#x6f;&#x76;&#97;&#108;&#111;&#x63;&#x61;&#x6c;</a><br>    Date: Thu, 13 Aug 2015 06:27:55 +0000 (UTC)</p>
<pre><code>You <span class="keyword">are</span> receiving this email because someone requested a password reset for
your account. If you don't know what this <span class="keyword">is</span> about, you can safely ignore it,
the reset request will expire automatically.

If you requested this passwod reset, you can reset your password by going to
the following URL:

http://svnadmin.novalocal/submin/password/admin/IANqikp4ZvSIFIWZ9sTDKoYr4OIYmTtBBcnYfkiXIc9y1oegJm

<span class="keyword">Kind</span> regards,
Submin

PS. The request was sent from submin2-admin

--B686F61F7D.1439447277/svnadmin.novalocal--
</code></pre><p>可以看到链接，在浏览器中打开链接，输入账户之后会再发一封邮件给你，里面包含了重置之后的密码。可以使用密码重新登陆submin。<br>如果没有收到邮件，在/var/spool/mail/目录下没有root这个用户，说明postfix没有正常启动。查看错误日志：<br>    [Tue Aug 18 14:05:21 2015] [error] [client 192.168.1.124] postdrop: warning: unable to look up public/pickup: No such file or directory, referer: <a href="http://svnadmin.ci.com/submin/password/" target="_blank" rel="external">http://svnadmin.ci.com/submin/password/</a><br>    [Tue Aug 18 14:06:38 2015] [error] [client 192.168.1.124] postdrop: warning: unable to look up public/pickup: No such file or directory, referer: <a href="http://svnadmin.ci.com/submin/password/" target="_blank" rel="external">http://svnadmin.ci.com/submin/password/</a></p>
<h4 id="解决方法是：">解决方法是：</h4><pre><code>mkfifo /<span class="keyword">var</span>/spool/<span class="keyword">postfix</span>/public/pickup
ps aux | grep mail
kill  掉运行的进程。
sudo /etc/<span class="keyword">init</span>.d/<span class="keyword">postfix</span> restart
重新启动<span class="keyword">postfix</span>即可
</code></pre><p>修改过密码后即可正常登录<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/5eede493-8e20-429e-95e6-eff22784e4f5.png" alt="login"><br>可以在这个图形化的界面中进行密码修改，用户，组，repository创建删除，权限的授予等svn账户管理,比较方便直观.</p>
<p>当所有的环境都安装完成之后，可以使用tortoise svn这个windows下的客户端连接svn库。<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/2b2576d2-5dc5-4e31-b3bb-3b4cbdfff49b.jpg" alt="tortois svn"><br>至此，svn的图形化管理工具submin已经安装完成了。<br>这里还是有必要提一下，submin几个比较重要的目录：</p>
<ul>
<li>1   /var/lib/submin/svn : 这个目录相当于svn仓库，存放了所有svn的repository，至关重要。</li>
<li>2   /var/lib/conf/  :  这个目录下存放了submin的所有配置文件，</li>
<li>3   /var/lib/conf/submin.db  ：这是一个sqlite数据库文件，里面存放的是svn的用户名和密码</li>
<li>4   /var/lib/conf/authz  ：这个文件里面存放了每个svn用户对应的权限。</li>
</ul>
<hr>
<h3 id="nginx反向代理：">nginx反向代理：</h3><p>当submin配置在内网的服务器时，我们无法通过外网打开submin进行svn的管理。这时候就需要用到nginx的反向代理特性。</p>
<p>这个功能的主要思想是（个人理解）：<br>    在nginx建立虚拟主机，根据用户请求的内容进行处理，当用户请求的内容匹配到nginx中虚拟主机定义的location之时，将会由nginx将请求转交给配置的nginx的虚拟主机。（工作中应该大多会使用nginx做前端代理，将请求负载分担给后端不同的apache服务器）。通常nginx启用80端口对外开放，httpd启用8080（自己定义的端口），将对80端口的请求代理到8080端口。</p>
<h4 id="首先nginx的安装：">首先nginx的安装：</h4><p>简单起见，使用yum安装，不过这里必须先使用nginx的源：</p>
<pre><code>rpm -ivh <span class="string">http:</span><span class="comment">//nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span>
yum info  nginx  ： 查看nginx包的信息。
yum install <span class="string">nginx    :</span>安装nginx
</code></pre><p>安装过nginx之后，其配置文件都在它的默认路径下，/etc/nginx/  </p>
<p>nginx的主要修改的配置文件有这么几个：nginx.conf  conf.d/default.conf  …等。我主要修改了default.conf这个配置文件，并加了一个svnadmin.ci.com.conf（nginx.conf 会include  conf.d/*.conf）</p>
<h4 id="简单default-conf配置文件：">简单default.conf配置文件：</h4><pre><code>server {
    listen       <span class="number">80</span>;
    server_name _;
    <span class="keyword">return</span> <span class="number">404</span>;
}    
    access_log  /var/<span class="built_in">log</span>/nginx/access.<span class="built_in">log</span>  main;
    error_page  <span class="number">404</span>            /usr/share/nginx/html/<span class="number">404.</span>html;
</code></pre><h4 id="svnadmin-ci-com-conf配置文件：（很简陋，小白手笔。）">svnadmin.ci.com.conf配置文件：（很简陋，小白手笔。）</h4><pre><code>server {
        listen       <span class="number">80</span>;
        server_name  <span class="number">192.168</span>.<span class="number">3.47</span>;
        location /        {
                proxy_pass  http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">88</span>;
                proxy_set_header   Host   <span class="variable">$host</span>;
                proxy_set_header   X-Real-IP        <span class="variable">$remote</span>_addr;
                proxy_set_header   X-Forwarded-For  <span class="variable">$proxy</span>_add_x_forwarded_for;
                proxy_hide_header X-Powered-By;
                client_max_body_size <span class="number">200</span>M;

        }
        location /submin/       {
            proxy_pass  http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">88</span>;
            proxy_set_header   Host   <span class="variable">$host</span>;
            proxy_set_header   X-Real-IP        <span class="variable">$remote</span>_addr;
            proxy_set_header   X-Forwarded-For  <span class="variable">$proxy</span>_add_x_forwarded_for;
            proxy_hide_header X-Powered-By;
        }
}
</code></pre><p>然后重启nginx服务即可，在浏览器中输入 192.168.3.47/submin将会代理到192.168.3.47:88/submin这里。</p>
<hr>
<h3 id="使用submin进行submin库的迁移备份。">使用submin进行submin库的迁移备份。</h3><pre><code>当前线上已经有一台运行<span class="keyword">submin </span> svn的服务器，可以再配置一台作为备用，并且同步原来的svn库。
</code></pre><p>使用submin进行svn库的同步，关键的主要有三个文件：</p>
<pre><code><span class="regexp">/var/</span>lib<span class="regexp">/submin/</span>conf/authz  这个文件存放的是用户对应的权限信息。
<span class="regexp">/var/</span>lib<span class="regexp">/submin/</span>conf/submindb   ：这个存放的是用户的用户名和密码。
<span class="regexp">/opt/</span>svnroot  ：个人指定的用于存储svn代码库。
</code></pre><p>迁移主要是把这三个文件拷贝到对应的位置。如果作为从库，则需要定期对数据库进行同步。个人想法是使用crontab在每天晚上12点左右使用rsync脚本实现增量备份的功能。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="submin" scheme="http://www.stackops.info/tags/submin/"/>
    
      <category term="svn" scheme="http://www.stackops.info/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建文档]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack搭建文档/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T03:39:45.748Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h3 id="openstack：">openstack：</h3><pre><code>官方文档中有两种openstack的架构，一种是采用openstack的<span class="keyword">*</span><span class="keyword">*</span>neutron<span class="keyword">*</span><span class="keyword">*</span>网络模型来搭建，需要至少三个节点：compute，controller和network。另一种是使用nova-network这个模型，相对来说比较简单\(包括三种模式：flat,dhcp flat,vlan\)
</code></pre><h4 id="一，硬件的需求：(服务器最好都要支持硬件虚拟化功能)">一，硬件的需求：(服务器最好都要支持硬件虚拟化功能)</h4><pre><code>三个节点要求：
    Controller Node: <span class="number">1</span> processor, <span class="number">2</span> GB memory, and <span class="number">5</span> GB storage
    Network Node: <span class="number">1</span> processor, <span class="number">512</span> MB memory, and <span class="number">5</span> GB storage
    Compute Node: <span class="number">1</span> processor, <span class="number">2</span> GB memory, and <span class="number">10</span> GB storage
</code></pre><h4 id="网卡要求：">网卡要求：</h4><pre><code>compute节点：<span class="number">2</span> NIC
controller节点：<span class="number">1</span> NIC
network节点： <span class="number">3</span> NIC  (因为三台服务器的网卡都只有两块。暂时不满足硬件需求，第一次尝试搭建的时候没注意，按照三个节点搭建，并且没配置tunnel接口，导致网络不通）。
</code></pre><h4 id="网络名称解释：">网络名称解释：</h4><p><strong>外部网络</strong>: 公共网络，外部或Internet可以访问的网络<br><strong>内部网络</strong>: 私有网络，仅内部访问的网络<br><strong>管理网络</strong>: 用于OpenStack组件以及MySQL DB Server, RabbitMQmessaging server之间的通信<br>这次采用的网络拓扑架构比较简单，网络模式选择的是nova-network的FlatDHCP，只配置了两个节点，compute和controller节点。最多只需要两个NIC，现有的服务器满足需求。具体选型根据大家现有的硬件配置来进行选择，也可以在一台服务器上配置所有服务，只不过性能上会相对来说比较差。<br>后续会详细介绍各网络模型。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建二]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BA%8C/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack-基础环境搭建二/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T03:00:50.443Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="NTP服务的安装_：">NTP服务的安装 ：</h2><p>（1），安装NTP服务实现各个节点之间的时间同步(这点很重要，如果各节点之间时间不同步会导致后来的服务异常)。</p>
<h2 id="controller节点：">controller节点：</h2><pre><code><span class="number">1.</span> 安装NTP服务：
   <span class="preprocessor">#apt-get install ntp </span>
<span class="number">2.</span> 修改/etc/ntp.conf配置文件：
server controller iburst
<span class="keyword">restrict</span> -<span class="number">4</span> <span class="keyword">default</span> kod notrap nomodify
<span class="keyword">restrict</span> -<span class="number">6</span> <span class="keyword">default</span> kod notrap nomodify   
（删掉nopeer and noquery ）
如果 /var/lib/ntp/ntp.conf文件存在，则删除。
<span class="number">3.</span> 重启ntp的服务
<span class="preprocessor">#  service ntp restart</span>
</code></pre><h2 id="其他节点：">其他节点：</h2><pre><code><span class="number">1.</span> 安装NTP服务
 <span class="preprocessor">#apt-get install  ntp</span>
<span class="number">2.</span> 修改/etc/ntp.conf的配置文件
 server controller iburst 
<span class="number">3.</span> 重启ntp服务
 <span class="preprocessor">#service  ntp restart</span>
</code></pre><h3 id="NTP同步状态查看：">NTP同步状态查看：</h3><pre><code>root@compute:~<span class="preprocessor"># ntpq -c peers</span>
 remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">796</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">19.549</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1067</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>

root@compute:~<span class="preprocessor"># ntpq -c assoc</span>
ind assid status  conf reach auth condition  last_event cnt
===========================================================
  <span class="number">1</span> <span class="number">52871</span>  <span class="number">9424</span>   yes   yes  none candidate   reachable  <span class="number">2</span>
  <span class="number">2</span> <span class="number">52872</span>  <span class="number">963</span>a   yes   yes  none  sys.peer    sys_peer  <span class="number">3</span>
</code></pre><p>可以很明显看出来服务器之间已经处于同步状态，计算节点都和控制节点建立同步关系了。<br>同时我们可以通过命令</p>
<pre><code><span class="preprocessor">#watch  ntp -p   动态的查看ntp状态</span>
very <span class="number">2.0</span>s: ntpq -p                                      Tue Aug <span class="number">11</span> <span class="number">23</span>:<span class="number">23</span>:<span class="number">04</span> <span class="number">2015</span>

 remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">448</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">20.335</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1800</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>
</code></pre><p>我来解释一下其中的含义</p>
<h3 id="remote:_它指的就是本地机器所连接的远程NTP服务器">remote: 它指的就是本地机器所连接的远程NTP服务器</h3><h3 id="refid:_它指的是给远程服务器(e-g-_91-189-89-199_)提供时间同步的服务器">refid: 它指的是给远程服务器(e.g. 91.189.89.199 )提供时间同步的服务器</h3><h3 id="st:_远程服务器的层级别（stratum）-_由于NTP是层型结构,有顶端的服务器,多层的Relay_Server再到客户端-_所以服务器从高到低级别可以设定为1-16-_为了减缓负荷和网络堵塞,原则上应该避免直接连接到级别为1的服务器的-">st: 远程服务器的层级别（stratum）. 由于NTP是层型结构,有顶端的服务器,多层的Relay Server再到客户端. 所以服务器从高到低级别可以设定为1-16. 为了减缓负荷和网络堵塞,原则上应该避免直接连接到级别为1的服务器的.</h3><h3 id="t:_这个…-我也不知道啥意思^_^">t: 这个…..我也不知道啥意思^_^</h3><h3 id="when:_我个人把它理解为一个计时器用来告诉我们还有多久本地机器就需要和远程服务器进行一次时间同步">when: 我个人把它理解为一个计时器用来告诉我们还有多久本地机器就需要和远程服务器进行一次时间同步</h3><h3 id="poll:_本地机和远程服务器多少时间进行一次同步(单位为秒)-_在一开始运行NTP的时候这个poll值会比较小,那样和服务器同步的频率也就增加了,可以尽快调整到正确的时间范围-之后poll值会逐渐增大,同步的频率也就会相应减小">poll: 本地机和远程服务器多少时间进行一次同步(单位为秒). 在一开始运行NTP的时候这个poll值会比较小,那样和服务器同步的频率也就增加了,可以尽快调整到正确的时间范围.之后poll值会逐渐增大,同步的频率也就会相应减小</h3><h3 id="reach:_这是一个八进制值,用来测试能否和服务器连接-每成功连接一次它的值就会增加">reach: 这是一个八进制值,用来测试能否和服务器连接.每成功连接一次它的值就会增加</h3><h3 id="delay:_从本地机发送同步要求到服务器的round_trip_time">delay: 从本地机发送同步要求到服务器的round trip time</h3><h3 id="offset:_这是个最关键的值,_它告诉了我们本地机和服务器之间的时间差别-_offset越接近于0,我们就和服务器的时间越接近">offset: 这是个最关键的值, 它告诉了我们本地机和服务器之间的时间差别. offset越接近于0,我们就和服务器的时间越接近</h3><h3 id="jitter:_这是一个用来做统计的值-_它统计了在特定个连续的连接数里offset的分布情况-_简单地说这个数值的绝对值越小我们和服务器的时间就越精确">jitter: 这是一个用来做统计的值. 它统计了在特定个连续的连接数里offset的分布情况. 简单地说这个数值的绝对值越小我们和服务器的时间就越精确</h3><h3 id="NTP安全设置(restrict)">NTP安全设置(restrict)</h3><h3 id="运行一个NTP_Server不需要占用很多的系统资源,所以也不用专门配置独立的服务器,就可以给许多client提供时间同步服务但是一些基本的安全设置还是很有必要的。">运行一个NTP Server不需要占用很多的系统资源,所以也不用专门配置独立的服务器,就可以给许多client提供时间同步服务但是一些基本的安全设置还是很有必要的。</h3><h3 id="那么这里一个很简单的思路就是第一我们只允许局域网内一部分的用户连接到我们的服务器-_第二个就是这些client不能修改我们服务器上的时间关于权限设定部分">那么这里一个很简单的思路就是第一我们只允许局域网内一部分的用户连接到我们的服务器. 第二个就是这些client不能修改我们服务器上的时间关于权限设定部分</h3><h3 id="权限的设定主要以_restrict_这个参数来设定，主要的语法为：">权限的设定主要以 restrict 这个参数来设定，主要的语法为：</h3><pre><code><span class="label">restrict</span> <span class="literal">IP</span>地址 mask 子网掩码 参数 
</code></pre><h3 id="其中_IP_可以是IP地址，也可以是_default_，default_就是指所有的IP">其中 IP 可以是IP地址，也可以是 default ，default 就是指所有的IP</h3><ul>
<li>参数有以下几个 ： <h3 id="ignore_：关闭所有的_NTP_联机服务">ignore　：关闭所有的 NTP 联机服务</h3><h3 id="nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。">nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。</h3><h3 id="notrust_：客户端除非通过认证，否则该客户端来源将被视为不信任子网">notrust ：客户端除非通过认证，否则该客户端来源将被视为不信任子网</h3><h3 id="noquery_：不提供客户端的时间查询">noquery ：不提供客户端的时间查询</h3></li>
</ul>
<p>在安装Openstack的各个功能组件之前，先安装Openstack的packages：（在所有节点上都安装）</p>
<pre><code><span class="id">#apt-get</span> install ubuntu-cloud-keyring
<span class="id">#echo</span> <span class="string">"deb http://ubuntu-cloud.archive.canonical.com/ubuntu"</span> \
<span class="string">"trusty-updates/juno main"</span> &gt; /etc/apt/sources<span class="class">.list</span><span class="class">.d</span>/cloudarchive-juno.list
</code></pre><p>更新系统上的包：</p>
<pre><code>#apt-<span class="built_in">get</span> update &amp;&amp; apt-<span class="built_in">get</span> <span class="built_in">dist</span>-upgrade  
</code></pre><p>如果不安装openstack库，直接安装keystone，会keystone能够安装成功，但是keystone启动后，接着就会失败。造成keystone为unknown instance</p>
<h2 id="（2），接着安装MYSQL的数据库**：">（2），接着安装MYSQL的数据库**：</h2><p>Openstack的主要组件都需要数据库的支持，Openstack支持MySQL，PostgreSQL，SQLite。这里选择mysql作为数据库。数据库安装在controller节点上。<br> (补充： MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险).</p>
<pre><code>## controller节点安装：
        1. 安装包：#apt-get <span class="operator"><span class="keyword">install</span> mariadb-<span class="keyword">server</span> python-mysqldb
               （安装完会提示输入root密码）
        <span class="number">2.</span> 修改/etc/mysql/my.cnf这个配置文件，修改以下内容：
        [mysqld]
        ...
        bind-address = <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>  
        <span class="keyword">default</span>-<span class="keyword">storage</span>-<span class="keyword">engine</span> = <span class="keyword">innodb</span>
        innodb_file_per_table
        <span class="keyword">collation</span>-<span class="keyword">server</span> = utf8_general_ci
        init-<span class="keyword">connect</span> = <span class="string">'SET NAMES utf8'</span>
        <span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span> = utf8

        <span class="number">3.</span> 重启服务：# service mysql restart
        <span class="number">4.</span> 保护数据库服务：# mysql_secure_installation</span>
</code></pre><h2 id="（3），安装Messaging服务：（通常安装在controller节点上）。">（3），安装Messaging服务：（通常安装在controller节点上）。</h2><pre><code><span class="number">1.</span> Openstack组件之间的通需要通过支持AMQP的Messaging的服务软件，Openstack支持的有RabbitMQ，Qpid，和ZeroMQ，这里安装的RabbitMQ，
<span class="preprocessor"># apt-get install rabbitmq-server</span>
<span class="number">2.</span> 安装RabbitMQ服务软件时，RabbitMQ默认用户guest的密码是guest，我们需要修改一下guest密码： 
<span class="preprocessor"># rabbitmqctl change_password guest RABBIT_PASS   (替换成你用的密码)</span>
<span class="number">3.</span> 安装完之后需要查看RabbitMQ的version
root@controller:~<span class="preprocessor">#  rabbitmqctl status | grep rabbit</span>
Status of node rabbit@controller ...
{running_applications,[{rabbit,<span class="string">"RabbitMQ"</span>,<span class="string">"3.2.4"</span>},
<span class="number">4.</span> 如果 <span class="number">3.3</span><span class="number">.0</span> 或则更新，则需要配置允许guest 账户，允许访问
修改配置文件/etc/rabbitmq/rabbitmq.config
添加如下内容：  [{rabbit, [{loopback_users, []}]}]. 
<span class="number">5</span>，重启服务：
<span class="preprocessor"># service rabbitmq-server restart </span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://www.stackops.info/tags/AMQP/"/>
    
      <category term="NTP" scheme="http://www.stackops.info/tags/NTP/"/>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建一]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%80/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack-基础环境搭建一/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T10:48:06.023Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p> <strong>操作系统系统选择</strong>：使用ubuntu server  ubuntu-14.04.2-server-amd64  作为服务器的操作系统。<br> 第一次给服务器安装操作系统，我很low的拿着个小U盘来安装，使用UltraISO制作系统镜像。安装系统前对磁盘做了RAID5。</p>
<p>安装完操作系统之后，需要修改接口的ip地址，使服务器能够连得上外网(不能简单的按照官方文档配置，必须切合实际，毕竟还需要安装组件),具体接口的配置如下：</p>
<h3 id="controller节点：">controller节点：</h3><pre><code>root@controller:~<span class="preprocessor"># cat /etc/network/interfaces</span>
\<span class="preprocessor"># This file describes the network interfaces available on your system</span>
\<span class="preprocessor"># and how to activate them. For more information, see interfaces(<span class="number">5</span>).</span>

\<span class="preprocessor"># The loopback network interface</span>
<span class="keyword">auto</span> lo
iface lo inet loopback
<span class="keyword">auto</span> eth0
iface eth0 inet <span class="keyword">static</span>
address <span class="number">192.168</span><span class="number">.3</span><span class="number">.10</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
gateway <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>
<span class="keyword">auto</span> eth1
iface eth1 inet <span class="keyword">static</span>
address <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> 
</code></pre><p>(这里发生过一件很挫的事，居然在同一台服务器上配置了两个网关，导致有的时候网关是10.0.0.1一会儿又编程192.168.3.254.使得网络出现故障)。</p>
<h3 id="修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。">修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。</h3><pre><code>root@controller:~<span class="preprocessor"># cat /etc/hosts</span>
\<span class="preprocessor">#<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    localhost</span>
\<span class="preprocessor">#<span class="number">127.0</span><span class="number">.1</span><span class="number">.1</span>    controller</span>

\<span class="preprocessor"># controller    <span class="number">192.168</span><span class="number">.3</span><span class="number">.10</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>       controller
\<span class="preprocessor">#compute    <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.31</span>       compute
\<span class="preprocessor">#compute1    <span class="number">192.168</span><span class="number">.3</span><span class="number">.11</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.41</span>    compute1
\<span class="preprocessor">#compute2    <span class="number">192.168</span><span class="number">.3</span><span class="number">.14</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>    compute2

<span class="preprocessor"># The following lines are desirable for IPv6 capable hosts</span>
<span class="preprocessor">#::<span class="number">1</span>     localhost ip6-localhost ip6-loopback</span>
<span class="preprocessor">#ff02::<span class="number">1</span> ip6-allnodes</span>
<span class="preprocessor">#ff02::<span class="number">2</span> ip6-allrouters</span>
</code></pre><p>这里注释掉了127.0.0.1。这里使用hosts为以后网络环境发生变化提供了很高的可扩展性，比如我从公司的内网192.168.0.0/24迁移到192.168.3.0/24段，需要进行改变的内容就比较小(因为很多配置文件中用到ip地址进行彼此之间信息交互,而是用host则比较方便)目前的博客是在我迁移过后做的.</p>
<h3 id="compute节点：">compute节点：</h3><pre><code>root@compute:~<span class="preprocessor"># cat /etc/network/interfaces</span>
<span class="preprocessor"># This file describes the network interfaces available on your system</span>
<span class="preprocessor"># and how to activate them. For more information, see interfaces(<span class="number">5</span>).</span>

<span class="preprocessor"># The loopback network interfaces</span>
<span class="keyword">auto</span> lo
iface lo inet loopback

<span class="keyword">auto</span> eth0
iface eth0 inet <span class="keyword">static</span>
<span class="preprocessor">#address <span class="number">192.168</span><span class="number">.0</span><span class="number">.142</span></span>
address <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
gateway <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>
<span class="preprocessor">#auto eth0 </span>
iface eth0 inet manual
    up ip link <span class="built_in">set</span> dev $IFACE up
    down ip link <span class="built_in">set</span> dev $IFACE down
<span class="keyword">auto</span> eth1
iface eth1 inet <span class="keyword">static</span>
address <span class="number">10.0</span><span class="number">.0</span><span class="number">.31</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
</code></pre><p>###　修改/etc/hosts配置文件，关联IP和name<br>    root@compute:~# cat /etc/hosts</p>
<pre><code><span class="hexcolor">#127</span>.<span class="number">0.0</span>.<span class="number">1</span>    localhost
<span class="hexcolor">#127</span>.<span class="number">0.1</span>.<span class="number">1</span>    compute
<span class="id">#computel</span>
<span class="number">10.0</span>.<span class="number">0.31</span>    compute
<span class="id">#controller</span>
<span class="number">10.0</span>.<span class="number">0.11</span>    controller
<span class="id">#The</span> following lines are desirable <span class="keyword">for</span> IPv6 capable hosts
::<span class="number">1</span>     localhost ip6-localhost ip6-loopback
ff02::<span class="number">1</span> ip6-allnodes
ff02::<span class="number">2</span> ip6-allrouters
</code></pre><h4 id="同时修改两个节点的DNS配置文件为：/etc/resolv-conf">同时修改两个节点的DNS配置文件为：/etc/resolv.conf</h4><p>添加：<br>    nameserver  114.114.114.114<br>///使用电信的DNS服务器。其实这样修改在ubuntu系统环境中时不对的，只能够暂时生效，如果想要永久生效，必须修改配置文件/etc/resolvconf/resolv.conf.d/base  每次开机都会从这个配置文件加载dns到/etc/resolv.conf这个配置文件中,这一点和centos不同。</p>
<p>基本的网络地址配置完成之后，能够实现：</p>
<ul>
<li>1），compute和controller之间相互ping通，包括10.0.0.0网段和192.168.3.0网段</li>
<li>2），都能够访问外网。</li>
<li>3），都能够进行地址解析。</li>
</ul>
<h3 id="接着配置ubuntu的更新源：这里使用的是阿里云的更新源。_配置文件是：/etc/apt/source-list">接着配置ubuntu的更新源：这里使用的是阿里云的更新源。 配置文件是：<strong>/etc/apt/source.list</strong></h3><pre><code>root<span class="property">@controller</span>:~<span class="comment"># cat /etc/apt/sources.list</span>
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-security main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-security main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse
</code></pre><p>配置完更新源之后进行更新：</p>
<pre><code>#apt-<span class="built_in">get</span>  <span class="keyword">update</span>
</code></pre><p>然后安装ssh服务，实现远程访问：</p>
<pre><code><span class="id">#apt-get</span> install  ssh  -y
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[first]]></title>
    <link href="http://www.stackops.info/2015/08/09/first/"/>
    <id>http://www.stackops.info/2015/08/09/first/</id>
    <published>2015-08-09T08:37:45.000Z</published>
    <updated>2015-08-12T02:57:16.322Z</updated>
    <content type="html"><![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]>
    </summary>
    
      <category term="hexo" scheme="http://www.stackops.info/tags/hexo/"/>
    
  </entry>
  
</feed>