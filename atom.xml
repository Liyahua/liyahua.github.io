<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Leoli's  blog]]></title>
  <subtitle><![CDATA[Follow your heart]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.stackops.info//"/>
  <updated>2015-09-13T04:16:00.824Z</updated>
  <id>http://www.stackops.info//</id>
  
  <author>
    <name><![CDATA[liyahua]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Linux内核升级]]></title>
    <link href="http://www.stackops.info/2015/09/13/Linux%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/"/>
    <id>http://www.stackops.info/2015/09/13/Linux内核升级/</id>
    <published>2015-09-13T02:01:52.000Z</published>
    <updated>2015-09-13T04:16:00.824Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="Linux内核的简介：">Linux内核的简介：</h2><p>linux操作系统是一个用来和硬件打交道同时为用户程序提供一个有限服务集的低级支撑软件。内核提供了底层硬件的驱动，以及提供各种系统所需的核心功能，包括防火墙机制，是否支持LVM或Quota等文件系统等。</p>
<h2 id="为什么要进行linux内核的升级？">为什么要进行linux内核的升级？</h2><p>大部分情况下，我们可以不对内核进行太大改变，直接使用现有的内核，因为它已经可以提供给我们基本的功能，但现在的硬件升级速度太快了，如果核心太老，而机器又换了新的硬件，那么这个核心肯定是无法支持，当然我们也可以将新硬件的驱动做成模块化安装，现实情况也是这么做的。但我们不可能把内核所有支持的功能都编译进内核来支持所有硬件运行工作。我们可以通过编译内核，针对linux的用途加载不同的功能，让linux跑的更稳定，更流畅，这也是我们要编译核心的最主要原因。</p>
<h3 id="内核的两个模块：">内核的两个模块：</h3><pre><code>核心  ：<span class="regexp">/boot/</span>vmlinuz-version
内核模块: <span class="regexp">/lib/m</span>odules<span class="regexp">/version/</span>
</code></pre><h3 id="内核设计的两种风格：">内核设计的两种风格：</h3><pre><code>单内核：linux（采用微内核的设计思想，引用模块化设计）。

微内核：在微内核中，大部分内核都作为单独的进程在特权状态下运行，他们通过消息传递进行通讯。
</code></pre><h5 id="linux下装载模块的命令：">linux下装载模块的命令：</h5><pre><code><span class="title">insmod</span>
modprobe
</code></pre><h5 id="linux下查看当前系统的内核版本">linux下查看当前系统的内核版本</h5><pre><code><span class="attr_selector">[root@www boot]</span># <span class="tag">uname</span> <span class="tag">-r</span>
2<span class="class">.6</span><span class="class">.32-431</span><span class="class">.el6</span><span class="class">.x86_64</span>
主 次 修正  次修正号
</code></pre><p>次版本号为偶数表示稳定版，<br>修正：修正bug<br>次修正：添加新特性。</p>
<p>用户空间的访问，监控内核的方式：<br>/proc, /sys<br>伪文件系统。（是内核参数）<br>/proc/sys：此目录中的文件很多是可读写的。修改文件内容来修改内核运行特性。<br>例如：</p>
<pre><code>[root@localhost vm]<span class="preprocessor"># pwd</span>
/proc/sys/vm
[root@localhost vm]<span class="preprocessor"># ls -l</span>
total <span class="number">0</span>
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> block_dump
--w------- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> compact_memory
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> dirty_background_bytes
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> dirty_background_ratio
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> dirty_bytes
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> dirty_expire_centisecs
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> dirty_ratio
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> dirty_writeback_centisecs
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> drop_caches
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> extfrag_threshold
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> hugepages_treat_as_movable
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> hugetlb_shm_group
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> laptop_mode
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> legacy_va_layout
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> lowmem_reserve_ratio
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> max_map_count
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> memory_failure_early_kill
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> memory_failure_recovery
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> min_free_kbytes
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> min_slab_ratio
-rw-r--r-- <span class="number">1</span> root root <span class="number">0</span> Sep <span class="number">13</span> <span class="number">12</span>:<span class="number">08</span> min_unmapped_ratio
</code></pre><p>这些都是内核参数，作为管理员，可以进行内核参数的修改。<br>/sys/某些文件可写。<br>例如：通过修改内核参数/proc/sys/vm/drop_caches为，可以清空buffer。</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/drop_caches.png" alt="drop_cache"></p>
<p><strong>注意</strong>：<br>    设定内核参数值的方法不能用vim而用echo重定向：</p>
<pre><code>#echo   VALUE  &gt;  <span class="regexp">/proc /</span>sys<span class="regexp">/TO/</span>SOMEFILE
</code></pre><p>例如: 我们想修改hostname主机名</p>
<h4 id="方法一：直接用echo修改内核的参数。">方法一：直接用echo修改内核的参数。</h4><pre><code>[root@localhost kernel]<span class="comment"># pwd</span>
/<span class="keyword">proc</span>/sys/kernel
[root@localhost kernel]<span class="comment"># cat hostname </span>
localhost.localdomain
[root@localhost kernel]<span class="comment"># hostname </span>
localhost.localdomain
[root@localhost kernel]<span class="comment"># echo leo &gt; hostname</span>
[root@localhost kernel]<span class="comment"># hostname</span>
leo
</code></pre><h4 id="方法二：使用sysctl控制">方法二：使用sysctl控制</h4><pre><code><span class="comment">#sysctl   -w  kernel.hostname="localhost.localdomain"</span>

使用<span class="string">"."</span>指定路径。文件必须是在/<span class="keyword">proc</span>/sys目录下的子目录里。
[root@localhost kernel]<span class="comment"># hostname </span>
leo
[root@localhost kernel]<span class="comment"># sysctl -w kernel.hostname=localhost.localdomain</span>
kernel.hostname = localhost.localdomain
[root@localhost kernel]<span class="comment"># hostname</span>
localhost.localdomain
</code></pre><p><strong>但是这两种方法都是立即生效的，但是不能永久生效</strong>。</p>
<p>想永久生效的话：唯一的办法是修改<strong>/etc/sysctl.conf</strong>（但不能立即生效）内核参数根据/etc/sysctl.conf这个文件设置内核参数的值。<br>写法：</p>
<pre><code><span class="title">sysctl</span>   -w  kernel.hostname=<span class="string">"localhost.localdomain"</span>
</code></pre><p>例如：<br>两块网卡，是否允许在两块网卡之间传递包。</p>
<pre><code>[root<span class="constant">@localhost</span> ~]<span class="preprocessor"># cat /proc/sys/net/ipv4/ip_forward </span>
<span class="number">0</span> 
</code></pre><p>1代表传递，0代表不传递。</p>
<p>通过修改/etc/sysctl.conf 这个文件，将0改为1，即可永久生效，但是不会立即生效、</p>
<pre><code>[root@localhost ~]<span class="preprocessor"># head /etc/sysctl.conf </span>
<span class="preprocessor"># Kernel sysctl configuration file for Red Hat Linux</span>
<span class="preprocessor">#</span>
<span class="preprocessor"># For binary values, <span class="number">0</span> is disabled, <span class="number">1</span> is enabled.  See sysctl(<span class="number">8</span>) and</span>
<span class="preprocessor"># sysctl.conf(<span class="number">5</span>) for more details.</span>

<span class="preprocessor"># Controls IP packet forwarding</span>
net.ipv4.ip_forward = <span class="number">1</span>

<span class="preprocessor"># Controls source route verification</span>
net.ipv4.conf.<span class="keyword">default</span>.rp_filter = <span class="number">1</span>
</code></pre><p>或者，我们可以通过命令</p>
<pre><code><span class="id">#sysctl</span>  -<span class="tag">p</span>  
</code></pre><p>让内核重读这个文件，实现立即生效。</p>
<pre><code>[root@localhost ~]<span class="preprocessor"># sysctl -p</span>
net.ipv4.ip_forward = <span class="number">1</span>
net.ipv4.conf.<span class="keyword">default</span>.rp_filter = <span class="number">1</span>
net.ipv4.conf.<span class="keyword">default</span>.accept_source_route = <span class="number">0</span>
kernel.sysrq = <span class="number">0</span>
kernel.core_uses_pid = <span class="number">1</span>
net.ipv4.tcp_syncookies = <span class="number">1</span>
error: <span class="string">"net.bridge.bridge-nf-call-ip6tables"</span> is an unknown key
error: <span class="string">"net.bridge.bridge-nf-call-iptables"</span> is an unknown key
error: <span class="string">"net.bridge.bridge-nf-call-arptables"</span> is an unknown key
kernel.msgmnb = <span class="number">65536</span>
kernel.msgmax = <span class="number">65536</span>
kernel.shmmax = <span class="number">68719476736</span>
kernel.shmall = <span class="number">4294967296</span>


<span class="preprocessor">#sysctl  -a  ：显示所有的内核参数和其值。</span>
</code></pre><p>常用的三个参数：<strong>hostname</strong>，<strong>ip_forward</strong>，<strong>/proc/sys/vm/drop_caches</strong></p>
<p>内核模块管理：</p>
<p>lsmod：列出当前内核装载的模块。</p>
<pre><code>[root@localhost kernel]<span class="preprocessor"># lsmod </span>
Module                  Size  Used by
ipv6                  <span class="number">321747</span>  <span class="number">266</span> 
nls_utf8                <span class="number">1421</span>  <span class="number">1</span> 
dm_mirror              <span class="number">14048</span>  <span class="number">0</span> 
dm_region_hash         <span class="number">10730</span>  <span class="number">1</span> dm_mirror
dm_log                  <span class="number">9696</span>  <span class="number">2</span> dm_mirror,dm_region_hash
snd_ens1371            <span class="number">20593</span>  <span class="number">0</span> 
snd_rawmidi            <span class="number">22734</span>  <span class="number">1</span> snd_ens1371
snd_ac97_codec        <span class="number">124339</span>  <span class="number">1</span> snd_ens1371
ac97_bus                <span class="number">1442</span>  <span class="number">1</span> snd_ac97_codec
snd_seq                <span class="number">55532</span>  <span class="number">0</span> 
snd_seq_device          <span class="number">6522</span>  <span class="number">2</span> snd_rawmidi,snd_seq
snd_pcm                <span class="number">85629</span>  <span class="number">2</span> snd_ens1371,snd_ac97_codec
snd_timer              <span class="number">21904</span>  <span class="number">2</span> snd_seq,snd_pcm
snd                    <span class="number">68480</span>  <span class="number">7</span> snd_ens1371,snd_rawmidi,snd_ac97_codec,snd_seq,snd_seq_device,
snd_pcm,snd_timersoundcore               <span class="number">7668</span>  <span class="number">1</span> snd
snd_page_alloc          <span class="number">8428</span>  <span class="number">1</span> snd_pcm
e1000                 <span class="number">145057</span>  <span class="number">0</span> 
floppy                 <span class="number">63253</span>  <span class="number">0</span> 
vmw_balloon             <span class="number">6781</span>  <span class="number">0</span> 
microcode             <span class="number">111822</span>  <span class="number">0</span> 
pcspkr                  <span class="number">1958</span>  <span class="number">0</span> 
i2c_piix4              <span class="number">10998</span>  <span class="number">0</span> 
i2c_core               <span class="number">30023</span>  <span class="number">1</span> i2c_piix4
shpchp                 <span class="number">27791</span>  <span class="number">0</span> 
sg                     <span class="number">29692</span>  <span class="number">0</span> 
dm_mod                 <span class="number">74380</span>  <span class="number">2</span> dm_mirror,dm_log
ext4                  <span class="number">364623</span>  <span class="number">1</span> 
mbcache                 <span class="number">7254</span>  <span class="number">1</span> ext4
jbd2                   <span class="number">80484</span>  <span class="number">1</span> ext4
sd_mod                 <span class="number">35179</span>  <span class="number">3</span> 
crc_t10dif              <span class="number">1531</span>  <span class="number">1</span> sd_mod
sr_mod                 <span class="number">15213</span>  <span class="number">1</span> 
cdrom                  <span class="number">39482</span>  <span class="number">1</span> sr_mod
mptspi                 <span class="number">16113</span>  <span class="number">2</span> 
mptscsih               <span class="number">34977</span>  <span class="number">1</span> mptspi
mptbase                <span class="number">93281</span>  <span class="number">2</span> mptspi,mptscsih
scsi_transport_spi     <span class="number">24957</span>  <span class="number">1</span> mptspi
pata_acpi               <span class="number">3691</span>  <span class="number">0</span> 
ata_generic             <span class="number">3891</span>  <span class="number">0</span> 
ata_piix               <span class="number">23068</span>  <span class="number">1</span> 


modprobe  MOD_NAME：模块装载。
modprobe  -r  MOD_NAME ：卸载模块。
modinfo  MOD_NAME：查看模块的具体信息
另两个命令：但这里必须指定模块路径。
insmod  /path/to/module_file：装载模块（必须指定模块的路径）。
rmmod    MOD_NAME:卸载模块（移除）
depmod  /path/to/modiles_dir   生成模块依赖。。。（需要指定路径）
内核模块必须和驱动程序完全相同。
</code></pre><p>内核中的功能除了核心功能之外，在编译时，大多数功能都要有三种选择：</p>
<ul>
<li>1，<strong>不使用此功能</strong></li>
<li>2，<strong>编译成内核模块   modprobe装载</strong>，</li>
<li>3，<strong>编译进内核</strong>。</li>
</ul>
<p>##如何手动编译内核：</p>
<p>目前内核版本是：<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/uname.png" alt="uname"></p>
<p>挂载系统镜像光驱到/mnt目录，创建一个rpm仓库，编辑yum的配置文件：</p>
<ul>
<li>1）， cd /etc/yum.repos.d目录下，创建一个.repo的文件。内容如下：</li>
</ul>
<pre><code><span class="title">[root@localhost ~]</span><span class="comment"># cat /etc/yum.repos.d/Base.repo </span>
<span class="title">[base]</span>
<span class="setting">name=<span class="value">Server</span></span>
<span class="setting">baseurl=<span class="value">file:///mnt</span></span>
<span class="setting">enabled=<span class="value"><span class="number">1</span></span></span>
<span class="setting">gpgcheck=<span class="value"><span class="number">0</span></span></span>
</code></pre><ul>
<li>2)，编辑/etc/fstab，使得系统光驱开机自动挂载，搭建一个本地的yum仓库。</li>
</ul>
<pre><code>[root@localhost ~]<span class="comment"># cat /etc/fstab </span>

<span class="comment">#</span>
<span class="comment">#/etc/fstab</span>
<span class="comment">#Created by anaconda on Sat Sep 12 10:59:40 2015</span>
<span class="comment">#</span>
<span class="comment">#Accessible filesystems, by reference, are maintained under '/dev/disk'</span>
<span class="comment">#See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span>
<span class="comment">#</span>
<span class="type">UUID</span>=<span class="number">8</span>ebb2c3a-<span class="number">320</span>d-<span class="number">40</span>fb-<span class="number">8</span>d57-<span class="number">062</span>be9556d46 /                       ext4    defaults        <span class="number">1</span> <span class="number">1</span>
<span class="type">UUID</span>=<span class="number">6499</span>e7e6-a462-<span class="number">4</span>b30-b195-<span class="number">1</span>bca6ee04eaa swap                    swap    defaults        <span class="number">0</span> <span class="number">0</span>
tmpfs                   /dev/shm                tmpfs   defaults        <span class="number">0</span> <span class="number">0</span>
devpts                  /dev/pts                devpts  gid=<span class="number">5</span>,mode=<span class="number">620</span>  <span class="number">0</span> <span class="number">0</span>
sysfs                   /sys                    sysfs   defaults        <span class="number">0</span> <span class="number">0</span>
<span class="keyword">proc</span>                    /<span class="keyword">proc</span>                   <span class="keyword">proc</span>    defaults        <span class="number">0</span> <span class="number">0</span>
**/dev/cdrom               /mnt            iso9660 defaults        <span class="number">0</span> <span class="number">0</span>**
</code></pre><p>只需要添加最后一行即可。</p>
<ul>
<li>3)，安装需要用到的开发库：</li>
</ul>
<pre><code><span class="title">yum</span> groupinstall <span class="string">"Development Tools"</span> <span class="string">"Development Libraries"</span> -y
</code></pre><p>可以通过命令  #yum  grouplist 查看当前系统哪些库装了，哪些没安装，依据自己实际情况而定。</p>
<ul>
<li>4),将下载的内核解压到/usr/src这个目录下。<br>下载内核链接：www.kernel.org</li>
</ul>
<pre><code><span class="id">#tar</span> -xvf linux-<span class="number">2.6</span>.<span class="number">38.2</span><span class="class">.tar</span><span class="class">.xz</span> -C /usr/src/
</code></pre><p>创建一个软连接，当前我们使用的内核或正在编译的内核一般链接为linux</p>
<pre><code><span class="id">#ln</span> -sv linux-<span class="number">2.6</span>.<span class="number">38.2</span> linux
`linux<span class="string">' -&gt; `linux-2.6.38.2'</span>
</code></pre><p>查看linux目录下的文件：<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/ls.png" alt="ls"></p>
<p>可以看到有很多的子目录：<br>例如：</p>
<pre><code>arch：架构有关。
crypto：加密解密
drivers：驱动
<span class="built_in">fs</span>：文件系统，里面包括ntfs，默认没有安装这个模块，我们可以安装。这样双系统就可以共享文件。
virt：虚拟化功能
ipc：进程间通信
firmware：固件
Documentation：文档。
</code></pre><h2 id="如何手动编译内核呢：">如何手动编译内核呢：</h2><ul>
<li><p>1），make gconfig :  Gnome桌面环境使用（需要安装图形开发库）GNOME  Software  Development<br>make  kconfig：KDE桌面环境使用；需要安装图形开发库）<br>需要安装桌面，用的不是特别多，用的更多是下面哪种方法。</p>
</li>
<li><p>2），使用menuconfig这个命令之前要先将开发库安装好。</p>
</li>
</ul>
<pre><code><span class="id">#yum</span> -y install ncurses-devel
<span class="id">#make</span>  menuconfig 
</code></pre><p>打开文本菜单（需要在内核所在的目录输入该命令）。勾选内核属性。我们可以将当前系统的内核配置文件拷备过去，然后在当前系统内核配置文件的基础上做修改。</p>
<ul>
<li>3），make编译。<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/看.png" alt="k1"></li>
</ul>
<p>可以看到选择的界面，注意—-&gt;表示底下有很多子条目。敲回车即可打开子条目。<br>    [*]：表示做进内核中<br>    [M]：表示做成模块<br>    [  ]：表示不启用此功能。</p>
<p>在General  setup的子目录下，有个叫做local   version的选项，就是本地版本号<br>例如：<br>    [root@www boot]# uname -r<br>    2.6.32-431.el6.x86_64<br>这里的431就是本地版本号，我们可以自己定义。<br>在local version那个选项那里回车即可输入自己编译的版本号。<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/k1.png" alt="k1"><br>连敲两下esc可以退到上一层目录。</p>
<p>在出现的界面中我们可以选择文件系统的选项，可以将NTFS这个功能做成模块。这样如果电脑装了双系统，linux系统也可以访问windows的NTFS文件系统下的文件。</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/k2.png" alt="k2"></p>
<p>然后选好自己想要安装的内核功能，然后保存配置文件。</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/k3.png" alt="k3"></p>
<p>点击yes退出，就会在内核编译的目录下生成一个隐藏配置文件.config，</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/config.png" alt="config"></p>
<p>我们当前运行的系统也存在一个内核的配置文件，在/boot目录下，</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/config2.png" alt="config2"></p>
<p>我们自己定义的config可能在编译的过程中发生错误而导致编译不成功。为了减小这种错误，我们可以将目前系统的内核配置文件复制过去，然后再在当前配置文件的基础上进行修改，这样出现问题的几率就会小很多。<br>例如：<br>    我们新下载的一个内核，进行编译的时候，先将目前内核的配置文件复制到内核文件所在目录下命名为.config，然后执行make  menuconfig这个命令，根据自己的需求进行修改。这样出现问题的可能性会降小。</p>
<p>对内核进行一些调整：</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/k4.png" alt="k4"></p>
<p>选中项定义了处理器的类型和特点，我们可以进行选择，去掉一些不常用的功能。<br>centos和redhat默认的cpu类型都是选择的Generic-x86-64，我们可以依据自己的实际情况选择，例如我自己的笔记本是core i5的就可以将处理器选择为core2的。</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/k5.png" alt="k5"><br>同时我们可以去掉一些内核的驱动，一些很老，没必要使用的驱动。<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/k6.png" alt="k6"><br>例如网卡驱动：</p>
<p>几个比较古老已经淘汰了的东西：<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/k7.png" alt="k7"></p>
<p>上面的PCMCIA,ATM,FDDI都已经淘汰，用不到，可以去掉了。</p>
<ul>
<li>4），make安装：</li>
</ul>
<p>make  进行编译内核。可能会经历很长时间。</p>
<p>可以使用</p>
<pre><code><span class="id">#make</span>  -j4   
</code></pre><p>同时使用4核来进行编译加快速度，具体根据自己的机器核心数来指定-j后的number。</p>
<p>make编译安装之后会生成vmlinux,System.map ,modules.builtin等文件。</p>
<pre><code><span class="id">#make</span>  modules_install  -j4  先进行模块安装，再安装。
</code></pre><p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/make1.png" alt="make1"></p>
<pre><code><span class="id">#make</span>   install  -j4  安装。
</code></pre><p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/make2.png" alt="make2"></p>
<p>至此，编译系统编译安装完成。</p>
<p>如果之前的编译不好用，可以进行编译清理。<br>二次编译时清理：（清理前，如果有需要，请备份配置文件.config）<br>    make  clean：清理此前编译好的二进制模块。<br>    make    mrproper：清理此前编译的内容，使用之前，最好先备份配置文件.config）。</p>
<p>内核编译完成之后，会在 /usr/src/linux/arch/x86/boot目录下生成一个bzImage，这是linux内核的映像文件。<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/bz.png" alt="bz"></p>
<p>内核编译完成后我们可以通过修改/boot/grub/grub.conf这个grub的配置文件进行内核选择，从新的内核启动。<br>    [root@localhost ~]# cat /boot/grub/grub.conf </p>
<pre><code><span class="preprocessor">#grub.conf generated by anaconda</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#Note that you do not have to rerun grub after making changes to this file</span>
<span class="preprocessor">#NOTICE:  You do not have a /boot partition.  This means that</span>
<span class="preprocessor">#          all kernel and initrd paths are relative to /, eg.</span>
<span class="preprocessor">#          root (hd0,<span class="number">1</span>)</span>
<span class="preprocessor">#          kernel /boot/vmlinuz-version ro root=/dev/sda2</span>
<span class="preprocessor">#          initrd /boot/initrd-[generic-]version.img</span>
<span class="preprocessor">#boot=/dev/sda</span>
<span class="keyword">default</span>=<span class="number">0</span>
timeout=<span class="number">5</span>
splashimage=(hd0,<span class="number">1</span>)/boot/grub/splash.xpm.<span class="function">gz
hiddenmenu
title <span class="title">CentOS</span> <span class="params">(<span class="number">2.6</span><span class="number">.38</span><span class="number">.2</span>-<span class="number">1.</span>el6)</span>
    <span class="title">root</span> <span class="params">(hd0,<span class="number">1</span>)</span>
    kernel /boot/vmlinuz-2.6.38.2-1.el6 ro root</span>=UUID=<span class="number">8</span>ebb2c3a-<span class="number">320</span>d-<span class="number">40f</span>b-<span class="number">8</span>d57-<span class="number">062</span>be9556d46 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-<span class="number">8</span> rd_NO_MD SYSFONT
=latarcyrheb-sun16 crashkernel=<span class="keyword">auto</span>  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet    initrd /boot/initramfs-<span class="number">2.6</span><span class="number">.38</span><span class="number">.2</span>-<span class="number">1.</span>el6.img
title CentOS <span class="number">6</span> (<span class="number">2.6</span><span class="number">.32</span>-<span class="number">504.</span>el6.x86_64)
    root (hd0,<span class="number">1</span>)
    kernel /boot/vmlinuz-<span class="number">2.6</span><span class="number">.32</span>-<span class="number">504.</span>el6.x86_64 ro root=UUID=<span class="number">8</span>ebb2c3a-<span class="number">320</span>d-<span class="number">40f</span>b-<span class="number">8</span>d57-<span class="number">062</span>be9556d46 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-<span class="number">8</span> rd_NO_MD 
SYSFONT=latarcyrheb-sun16 crashkernel=<span class="keyword">auto</span>  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet    initrd /boot/initramfs-<span class="number">2.6</span><span class="number">.32</span>-<span class="number">504.</span>el6.x86_64.img
</code></pre><p>如图，只需要将default=1改为default=0即可，即从第一个内核vmlinuz-2.6.38.2-1.el6启动。</p>
<p>解释下各参数的含义：<br>    default=0:设定默认启动的title的编号，从0开始<br>    timeout=5  ：等待用户选择超时时长，单位为s<br>    splashimage=(hd0,0)/grub/splash.xpm.gz：grub的背景图片<br>    hiddenmenu：隐藏菜单。<br>    title Red Hat Enterprise Linux (2.6.32-358.el6.i686)   内核标题或操作系统标题。字符串，可以自由修改。<br>    root (hd0,1)#内核文件所在的设备。（对grub而言，所有类型硬盘一律为hd；格式为（hd#,N)  hd#表示第#个磁盘。最后的0则表示对应的磁盘分区。<br>        kernel /vmlinuz-2.6.32-358.el6.i686 ro #grub的访问路径所以是在根下。<br>        root=UUID=1e0664cd-aaf4-4064-96b5-3090c26f37a0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT<br>    =latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</p>
<pre><code><span class="preprocessor">#内核文件路径。</span>
initrd /initramfs-<span class="number">2.6</span><span class="number">.32</span>-<span class="number">358.</span>el6.i686.img <span class="preprocessor">#ramdisk的文件路径。</span>
</code></pre><p>重启系统后，查看内核是否完成升级</p>
<pre><code>[root@localhost ~]<span class="preprocessor"># uname -r</span>
<span class="number">2.6</span><span class="number">.38</span><span class="number">.2</span>-<span class="number">1.</span>el6
</code></pre><p>可以看到内核已经从2.6.32升级到2.6.38了。</p>
<h2 id="可能遇到的问题：">可能遇到的问题：</h2><p>使用vmware进行编译内核的时候，执行到make install时候会提示如下错误，意思是vmware_balloon这个模块找不到，原因是这个模块名字已经发生了改变为vmw_balloon.ko。做个软连接即可。<br>错误提示：<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/err.png" alt="err"></p>
<p>找不到 vmware_balloon 模块，原因有两个：<br>首先，确认你的 .config 文件里面有  CONFIG_VMWARE_BALLOON=m 这一行，或者你可以用 make menuconfig 进去内核编译菜单，选中 Device Drivers -&gt; MISC devices -&gt; VMware Balloon Driver 为 M 或者 *<br>其次，而这个模块在后面的版本中，已经更名为 vmw_balloon，所以 可以用下面的命令来解决：<br>cd /lib/modules/3.x.xx/kernel/drivers/misc #将版本号改成你自己的<br>ln -s vmw_balloon.ko vmware_balloon.ko #建立软连接</p>
<h4 id="解决方法：">解决方法：</h4><p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/ln.png" alt="ln"></p>
<h4 id="成功编译：">成功编译：</h4><p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/make2.png" alt="make2"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="kernel" scheme="http://www.stackops.info/tags/kernel/"/>
    
      <category term="linux" scheme="http://www.stackops.info/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建-实例创建]]></title>
    <link href="http://www.stackops.info/2015/08/20/OpenStack%E6%90%AD%E5%BB%BA-%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA/"/>
    <id>http://www.stackops.info/2015/08/20/OpenStack搭建-实例创建/</id>
    <published>2015-08-20T07:20:21.000Z</published>
    <updated>2015-08-20T07:38:12.686Z</updated>
    <content type="html"><![CDATA[<p>显示全文：</p>
<a id="more"></a>
<h3 id="使用legacy_networking_创建实例：">使用legacy networking  创建实例：</h3><p> 略去中间的存储节点配置，先测试以下实例的创建是否能够成功·。</p>
<h4 id="1，创建一对密钥对：">1，创建一对密钥对：</h4><ul>
<li>1），生效demo用户凭据：</li>
</ul>
<pre><code><span class="built_in">source</span> demo-openrc.sh
<span class="comment">#demo_openrc.sh内容如下：</span>
root@controller:~<span class="comment"># cat demo-openrc.sh </span>
<span class="built_in">export</span> OS_TENANT_NAME=demo
<span class="built_in">export</span> OS_USERNAME=demo
<span class="built_in">export</span> OS_PASSWORD=*yourpass*
<span class="built_in">export</span> OS_AUTH_URL=http://controller:<span class="number">5000</span>/v2.<span class="number">0</span>
</code></pre><p>主要是一些keystone的认证信息。</p>
<ul>
<li>2），生成密钥对：</li>
</ul>
<pre><code><span class="variable">$ </span>ssh-keygen   （生成随机数）。
</code></pre><ul>
<li><p>3），添加公钥到openstack环境：</p>
<p>$ nova keypair-add –pub-key ~/.ssh/id_rsa.pub demo-key</p>
</li>
<li><p>4），查看公钥：</p>
</li>
</ul>
<pre><code><span class="header">root@controller:~# nova keypair-list
+----------+-------------------------------------------------+</span>
<span class="header">| Name     | Fingerprint                                     |
+----------+-------------------------------------------------+</span>
<span class="header">| demo-key | e8:b2:f8:2b:c1:e8:9d:a8:a8:21:69:94:08:a6:f1:c0 |
+----------+-------------------------------------------------+</span>
</code></pre><h5 id="创建实例：">创建实例：</h5><ul>
<li>1），先查看flavor列表，各种实例类型。</li>
</ul>
<pre><code>root<span class="comment">@controller:~# nova flavor-list</span>
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
|<span class="string"> ID </span>|<span class="string"> Name      </span>|<span class="string"> Memory_MB </span>|<span class="string"> Disk </span>|<span class="string"> Ephemeral </span>|<span class="string"> Swap </span>|<span class="string"> VCPUs </span>|<span class="string"> RXTX_Factor </span>|<span class="string"> Is_Public </span>|<span class="string">    
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
</span>|<span class="string"> 1  </span>|<span class="string"> m1.tiny   </span>|<span class="string"> 512       </span>|<span class="string"> 1    </span>|<span class="string"> 0         </span>|<span class="string">      </span>|<span class="string"> 1     </span>|<span class="string"> 1.0         </span>|<span class="string"> True      </span>|
|<span class="string"> 2  </span>|<span class="string"> m1.small  </span>|<span class="string"> 2048      </span>|<span class="string"> 20   </span>|<span class="string"> 0         </span>|<span class="string">      </span>|<span class="string"> 1     </span>|<span class="string"> 1.0         </span>|<span class="string"> True      </span>|
|<span class="string"> 3  </span>|<span class="string"> m1.medium </span>|<span class="string"> 4096      </span>|<span class="string"> 40   </span>|<span class="string"> 0         </span>|<span class="string">      </span>|<span class="string"> 2     </span>|<span class="string"> 1.0         </span>|<span class="string"> True      </span>|
|<span class="string"> 4  </span>|<span class="string"> m1.large  </span>|<span class="string"> 8192      </span>|<span class="string"> 80   </span>|<span class="string"> 0         </span>|<span class="string">      </span>|<span class="string"> 4     </span>|<span class="string"> 1.0         </span>|<span class="string"> True      </span>|
|<span class="string"> 5  </span>|<span class="string"> m1.xlarge </span>|<span class="string"> 16384     </span>|<span class="string"> 160  </span>|<span class="string"> 0         </span>|<span class="string">      </span>|<span class="string"> 8     </span>|<span class="string"> 1.0         </span>|<span class="string"> True      </span>|
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
</code></pre><p>可以看到各种可以创建的虚拟机的类型。我们创建的第一个实例采用m1.tiny这个vm类型。</p>
<ul>
<li>2），查看当前可用的vm镜像：</li>
</ul>
<pre><code>root<span class="comment">@controller:~# nova image-list</span>
+--------------------------------------+---------------------+--------+--------+
|<span class="string"> ID                                   </span>|<span class="string"> Name                </span>|<span class="string"> Status </span>|<span class="string"> Server </span>|
+--------------------------------------+---------------------+--------+--------+
|<span class="string"> e60963d5-fcb3-4ebb-b41e-51aa100adfcb </span>|<span class="string"> centos6.6x64        </span>|<span class="string"> ACTIVE </span>|<span class="string">        </span>|
|<span class="string"> 0eb0e87c-450f-4a68-b4d0-d8f6abf26449 </span>|<span class="string"> cirros-0.3.3-x86_64 </span>|<span class="string"> ACTIVE </span>|<span class="string">        </span>|
|<span class="string"> c4b8af42-dea4-42e8-bb2a-daaa3d18117f </span>|<span class="string"> ubuntu server       </span>|<span class="string"> ACTIVE </span>|<span class="string">        </span>|
+--------------------------------------+---------------------+--------+--------+
</code></pre><p>我使用cirros-0.3.3-x86_64这个镜像创建第一个实例。</p>
<ul>
<li>3），查看当前可用的网络：（在控制节点上）</li>
</ul>
<pre><code>root@controller:~# source admin-openrc.sh
<span class="header">root@controller:~# nova net-list
+--------------------------------------+----------+------------------+</span>
<span class="header">| ID                                   | Label    | CIDR             |
+--------------------------------------+----------+------------------+</span>
<span class="header">| e7972845-3a38-49bb-ae53-56c4f71dc837 | demo-net | 192.168.0.176/28 |
+--------------------------------------+----------+------------------+</span>
</code></pre><ul>
<li>4），列出有效的安全组：</li>
</ul>
<pre><code><span class="header">root@controller:~# nova secgroup-list
+----+---------+-------------+</span>
<span class="header">| Id | Name    | Description |
+----+---------+-------------+</span>
<span class="header">| 2  | default | default     |
+----+---------+-------------+</span>
</code></pre><ul>
<li>5），创建一个实例：</li>
</ul>
<pre><code><span class="comment">$</span> <span class="comment">nova</span> <span class="comment">boot</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">flavor</span> <span class="comment">m1</span><span class="string">.</span><span class="comment">tiny</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">image</span> <span class="comment">cirros</span><span class="literal">-</span><span class="comment">0</span><span class="string">.</span><span class="comment">3</span><span class="string">.</span><span class="comment">3</span><span class="literal">-</span><span class="comment">x86_64</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">nic</span> <span class="comment">net</span><span class="literal">-</span><span class="comment">id=</span>
<span class="comment">DEMO_NET_ID</span> <span class="comment">\</span>
<span class="literal">-</span><span class="literal">-</span><span class="comment">security</span><span class="literal">-</span><span class="comment">group</span> <span class="comment">default</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">key</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">demo</span><span class="literal">-</span><span class="comment">key</span> <span class="comment">demo</span><span class="literal">-</span><span class="comment">instance1</span>
</code></pre><p>需要为其指定网卡，实例大小模型，镜像，安全组，公钥信息等。</p>
<pre><code>root<span class="comment">@controller:~# nova boot --flavor m1.tiny --image cirros-0.3.3-x86_64 --nic net-id=e7972845-3a38-49bb-ae53-56c4f71dc837 \</span>
&gt; --security-group default --key-name demo-key demo-instance2
+--------------------------------------+------------------------------------------------------------+
|<span class="string"> Property                             </span>|<span class="string"> Value                                                      </span>|
+--------------------------------------+------------------------------------------------------------+
|<span class="string"> OS-DCF:diskConfig                    </span>|<span class="string"> MANUAL                                                     </span>|
|<span class="string"> OS-EXT-AZ:availability_zone          </span>|<span class="string"> nova                                                       </span>|
|<span class="string"> OS-EXT-SRV-ATTR:host                 </span>|<span class="string"> -                                                          </span>|
|<span class="string"> OS-EXT-SRV-ATTR:hypervisor_hostname  </span>|<span class="string"> -                                                          </span>|
|<span class="string"> OS-EXT-SRV-ATTR:instance_name        </span>|<span class="string"> instance-00000012                                          </span>|
|<span class="string"> OS-EXT-STS:power_state               </span>|<span class="string"> 0                                                          </span>|
|<span class="string"> OS-EXT-STS:task_state                </span>|<span class="string"> scheduling                                                 </span>|
|<span class="string"> OS-EXT-STS:vm_state                  </span>|<span class="string"> building                                                   </span>|
|<span class="string"> OS-SRV-USG:launched_at               </span>|<span class="string"> -                                                          </span>|
|<span class="string"> OS-SRV-USG:terminated_at             </span>|<span class="string"> -                                                          </span>|
|<span class="string"> accessIPv4                           </span>|<span class="string">                                                            </span>|
|<span class="string"> accessIPv6                           </span>|<span class="string">                                                            </span>|
|<span class="string"> adminPass                            </span>|<span class="string"> wfTZg7pi6G5w                                               </span>|
|<span class="string"> config_drive                         </span>|<span class="string">                                                            </span>|
|<span class="string"> created                              </span>|<span class="string"> 2015-05-20T07:15:16Z                                       </span>|
|<span class="string"> flavor                               </span>|<span class="string"> m1.tiny (1)                                                </span>|
|<span class="string"> hostId                               </span>|<span class="string">                                                            </span>|
|<span class="string"> id                                   </span>|<span class="string"> 2b6ce589-b316-42e1-a49c-68ff08d854c3                       </span>|
|<span class="string"> image                                </span>|<span class="string"> cirros-0.3.3-x86_64 (0eb0e87c-450f-4a68-b4d0-d8f6abf26449) </span>|
|<span class="string"> key_name                             </span>|<span class="string"> demo-key                                                   </span>|
|<span class="string"> metadata                             </span>|<span class="string"> {}                                                         </span>|
|<span class="string"> name                                 </span>|<span class="string"> demo-instance2                                             </span>|
|<span class="string"> os-extended-volumes:volumes_attached </span>|<span class="string"> []                                                         </span>|
|<span class="string"> progress                             </span>|<span class="string"> 0                                                          </span>|
|<span class="string"> security_groups                      </span>|<span class="string"> default                                                    </span>|
|<span class="string"> status                               </span>|<span class="string"> BUILD                                                      </span>|
|<span class="string"> tenant_id                            </span>|<span class="string"> 8e03709a24154d9d99f7a3e16a1da53f                           </span>|
|<span class="string"> updated                              </span>|<span class="string"> 2015-05-20T07:15:16Z                                       </span>|
|<span class="string"> user_id                              </span>|<span class="string"> 3471b47ae4d942cdb582e4550e028a9b                           </span>|
+--------------------------------------+------------------------------------------------------------+
</code></pre><ul>
<li>6），查看实例的状态；</li>
</ul>
<pre><code><span class="header">root@controller:~# nova list
+--------------------------------------+----------------+--------+------------+-------------+------------------------+</span>
<span class="header">| ID                                   | Name           | Status | Task State | Power State | Networks               |
+--------------------------------------+----------------+--------+------------+-------------+------------------------+</span>
| 82899c7a-b883-454a-887c-c714f73bbe19 | demo-instance1 | ACTIVE | -          | Running     | demo-net=192.168.0.180 |
<span class="header">| 2b6ce589-b316-42e1-a49c-68ff08d854c3 | demo-instance2 | ACTIVE | -          | Running     | demo-net=192.168.0.179 |
+--------------------------------------+----------------+--------+------------+-------------+------------------------+</span>
</code></pre><p>为了能够访问vm，我们可以通过网页vnc打开vm的控制台。或者ssh登录上去，这里先使用vnc：<br>请求vnc地址。</p>
<pre><code><span class="header">root@controller:~#  nova get-vnc-console demo-instance2 novnc
+-------+------------------------------------------------------------------------------------+</span>
<span class="header">| Type  | Url                                                                                |
+-------+------------------------------------------------------------------------------------+</span>
<span class="header">| novnc | http://192.168.0.146:6080/vnc_auto.html?token=58fa034e-05b0-408f-b548-a316fc05c4da |
+-------+------------------------------------------------------------------------------------+</span>
</code></pre><p>然后将地址复制粘贴到浏览器中（这里使用的是chrome）。可以看到vm的控制台：</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/vm1.png" alt="vm1"></p>
<p>验证demo-net的网络：从vm上测试能否上外网：</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/vm2.png" alt="vm2"></p>
<p>接着添加安全组：</p>
<p>1，给default安全组添加规则：<br>    a, 允许ping包；</p>
<pre><code>$ nova secgroup-add-<span class="keyword">rule</span> default icmp -1 -1 0.0.0.0/0  
</code></pre><p>这句的含义是在安全组default中添加一条规则，允许来自任何ip任何端口的icmp包</p>
<pre><code>b，允许ssh访问：

$ nova secgroup-add-<span class="keyword">rule</span> default tcp 22 22 0.0.0.0/0
</code></pre><p>因为ssh是基于tcp22号端口进行访问的，所以这里进行放行任何ip的tcp22号端口流量。</p>
<p>2，从控制节点或者任何一个在外网的主机上测试一下挽留过的连通性。</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/vm3.png" alt="vm3"></p>
<p>因为192.168.0.179这个ip有冲突，还是使用180这个ip做测试。</p>
<p>3，最后在控制节点上使用ssh访问vm实例。</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/vm4.png" alt="vm4"></p>
<p>到这里，最基本的vm创建，vm访问外网，网络连通性都已经完成。</p>
<p>下载qcow2镜像的地址: <a href="http://cloud.centos.org/centos/6/images/" target="_blank" rel="external">http://cloud.centos.org/centos/6/images/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建-dashboar组件]]></title>
    <link href="http://www.stackops.info/2015/08/20/OpenStack%E6%90%AD%E5%BB%BA-dashboar%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.stackops.info/2015/08/20/OpenStack搭建-dashboar组件/</id>
    <published>2015-08-20T06:35:47.000Z</published>
    <updated>2015-08-20T07:19:36.142Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="添加dashboard服务">添加dashboard服务</h2><p><strong>openstack  dashboard</strong>也被称为Horizon，是一个web界面，使用管理员和用户能够管理openstack不同的资源和服务<br>dashboard 通过OpenStack APIs操作openstack云计算控制器。Horizon允许定制自己的商标<br>Horizon提供了核心类和可重复使用的木板和工具</p>
<p>这个部署使用的是 Apache web server.</p>
<p>   系统要求： </p>
<p>在安装openstack dashboard之前，你必须满足下面需求</p>
<pre><code>•openstack计算安装，启用用户身份认证服务和项目管理

•注意身份服务的urls和Compute endpoints.

•用户认证服务具有sudo的权限。因为Apache 不能使用root用户服务，用户必须运行dashboard 作为sudo 权限身份认证服务。

•Python <span class="number">2.6</span> 或则 <span class="number">2.7</span>，Python 版本必须支持Django。Python 版本应该运行在任何系统，包括Mac OS，不同的平台安装可能不一样。 

然后在一个节点上安装和配置dashboard 可以连接身份认证服务
</code></pre><p>用下面信息的用户，因此他们能够通过本地机器的浏览器访问dashboard</p>
<pre><code>•通过公共<span class="literal">ip</span>地址，可以访问dashboard

•输入用户和密码

 你的浏览器，必须支持HTML5 ，启用cookies 和JavaScript
</code></pre><p>注意：</p>
<pre><code>使用带有dashboard的VNC 客户端，浏览器必须支持HTML5 画布和 HTML5 WebSockets
</code></pre><ul>
<li>1），安装包：</li>
</ul>
<pre><code># apt-<span class="built_in">get</span> install openstack-dashboard apache2 libapache2-<span class="keyword">mod</span>-wsgi
memcached <span class="keyword">python</span>-memcache
</code></pre><p>注意：Ubuntu 安装  openstack-dashboard-ubuntu-theme包作为依赖。一些用户报告以前发布的版本有问题。如果你遇到问题，移除这个包，恢复到原先的openstack包。</p>
<p>移除可以执行下面命令（这里执行了下面命令）</p>
<pre><code><span class="preprocessor">#  dpkg --purge openstack-dashboard-ubuntu-theme</span>
</code></pre><ul>
<li>2），配置dashboard，修改配置文件/etc/openstack-dashboard/local_settings.py</li>
</ul>
<pre><code>OPENSTACK_HOST = <span class="string">"controller"</span>
ALLOWED_HOSTS = [<span class="string">'*'</span>]

CACHES = {
<span class="string">'default'</span>: {
<span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.
MemcachedCache'</span>,
<span class="string">'LOCATION'</span>: <span class="string">'127.0.0.1:11211'</span>,
}
}
</code></pre><p>注意：注释掉其它session存储配置这里不需要修改</p>
<p>.可选，配置其它 time zone</p>
<p> TIME_ZONE = “TIME_ZONE”<br>/usr/share/zoneinfo/Asia/ 下保存着系统各个时区信息/etc/localtime 保存当前系统时区及时间信息</p>
<ul>
<li>3），检验安装：重启服务。</li>
</ul>
<pre><code><span class="preprocessor"># service apache2 restart</span>
<span class="preprocessor"># service memcached restart</span>
</code></pre><ul>
<li>4)，打开浏览器，输入：192.168.0.146/horizon。可以选择使用demo或者admin这两个用户之一登录。</li>
</ul>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/dashboard.jpg" alt="dashboard"></p>
<p>进入后的web界面大概是这样；</p>
<p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/dashboard2.png" alt="dashboard2"></p>
<p>在这个界面里可以比较便捷的创建实例，迁移，调整实例大小，设置访问规则等，利用图形化界面管理特别方便。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="dashboard" scheme="http://www.stackops.info/tags/dashboard/"/>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStackd搭建-网络组件]]></title>
    <link href="http://www.stackops.info/2015/08/20/OpenStackd%E6%90%AD%E5%BB%BA-%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.stackops.info/2015/08/20/OpenStackd搭建-网络组件/</id>
    <published>2015-08-20T05:16:10.000Z</published>
    <updated>2015-08-20T06:24:37.575Z</updated>
    <content type="html"><![CDATA[<p>显示全文：</p>
<a id="more"></a>
<h3 id="添加网络组件：">添加网络组件：</h3><p>openstack网络架构（nova-network/neutron）</p>
<p>openstack网络体系中，网络技术没有创新，但用到的技术点非常庞杂，包括bridge、vlan、gre、vxlan、ovs、openflow、sdn、iptables等，当然这里不会做具体技术介绍，概述技术，主要将其与openstack的结合点做详细分析。</p>
<p>nova-network网络架构:<br>    <img src="http://7xl5dz.com1.z0.glb.clouddn.com/flatdhcp.png" alt="nova-network"></p>
<p>在nova-network中，其网络模型包括flat、 flatdhcp、vlan，用到的技术主要有bridge、vlan，<br>我这里采用的是flatdhcp。 这种模式，能够自动给vm分发ip地址，能够实现vm访问外网。结构简单，但是稳定性比较好。</p>
<p>优点：结构简单，稳定</p>
<p>缺点：所有租户都在一个水平面上，租户之间没有隔离，由于所有租户都在一个子网内，当大规模部署后，其广播风暴将会是不小的负面因素。因为只是先做个测试，还没有考虑这么多。</p>
<p>相比于neutron网络，虽说没有neutron那么多的功能插件，仅有bridge，但是其稳定性已得到大多数用户的验证，对于小规模的私有云(1千台虚机的规模)，nova-network是可以考虑的，目前线上部署的环境也是nova-network。</p>
<p>简单的介绍一下neutron：</p>
<p>neutron网络架构:<br>    <img src="http://7xl5dz.com1.z0.glb.clouddn.com/neutron.jpg" alt="neutron"></p>
<p>neutron网络体系相比于nova-network要复杂的多，用到的技术点也非常庞杂，在介绍网络架构之前，有必要概述下gre、vxlan、ovs、openflow、sdn技术点。<br> 上面阐述过，vlan技术存在vlan id个数限制4094，公有云租户肯定不止4094，二层技术，只能部署在一个局域网内，无法实现跨机房部署。为了突破这俩个限制，增加了gre和vxlan隧道技术.</p>
<p>OpenStack 网络<br>openstack网络允许创建和附加第三方网络插件，插件可以实现适应不同的网络设备和软件,使用的openstack部署和架构更加的灵活。</p>
<p>neutron-server: 接受api请求，并选择适当的网络插件做出响应</p>
<p>openstack网络插件和代理创建和删除端口，创建网络和子网和提供ip地址。这些插件与代理不同，取决于使用的特定的云供应商和技术。openstack网络插件和代理，是由思科的虚拟、物理switches、 NEC OpenFlow products, Open vSwitch, Linux bridging, Ryu Network Operating System, and the VMware NSX product.<br>通用代理 L3 (layer 3), DHCP (dynamic host IP addressing), 和 一个 plug-in agent.</p>
<p>消息队列大多数用于在 neutron-server于多种客户端之间传递信息，也作为一个数据库存储网络插件的状态。openstack网络与openstack计算提供的实例连接相互作用。</p>
<h3 id="网络概念">网络概念</h3><p>openstack neutron在openstack环境中，管理所有虚拟网络及访问物理网络结构接入层方面（PNI）</p>
<p>openstack neutron能使网络租户创建网络拓扑，包括服务例如 firewalls, load balancers, and virtual private networks (VPNs).</p>
<p>openstack网络包括networks，子网，和路由对象的抽象，每个抽象路由功能模仿物理理由：网络包括子网，路由器连接不同子网及网络之间</p>
<p>   每个路由器连接到网络，和网卡连接到子网。子网可以访问连接到相同路由的机器的其它子网<br>任何的设置，至少有一个外网。不像其他网络，这个外网不止是虚拟的定义网络，相反它可以通过外部网络访问openstack。对于openstack的外部网卡，外部的物理网络都是可以访问的，在这个网络中，dhcp是被禁用的。<br>    除了外部网络，任何网络都有一个或多个内部网络，这些软件定义的网络直接连接到虚拟机。在任何给定网络的虚拟机，或则在子网中连接相同的路由，可以直接访问VMs 连接的网络。</p>
<p>   对于外部网络访问实例，实例访问外部网络，路由在网络之间是必须的。每个路由器连接到网络和网卡连接到子网，像物理路由器，子网访问其它子网的机器需要连接相同的路由，实例能访问外部网络通过路由。</p>
<p>   此外，可以分配外网ip地址，对于内部网络的接口。凡是连接子网的，统称为接口。你可以给连接虚拟机端口分配ip地址。这样外部网络实体可以访问虚拟机。<br>openstack网络也支持安全组，管理员能够自定防火墙规则在安全组中，一个实例可以属于一个或多个安全组实例，网络在安全组中设置的规则，阻止或则允许端口、端口的范围或则虚拟机流量类型。</p>
<p>   每个插件,网络的使用都有自己的概念。而操作虚拟网络结构和openstack环境不是至关重要的，理解这些概念帮助你创建网络。所有的网络设备使用一个核心插件和安全组插件。此外 Firewall-as-a-Service (FWaaS) 和 Load-Balancer-as-a-Service (LBaaS) plug-ins 插件都是可以利用的</p>
<h3 id="下面进行网络组件的安装：">下面进行网络组件的安装：</h3><h4 id="1，在控制节点上配置legacy_network；控制节点上需要修改的东西很少，只需要将网络模式改为nova-network就好了。">1，在控制节点上配置legacy  network；控制节点上需要修改的东西很少，只需要将网络模式改为nova-network就好了。</h4><ul>
<li>1），修改配置文件：/etc/nova/nova.conf</li>
</ul>
<pre><code>[DEFAULT]
...
network_api_class = nova<span class="class">.network</span><span class="class">.api</span><span class="class">.API</span>
security_group_api = nova
选择nova-network这种网络模式。
</code></pre><ul>
<li>2），重启compute服务。</li>
</ul>
<pre><code><span class="preprocessor"># service nova-api restart</span>
<span class="preprocessor"># service nova-scheduler restart</span>
<span class="preprocessor"># service nova-conductor restart</span>
</code></pre><h4 id="2，配置compute节点：（可以配置多个计算节点，我这里仅配置了一个）。">2，配置compute节点：（可以配置多个计算节点，我这里仅配置了一个）。</h4><ul>
<li>1），安装legacy networking的组件：</li>
</ul>
<h1 id="apt-get_install_nova-network_nova-api-metadata">apt-get install nova-network nova-api-metadata</h1><ul>
<li>2），修改/etc/nova/nova.conf的配置文件。</li>
</ul>
<pre><code>[DEFAULT]
...
<span class="constant">network_api_class</span> = nova.network.api.API
<span class="constant">security_group_api</span> = nova
<span class="constant">firewall_driver</span> = nova.virt.libvirt.firewall.IptablesFirewallDriver
<span class="constant">network_manager</span> = nova.network.manager.FlatDHCPManager
<span class="constant">network_size</span> = 254
<span class="constant">allow_same_net_traffic</span> = False
<span class="constant">multi_host</span> = True
<span class="constant">send_arp_for_ha</span> = True
<span class="constant">share_dhcp_address</span> = True
<span class="constant">force_dhcp_release</span> = True
<span class="constant">flat_network_bridge</span> = br100
<span class="constant">flat_interface</span> = INTERFACE_NAME
<span class="constant">public_interface</span> = INTERFACE_NAME
</code></pre><p><strong>注释</strong>：flat_interface 是eth1，管理接口<br>public_interface是eth0，访问外网的接口。(网络这方面根据实际情况而定，例如服务器两个接口都是连接的内网，其中eth0连接的内网可以通过nat实现上网，而eth1不能，并且你划定的flatdhcp地址池就是eth0所在的网段，那么你的flat_interface和public_interface都应该是eth0，我们做决定的时候一定要切合实际情况来决定)。</p>
<ul>
<li><p>3），重启服务：</p>
<h1 id="service_nova-network_restart">service nova-network restart</h1><h1 id="service_nova-api-metadata_restart">service nova-api-metadata restart</h1></li>
</ul>
<h3 id="创建实例化网络：（在控制节点上）。">创建实例化网络：（在控制节点上）。</h3><p>1），设置环境变量：</p>
<pre><code>$ <span class="keyword">source</span> admin-openrc.<span class="keyword">sh</span>
</code></pre><p>2），创建网络：</p>
<pre><code>$ nova network-create demo-net --bridge br100 --multi-host T \
--fixed-range-v4 NETWORK<span class="emphasis">_CIDR

</span>例如： nova network-create demo-net --bridge br100 --multi-host T   --fixed-range-v4 192.168.0.176/28

可以使用命令查看

<span class="header">root@controller:~# nova net-list
+--------------------------------------+---------+-----------------+</span>
<span class="header">| ID                                   | Label   | CIDR            |
+--------------------------------------+---------+-----------------+</span>
<span class="header">| 6aecec82-5d87-4b77-8fb8-0d7dd687e091 | lan-net | 192.168.3.32/27 |
+--------------------------------------+---------+-----------------+</span>
</code></pre><p>问题：<br>    注意这里需要根据你选择的网络模式修改配置文件。选择network_api_class<br>。并且重启所有nova服务。特别要注意nova的服务是否正常开启。如果报错：ERROR (ClientException): The server has either erred or is incapable of performing the requested operation. (HTTP 500) (Request-ID: req-f2c74d47-6f4a-467b-9f5c-c1f2261e6696)<br>则是因为nova.conf文件内容有错，或者是服务有的没有开启，可以使用nova service-list 来查看，并且可以通过同步nova到数据库中来查看nova.conf 文件是否有错。</p>
<p>到这里为止，目前的openstack环境已经包含了创建一个基本实例所要用到的所有组件，可以创建一个instance（即vm）来测试，也可以继续添加其他模块。我又接着添加了dashboard即horizon提供可视化界面来管理创建实例。<br>同时我还修改了/etc/sysctl.conf这个配置文件，实现地址转发。（不知道有没有这个必要，待验证）。</p>
<pre><code><span class="number">1</span>. Edit the /etc/sysctl.<span class="keyword">conf</span> <span class="keyword">file</span> <span class="keyword">to</span> contain the following parameter<span class="variable">s:</span>
net.ipv4.ip_forward=<span class="number">1</span>
net.ipv4.<span class="keyword">conf</span>.<span class="keyword">all</span>.rp_filter=<span class="number">0</span>
net.ipv4.<span class="keyword">conf</span>.default.rp_filter=<span class="number">0</span>

<span class="number">2</span>. Implement the <span class="keyword">change</span><span class="variable">s:</span>
# sysctl -<span class="keyword">p</span>
</code></pre><h2 id="验证网络服务：">验证网络服务：</h2><p>当我们创建完最基本的网络服务之后，一定要检查以下几项内容：</p>
<p>首先，确保产生一个桥接接口br100,所有使用openstack创建的vm都会通过这个br100作为桥接接口，作为通往internet的出口。<br>可以看到br100的ip地址是我们所分配ip地址段的网关，当我们使用openstack创建一个实例的时候，实例的默认网关就会指向br100.</p>
<pre><code>root@compute1:~<span class="preprocessor"># ifconfig </span>
br100     Link encap:Ethernet  HWaddr c8:<span class="number">1f</span>:<span class="number">66</span>:bc:<span class="number">73</span>:c2  
          inet addr:<span class="number">192.168</span><span class="number">.3</span><span class="number">.33</span>  Bcast:<span class="number">192.168</span><span class="number">.3</span><span class="number">.63</span>  Mask:<span class="number">255.255</span><span class="number">.255</span><span class="number">.224</span>
          inet6 addr: fe80::<span class="number">984</span>c:dfff:fe9d:<span class="number">6575</span>/<span class="number">64</span> Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span>
          RX packets:<span class="number">2233483</span> errors:<span class="number">0</span> dropped:<span class="number">25</span> overruns:<span class="number">0</span> frame:<span class="number">0</span>
          TX packets:<span class="number">1272014</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span>
          collisions:<span class="number">0</span> txqueuelen:<span class="number">0</span> 
          RX bytes:<span class="number">518104430</span> (<span class="number">518.1</span> MB)  TX bytes:<span class="number">481296191</span> (<span class="number">481.2</span> MB)
</code></pre><p>其次，必须保证br100是桥接在你物理网卡的flat_interface上，例如我线上flat_interface和public_interface都是em1.<br>可以通过brctl这条命令查看：</p>
<pre><code>root<span class="property">@compute1</span>:~<span class="comment"># brctl show</span>
bridge name     bridge id               STP enabled     interfaces
br100           <span class="number">8000.</span>c81f66bc73c2       <span class="literal">no</span>              em1
                                                        vnet0
                                                        vnet1
                                                        vnet2
                                                        vnet3
                                                        vnet4
                                                        vnet5
                                                        vnet6
                                                        vnet7
                                                        vnet8
virbr0          <span class="number">8000.000000000000</span>       <span class="literal">yes</span>
</code></pre><p>然后，查看当前路由的默认网关，必须是你能够访问外网的网关，并且出口肯定是br100，不然一定会出错。</p>
<pre><code>root@compute1:~<span class="preprocessor"># route</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
<span class="keyword">default</span>         <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>         UG    <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> br100
<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>        *               <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>   U     <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> em2
<span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>     *               <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>   U     <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> br100
<span class="number">192.168</span><span class="number">.3</span><span class="number">.32</span>    *               <span class="number">255.255</span><span class="number">.255</span><span class="number">.224</span> U     <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> br100
<span class="number">192.168</span><span class="number">.122</span><span class="number">.0</span>   *               <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>   U     <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> virbr0
</code></pre><p>最后，查看一下dnsmasq服务是否正常启动。</p>
<pre><code>root@compute1:~<span class="preprocessor"># ps aux | grep dnsmasq</span>
libvirt+  <span class="number">1842</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">28212</span>  <span class="number">2312</span> ?        S    Jul18   <span class="number">0</span>:<span class="number">00</span> /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/<span class="keyword">default</span>.conf
nobody    <span class="number">1855</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">28208</span>  <span class="number">2488</span> ?        S    Jul18   <span class="number">0</span>:<span class="number">01</span> /usr/sbin/dnsmasq --strict-order --bind-interfaces --conf-file= --pid-file=/var/lib
/nova/networks/nova-br100.pid --dhcp-optsfile=/var/lib/nova/networks/nova-br100.opts --listen-address=<span class="number">192.168</span><span class="number">.3</span><span class="number">.33</span> --except-interface=lo --dhcp-range=<span class="built_in">set</span>:lan-net,<span class="number">192.168</span><span class="number">.3</span><span class="number">.34</span>,<span class="keyword">static</span>,<span class="number">255.255</span><span class="number">.255</span><span class="number">.224</span>,<span class="number">86400</span>s --dhcp-lease-max=<span class="number">32</span> --dhcp-hostsfile=/var/lib/nova/networks/nova-br100.conf --dhcp-script=/usr/local/bin/nova-dhcpbridge --no-hosts --leasefile-ro --domain=novalocal --addn-hosts=/var/lib/nova/networks/nova-br100.hostsroot      <span class="number">1856</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">28208</span>  <span class="number">1888</span> ?        S    Jul18   <span class="number">0</span>:<span class="number">00</span> /usr/sbin/dnsmasq --strict-order --bind-interfaces --conf-file= --pid-file=/var/lib
/nova/networks/nova-br100.pid --dhcp-optsfile=/var/lib/nova/networks/nova-br100.opts --listen-address=<span class="number">192.168</span><span class="number">.3</span><span class="number">.33</span> --except-interface=lo --dhcp-range=<span class="built_in">set</span>:lan-net,<span class="number">192.168</span><span class="number">.3</span><span class="number">.34</span>,<span class="keyword">static</span>,<span class="number">255.255</span><span class="number">.255</span><span class="number">.224</span>,<span class="number">86400</span>s --dhcp-lease-max=<span class="number">32</span> --dhcp-hostsfile=/var/lib/nova/networks/nova-br100.conf --dhcp-script=/usr/local/bin/nova-dhcpbridge --no-hosts --leasefile-ro --domain=novalocal --addn-hosts=/var/lib/nova/networks/nova-br100.hostsroot      <span class="number">1976</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">10468</span>  <span class="number">2264</span> pts/<span class="number">18</span>   S+   <span class="number">14</span>:<span class="number">07</span>   <span class="number">0</span>:<span class="number">00</span> grep --color=<span class="keyword">auto</span> dnsmasq
</code></pre><p>可以看到监听的网段，详细的dhcp信息。之前有把openstack进行过整体迁移，例如网络从192.168.0.0/24迁移到192.168.3.0/24网段。迁移完后发现dnsmasq监听的地址还是在192.168.0.0这个网段，dhcp获得地址也都不正确。解决方法是：重启dnsmasq服务。</p>
<pre><code>等一切服务安装完成之后，compute节点上每创建一个实例，就会生成一个vnet接口，

vnet0     Link encap:Ethernet  HWaddr fe:<span class="number">16</span>:<span class="number">3</span>e:ae:c7:<span class="number">70</span>  
          inet6 addr: fe80::fc16:<span class="number">3</span>eff:feae:c770/<span class="number">64</span> Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span>
          RX packets:<span class="number">280562</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span>
          TX packets:<span class="number">1535062</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span>
          collisions:<span class="number">0</span> txqueuelen:<span class="number">500</span> 
          RX bytes:<span class="number">57656002</span> (<span class="number">57.6</span> MB)  TX bytes:<span class="number">660459406</span> (<span class="number">660.4</span> MB)

vnet1     Link encap:Ethernet  HWaddr fe:<span class="number">16</span>:<span class="number">3</span>e:<span class="number">03</span>:<span class="number">11</span>:<span class="number">29</span>  
          inet6 addr: fe80::fc16:<span class="number">3</span>eff:fe03:<span class="number">1129</span>/<span class="number">64</span> Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span>
          RX packets:<span class="number">107176</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span>
          TX packets:<span class="number">700957</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span>
          collisions:<span class="number">0</span> txqueuelen:<span class="number">500</span> 
          RX bytes:<span class="number">22395464</span> (<span class="number">22.3</span> MB)  TX bytes:<span class="number">256144937</span> (<span class="number">256.1</span> MB)
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：</p>]]>
    
    </summary>
    
      <category term="network" scheme="http://www.stackops.info/tags/network/"/>
    
      <category term="nova-network" scheme="http://www.stackops.info/tags/nova-network/"/>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建-nova组件]]></title>
    <link href="http://www.stackops.info/2015/08/20/OpenStack%E6%90%AD%E5%BB%BA-nova%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.stackops.info/2015/08/20/OpenStack搭建-nova组件/</id>
    <published>2015-08-20T01:14:43.000Z</published>
    <updated>2015-08-20T04:40:16.907Z</updated>
    <content type="html"><![CDATA[<p>显示全文：</p>
<a id="more"></a>
<h3 id="添加compute服务">添加compute服务</h3><p>使用OpenStack Compute管理云计算操作系统， OpenStack Compute 是iaas系统的主要部分。这一部分是用python来实现的。<br> OpenStackCompute  包括以下几个方面及其组件：</p>
<p>API</p>
<p><strong>nova-api</strong> 服务 ：接受并响应最终用户compute API调用。服务支持 OpenStack Compute API, the Amazon EC2 API, 和Admin API执行的权限. 它执行一些策略和一些初始化操作，比如运行一个实例</p>
<p><strong>nova-api-metadata</strong> 服务 ：接受实例元数据请求，  </p>
<p><strong>nova-api-metadata 服务</strong> ：一般使用在安装nova-network多节点。更多细节查看Metadata service<br>在Debian 系统，它被包含在 nova-api包中，可以通过debconf选择。</p>
<p><strong>Compute corenova-compute</strong> 服务：一个工作虚拟机实例进程，通过hypervisor APIs创建和终止。例如<br>•XenAPI for XenServer/XCP<br>•libvirt for KVM or QEMU<br>•VMwareAPI for VMware<br>处理是相当复杂的，最基本的，守护进程从队列和一系列系统命令操作，比如创建KVM 实例，更新数据库状态</p>
<p><strong>nova-scheduler</strong> 服务 ：决定实例运行在哪个节点上</p>
<p><strong>nova-conductor</strong> 模块 ：nova-conductor在 nova-compute 服务 和 the database之间，它使 nova-compute 服务无需直接访问云数据库（cloud database）。尽管如此，不要将nova-conductor部署在运行nova-compute 服务的节点上</p>
<p>Networking for VMs：<strong>nova-network</strong> 工作进程。类似 nova-compute 服务，从队列中接受网络任务，执行任务，如设置网桥、改变防火墙规则<br>控制台界面，还包含下面进程<br><strong>nova-consoleauth daemon</strong><br><strong>nova-consoleauth daemon</strong><br><strong>nova-novncproxy daemon</strong><br><strong>nova-spicehtml5proxy daemon</strong><br><strong>nova-xvpnvncproxy daemon</strong><br><strong>nova-cert daemon</strong><br><strong>Image management (EC2 scenario)</strong><br><strong>nova-objectstore daemon</strong><br><strong>euca2ools client</strong></p>
<p>命令行客户端和其它接口<br><strong>nova client</strong> : 作为管理员或则最终用户提交命令<br>其它组件:<br>队列<br>进程之间通信，通常由RabbitMQ，但可以用一个AMQP消息队列实现的，如Apache Qpid orZero MQ<br>SQL 数据库<br>存储云基础设施的状态，包括<br>•可用的类型。<br>•中使用的实例。<br>•可用网络<br>•项目</p>
<h3 id="具体安装步骤：">具体安装步骤：</h3><h4 id="1，安装配置控制节点：">1，安装配置控制节点：</h4><p>1），创建数据库：</p>
<pre><code>$ mysql -u root -p
<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> nova;</span>
<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'localhost'</span> \
<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span>
<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> nova.* <span class="keyword">TO</span> <span class="string">'nova'</span>@<span class="string">'%'</span> \
<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'NOVA_DBPASS'</span>;</span>
exit
</code></pre><p>2)，设置环境变量：</p>
<pre><code>$ <span class="keyword">source</span> admin-openrc.<span class="keyword">sh</span>
</code></pre><p>3），创建服务：</p>
<p>a，在keystone中创建nova  user</p>
<pre><code><span class="header">$ keystone user-create --name nova --pass NOVA_PASS
+----------+----------------------------------+</span>
<span class="header">| Property | Value |
+----------+----------------------------------+</span>
| email | |
| enabled | True |
| id | 387dd4f7e46d4f72965ee99c76ae748c |
| name | nova |
| username | nova |
<span class="code">+----------+</span>----------------------------------+  
</code></pre><p>b，添加admin角色给nova用户：</p>
<pre><code><span class="comment">$</span> <span class="comment">keystone</span> <span class="comment">user</span><span class="literal">-</span><span class="comment">role</span><span class="literal">-</span><span class="comment">add</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user</span> <span class="comment">nova</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">tenant</span> <span class="comment">service</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">role</span> <span class="comment">admin</span>
</code></pre><p>c，创建nova 的服务实例：</p>
<pre><code>$ keystone service-create --name nova --type compute \
<span class="header">--description "OpenStack Compute"
+-------------+----------------------------------+</span>
<span class="header">| Property | Value |
+-------------+----------------------------------+</span>
| description | OpenStack Compute |
| enabled | True |
| id | 6c7854f52ce84db795557ebc0373f6b9 |
| name | nova |
<span class="header">| type | compute |
+-------------+----------------------------------</span>
</code></pre><p>4），创建计算服务的endpoints：</p>
<pre><code>$ keystone endpoint-create \
--service-id $(keystone service-list |<span class="string"> awk '/ compute / {print $2}') \
--publicurl http://controller:8774/v2/%\(tenant_id\)s \
--internalurl http://controller:8774/v2/%\(tenant_id\)s \
--adminurl http://controller:8774/v2/%\(tenant_id\)s \
--region regionOne
+-------------+-----------------------------------------+
</span>|<span class="string"> Property </span>|<span class="string"> Value </span>|
+-------------+-----------------------------------------+
|<span class="string"> adminurl </span>|<span class="string"> http://controller:8774/v2/%(tenant_id)s </span>|
|<span class="string"> id </span>|<span class="string"> c397438bd82c41198ec1a9d85cb7cc74 </span>|
|<span class="string"> internalurl </span>|<span class="string"> http://controller:8774/v2/%(tenant_id)s </span>|
|<span class="string"> publicurl </span>|<span class="string"> http://controller:8774/v2/%(tenant_id)s </span>|
|<span class="string"> region </span>|<span class="string"> regionOne </span>|
|<span class="string"> service_id </span>|<span class="string"> 6c7854f52ce84db795557ebc0373f6b9 </span>|
+-------------+-----------------------------------------+
</code></pre><h3 id="安装配置计算控制组件">安装配置计算控制组件</h3><p>1），安装包：</p>
<pre><code><span class="preprocessor"># apt-get install nova-api nova-cert nova-conductor nova-consoleauth \</span>
nova-novncproxy nova-scheduler python-novaclient  
</code></pre><p>2），修改nova的配置文件：/etc/nova/nova.conf(按照官方文档上面，nova的配置文件应该包含了各个功能组件的调用配置，但是我装完之后仅有default一小部分，在经历千辛万苦之后，自己通过网上的配置文件一点点拼凑出来两个配置文件：</p>
<p>官方讲解配置文件各参数含义的链接：<a href="http://docs.openstack.org/juno/config-reference/content/section_compute-config-samples.html" target="_blank" rel="external">http://docs.openstack.org/juno/config-reference/content/section_compute-config-samples.html</a></p>
<h4 id="官方文档要求修改的地方：">官方文档要求修改的地方：</h4><p>注释：10.0.0.0/24是内网，192.168.3.0/24是能够连接外网的。</p>
<pre><code>[database]
...
connection = <span class="string">mysql:</span><span class="comment">//nova:NOVA_DBPASS@controller/nova</span>
</code></pre><p>配置数据库连接</p>
<pre><code>[DEFAULT]
...
<span class="constant">rpc_backend</span> = rabbit
<span class="constant">rabbit_host</span> = controller
<span class="constant">rabbit_password</span> = RABBIT_PASS
</code></pre><p>配置RabbitMQ 消息代理访问</p>
<pre><code>[DEFAULT]
...
<span class="constant">auth_strategy</span> = keystone
[keystone_authtoken]
...
<span class="constant">auth_uri</span> = http://controller:5000/v2.0
<span class="constant">identity_uri</span> = http://controller:35357
<span class="constant">admin_tenant_name</span> = service
<span class="constant">admin_user</span> = nova
<span class="constant">admin_password</span> = NOVA_PASS
</code></pre><p>配置认证访问</p>
<p>注释掉 auth_host, auth_port, 和 auth_protocol，因为identity_uri 已经含有这些配置</p>
<pre><code>[DEFAULT]
...
my_ip = <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>
</code></pre><p>配置控制节点，管理网络的ip地址my_ip 选项</p>
<pre><code>[DEFAULT]
...
vncserver_listen = <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>
vncserver_proxyclient_address = <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>
</code></pre><p>配置VNC 代理，使用控制节点管理网络ip地址</p>
<pre><code>[<span class="atom">glance</span>]
...
<span class="atom">host</span> = <span class="atom">controller</span>
</code></pre><p>配置image服务</p>
<pre><code>[<span class="keyword">DEFAULT</span>]
...
verbose = <span class="literal">True</span>
</code></pre><p>为排除故障，在[DEFAULT]部分，启用详细日志<br>注释：后面会配上调试好的nova.conf的配置文件。</p>
<p>3）.同步数据库</p>
<pre><code># <span class="keyword">su</span> -s /bin/<span class="keyword">sh</span> -c <span class="string">"nova-manage db sync"</span> nova
</code></pre><p>如果配置文件中有什么语法上的错误，可以在这里看到。</p>
<p>4），安装完成之后，重启所有nova的服务：</p>
<pre><code><span class="preprocessor"># service nova-api restart</span>
<span class="preprocessor"># service nova-cert restart</span>
<span class="preprocessor"># service nova-consoleauth restart</span>
<span class="preprocessor"># service nova-scheduler restart</span>
<span class="preprocessor"># service nova-conductor restart</span>
<span class="preprocessor"># service nova-novncproxy restart</span>
注释：因为经常要用到重启服务，而且，nova的服务，太多了，我就简单写了个脚本，实现重启：
root@controller:~# cat /usr/bin/restart.sh
<span class="keyword">for</span><span class="constant"> SVC </span>in api cert consoleauth scheduler conductor  novncproxy ; <span class="keyword">do</span>
     service nova-$SVC restart ;
done
</code></pre><p>然后把这个脚本拷贝到/usr/bin目录下</p>
<p>以后再用到重启服务的时候，就可以直接执行restart.sh就可以了。</p>
<p>5），删除SQLite的数据库。</p>
<pre><code># rm -f <span class="regexp">/var/</span>lib<span class="regexp">/nova/</span>nova.sqlite
</code></pre><h3 id="2，安装配置计算节点：">2，安装配置计算节点：</h3><p>1），安装包：</p>
<pre><code># apt-get <span class="operator"><span class="keyword">install</span> nova-<span class="keyword">compute</span> sysfsutils</span>
</code></pre><p>2），修改配置文件/etc/nova/nova.conf  （刚装好的nova，配置文件也只有default小部分内容）。</p>
<pre><code>[DEFAULT]
...
<span class="constant">rpc_backend</span> = rabbit
<span class="constant">rabbit_host</span> = controller
<span class="constant">rabbit_password</span> = RABBIT_PASS
[DEFAULT]
...
<span class="constant">auth_strategy</span> = keystone
[keystone_authtoken]
...
<span class="constant">auth_uri</span> = http://controller:5000/v2.0
<span class="constant">identity_uri</span> = http://controller:35357
<span class="constant">admin_tenant_name</span> = service
<span class="constant">admin_user</span> = nova
<span class="constant">admin_password</span> = NOVA_PASS
</code></pre><p>注视掉auth_port等。。</p>
<pre><code>[<span class="name">DEFAULT</span>]
...
<span class="atom">my_ip</span> = <span class="name">MANAGEMENT_INTERFACE_IP_ADDRESS</span>
</code></pre><p>管理接口的地址，按照官方文档上的配置是10.0.0.31</p>
<pre><code>[DEFAULT]
...
vnc_enabled = True
vncserver_listen = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>
vncserver_proxyclient_address = MANAGEMENT_INTERFACE_IP_ADDRESS
novncproxy_base_url = http:<span class="comment">//controller:6080/vnc_auto.html</span>
</code></pre><p>注意这里配置了dashboard中vnc控制台打开的地址，如果是从自己的windows浏览器上面打开，不能够解析controller，我们需要修改为controller的物理地址，这里我使用的是和我主机在同一个网段的controller节点的地址。192.168.3.10，具体看我的配置文件。</p>
<pre><code>[<span class="atom">glance</span>]
...
<span class="atom">host</span> = <span class="atom">controller</span>  
[<span class="name">DEFAULT</span>]
...
<span class="atom">verbose</span> = <span class="name">True</span>
</code></pre><p>3），修改过配置文件之后，我们要检验一下我们的计算节点的硬件是否支持虚拟机硬件加速。</p>
<pre><code>$ egrep -c '(vmx|svm)' /<span class="keyword">proc</span>/cpuinfo 
</code></pre><p>如果输出结果不是0，就不需要额外的配置，表示cpu支持硬件加速。硬件虚拟化。<br>如果输出是0，则使用QEMU代替KVM，（如果是使用虚拟机来进行openstack的安装的话，应该是需要修改为QEMU的。）<br>输出是0的情况下：</p>
<p>1）， 编辑文件/etc/nova/nova-compute.conf，在 [libvirt]部分，修改如下</p>
<pre><code>[<span class="atom">libvirt</span>]
...
<span class="atom">virt_type</span> = <span class="atom">qemu</span>
</code></pre><p>2），重启计算服务；</p>
<pre><code><span class="preprocessor"># service nova-compute restart</span>
</code></pre><p>3），删掉SQLite的数据库：</p>
<pre><code># rm -f <span class="regexp">/var/</span>lib<span class="regexp">/nova/</span>nova.sqlite
</code></pre><p>controller节点的/etc/nova/nova.conf配置文件的模版：</p>
<pre><code><span class="title">[DEFAULT]</span>
<span class="comment"># LOGS/STATE</span>
<span class="setting">verbose=<span class="value"><span class="keyword">True</span></span></span>
<span class="setting">logdir=<span class="value">/var/log/nova</span></span>
<span class="setting">state_path=<span class="value">/var/lib/nova</span></span>
<span class="setting">lock_path=<span class="value">/var/lock/nova</span></span>
<span class="setting">rootwrap_config=<span class="value">/etc/nova/rootwrap.conf</span></span>
<span class="setting">network_api_class = <span class="value">nova.network.api.API</span></span>
<span class="setting">security_group_api = <span class="value">nova</span></span>

<span class="comment"># SCHEDULER</span>
<span class="comment">#compute_scheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler</span>

<span class="comment"># VOLUMES</span>
<span class="comment"># configured in cinder.conf</span>

<span class="comment"># COMPUTE</span>
<span class="setting">compute_driver=<span class="value">libvirt.LibvirtDriver</span></span>
<span class="setting">instance_name_template=<span class="value">instance-%<span class="number">08</span>x</span></span>
<span class="setting">api_paste_config=<span class="value">/etc/nova/api-paste.ini</span></span>

<span class="comment">#COMPUTE/APIS: if you have separate configs for separate services</span>
<span class="comment"># this flag is required for both nova-api and nova-compute</span>
<span class="setting">allow_resize_to_same_host=<span class="value"><span class="keyword">True</span></span></span>

<span class="comment"># APIS</span>
<span class="setting">osapi_compute_extension=<span class="value">nova.api.openstack.compute.contrib.standard_extensions</span></span>
<span class="setting">ec2_dmz_host=<span class="value"><span class="number">192.168</span>.<span class="number">0.146</span></span></span>
<span class="setting">s3_host=<span class="value"><span class="number">192.168</span>.<span class="number">0.146</span></span></span>

<span class="comment"># RABBITMQ</span>
<span class="setting">rabbit_host=<span class="value">controller</span></span>
<span class="setting">rpc_backend = <span class="value">rabbit</span></span>
<span class="setting">rabbit_host = <span class="value">controller</span></span>
<span class="setting">rabbit_password = <span class="value">*yourpass*</span></span>
<span class="comment"># GLANCE</span>
<span class="setting">image_service=<span class="value">nova.image.glance.GlanceImageService</span></span>

<span class="comment"># NETWORK</span>
<span class="setting">network_manager=<span class="value">nova.network.manager.FlatDHCPManager</span></span>
<span class="setting">force_dhcp_release=<span class="value"><span class="keyword">True</span></span></span>
<span class="setting">dhcpbridge_flagfile=<span class="value">/etc/nova/nova.conf</span></span>
<span class="setting">firewall_driver=<span class="value">nova.virt.libvirt.firewall.IptablesFirewallDriver</span></span>
<span class="comment"># Change my_ip to match each host</span>
<span class="setting">my_ip=<span class="value"><span class="number">10.0</span>.<span class="number">0.11</span></span></span>
<span class="setting">public_interface=<span class="value">eth0</span></span>
<span class="comment">#vlan_interface=eth0</span>
<span class="setting">flat_network_bridge=<span class="value">br100</span></span>
<span class="setting">flat_interface=<span class="value">eth1</span></span>

<span class="comment"># NOVNC CONSOLE</span>
<span class="setting">novncproxy_base_url=<span class="value">http://<span class="number">192.168</span>.<span class="number">0.146</span>:<span class="number">6080</span>/vnc_auto.html</span></span>
<span class="comment"># Change vncserver_proxyclient_address and vncserver_listen to match each compute host</span>
<span class="setting">vncserver_proxyclient_address=<span class="value"><span class="number">10.0</span>.<span class="number">0.11</span></span></span>
<span class="setting">vncserver_listen=<span class="value"><span class="number">10.0</span>.<span class="number">0.11</span></span></span>

<span class="comment"># AUTHENTICATION</span>
<span class="setting">auth_strategy=<span class="value">keystone</span></span>
<span class="title">[keystone_authtoken]</span>
<span class="comment">#auth_host = 127.0.0.1</span>
<span class="comment">#auth_port = 35357</span>
<span class="comment">#auth_protocol = http</span>
<span class="comment">#admin_tenant_name = service</span>
<span class="comment">#admin_user = nova</span>
<span class="comment">#admin_password = nova</span>
<span class="setting">auth_uri = <span class="value">http://controller:<span class="number">5000</span>/v2.<span class="number">0</span></span></span>
<span class="setting">identity_uri = <span class="value">http://controller:<span class="number">35357</span></span></span>
<span class="setting">admin_tenant_name = <span class="value">service</span></span>
<span class="setting">admin_user = <span class="value">nova</span></span>
<span class="setting">admin_password = <span class="value">*yourpass*</span></span>
<span class="comment">#signing_dirname = /tmp/keystone-signing-nova</span>
<span class="comment"># GLANCE</span>
<span class="title">[glance]</span>
<span class="comment">#api_servers=192.168.206.130:9292    </span>
<span class="setting">api_servers=<span class="value"><span class="number">10.0</span>.<span class="number">0.11</span>:<span class="number">9292</span></span></span>
<span class="setting">host = <span class="value"><span class="number">10.0</span>.<span class="number">0.11</span></span></span>
<span class="comment"># DATABASE</span>
<span class="title">[database]</span>
<span class="setting">connection=<span class="value">mysql://nova:*novapass*@controller/nova</span></span>

<span class="comment"># LIBVIRT</span>
<span class="title">[libvirt]</span>
<span class="setting">virt_type=<span class="value">kvm</span></span>
</code></pre><p>有些内容重复或者没有使用到。没关系，这样配置能够正常使用。</p>
<p>compute节点的/etc/nova/nova.conf配置文件样板：</p>
<pre><code><span class="title">[DEFAULT]</span>
<span class="comment"># LOGS/STATE</span>
<span class="setting">verbose=<span class="value"><span class="keyword">True</span></span></span>
<span class="setting">logdir=<span class="value">/var/log/nova</span></span>
<span class="setting">state_path=<span class="value">/var/lib/nova</span></span>
<span class="setting">lock_path=<span class="value">/var/lock/nova</span></span>
<span class="setting">rootwrap_config=<span class="value">/etc/nova/rootwrap.conf</span></span>

<span class="setting">rpc_backend = <span class="value">rabbit</span></span>
<span class="setting">rabbit_host = <span class="value">controller</span></span>
<span class="setting">rabbit_password = <span class="value">*yourpass*</span></span>
<span class="comment"># SCHEDULER</span>
<span class="setting">compute_scheduler_driver=<span class="value">nova.scheduler.filter_scheduler.FilterScheduler</span></span>

<span class="comment"># VOLUMES</span>
<span class="comment"># configured in cinder.conf</span>

<span class="comment"># COMPUTE</span>
<span class="setting">compute_driver=<span class="value">libvirt.LibvirtDriver</span></span>
<span class="setting">instance_name_template=<span class="value">instance-%<span class="number">08</span>x</span></span>
<span class="setting">api_paste_config=<span class="value">/etc/nova/api-paste.ini</span></span>

<span class="comment"># COMPUTE/APIS: if you have separate configs for separate services</span>
<span class="comment"># this flag is required for both nova-api and nova-compute</span>
<span class="setting">allow_resize_to_same_host=<span class="value"><span class="keyword">True</span></span></span>

<span class="comment"># APIS</span>
<span class="setting">osapi_compute_extension=<span class="value">nova.api.openstack.compute.contrib.standard_extensions</span></span>
<span class="setting">ec2_dmz_host=<span class="value"><span class="number">192.168</span>.<span class="number">0.146</span></span></span>
<span class="setting">s3_host=<span class="value"><span class="number">192.168</span>.<span class="number">0.146</span></span></span>

<span class="comment"># RABBITMQ</span>
<span class="comment">#rabbit_host=192.168.0.146</span>

<span class="comment"># GLANCE</span>
<span class="setting">image_service=<span class="value">nova.image.glance.GlanceImageService</span></span>
<span class="comment"># NETWORK</span>
<span class="comment">#network_manager=nova.network.manager.FlatDHCPManager</span>
<span class="setting">force_dhcp_release=<span class="value"><span class="keyword">True</span></span></span>
<span class="comment">#dhcpbridge_flagfile=/etc/nova/nova.conf</span>
<span class="comment">#firewall_driver=nova.virt.libvirt.firewall.IptablesFirewallDriver</span>
<span class="setting">network_api_class = <span class="value">nova.network.api.API</span></span>
<span class="setting">security_group_api = <span class="value">nova</span></span>
<span class="setting">firewall_driver = <span class="value">nova.virt.libvirt.firewall.IptablesFirewallDriver</span></span>
<span class="setting">network_manager = <span class="value">nova.network.manager.FlatDHCPManager</span></span>
<span class="setting">network_size = <span class="value"><span class="number">254</span></span></span>
<span class="setting">allow_same_net_traffic = <span class="value"><span class="keyword">False</span></span></span>
<span class="setting">multi_host = <span class="value"><span class="keyword">True</span></span></span>
<span class="setting">send_arp_for_ha = <span class="value"><span class="keyword">True</span></span></span>
<span class="setting">share_dhcp_address = <span class="value"><span class="keyword">True</span></span></span>
<span class="setting">force_dhcp_release = <span class="value"><span class="keyword">True</span></span></span>
<span class="setting">flat_network_bridge = <span class="value">br100</span></span>
<span class="setting">flat_interface = <span class="value">eth1</span></span>
<span class="setting">public_interface = <span class="value">eth0</span></span>
<span class="comment"># Change my_ip to match each host</span>
<span class="setting">my_ip=<span class="value"><span class="number">10.0</span>.<span class="number">0.31</span></span></span>
<span class="setting">public_interface=<span class="value">eth0</span></span>
<span class="setting">vlan_interface=<span class="value">eth0</span></span>
<span class="setting">flat_network_bridge=<span class="value">br100</span></span>
<span class="setting">flat_interface=<span class="value">eth0</span></span>

<span class="comment"># NOVNC CONSOLE</span>
<span class="comment">#novncproxy_base_url=http://192.168.0.146:6080/vnc_auto.html</span>
<span class="comment"># Change vncserver_proxyclient_address and vncserver_listen to match each compute host</span>
<span class="comment">#vncserver_proxyclient_address=192.168.0.146</span>
<span class="comment">#vncserver_listen=192.168.0.146</span>
<span class="setting">vnc_enabled = <span class="value"><span class="keyword">True</span></span></span>
<span class="setting">vncserver_listen = <span class="value"><span class="number">0.0</span>.<span class="number">0.0</span></span></span>
<span class="setting">vncserver_proxyclient_address = <span class="value"><span class="number">10.0</span>.<span class="number">0.31</span></span></span>
<span class="setting">novncproxy_base_url = <span class="value">http://<span class="number">192.168</span>.<span class="number">0.146</span>:<span class="number">6080</span>/vnc_auto.html</span></span>

<span class="comment"># AUTHENTICATION</span>
<span class="setting">auth_strategy=<span class="value">keystone</span></span>
<span class="title">[keystone_authtoken]</span>
<span class="comment">#auth_host = 127.0.0.1</span>
<span class="comment">#auth_port = 35357</span>
<span class="comment">#auth_protocol = http</span>
<span class="comment">#admin_tenant_name = service</span>
<span class="comment">#admin_user = nova</span>
<span class="comment">#admin_password = novapass</span>
<span class="comment">#signing_dirname = /tmp/keystone-signing-nova</span>
<span class="setting">auth_uri = <span class="value">http://controller:<span class="number">5000</span>/v2.<span class="number">0</span></span></span>
<span class="setting">identity_uri = <span class="value">http://controller:<span class="number">35357</span></span></span>
<span class="setting">admin_tenant_name = <span class="value">service</span></span>
<span class="setting">admin_user = <span class="value">nova</span></span>
<span class="setting">admin_password = <span class="value">*yourpass*</span></span>
<span class="comment"># GLANCE</span>
<span class="title">[glance]</span>
<span class="setting">api_servers=<span class="value"><span class="number">10.0</span>.<span class="number">0.11</span>:<span class="number">9292</span></span></span>
<span class="setting">host = <span class="value"><span class="number">10.0</span>.<span class="number">0.11</span></span></span>
<span class="comment"># DATABASE</span>
<span class="title">[database]</span>
<span class="comment">#connection=mysql://nova:*yourpass*@controller/nova</span>

<span class="comment"># LIBVIRT</span>
<span class="title">[libvirt]</span>
<span class="setting">virt_type=<span class="value">kvm</span></span>
</code></pre><p>暂且使用这两个，这里网络模式选择的是legacy那个，如果使用neutron，还是要进行修改的。配置文件依据自己的实际拓扑环境进行修改。</p>
<p>两个节点的compute服务都安装完成后，进行以下验证：</p>
<p>在controller节点上面执行以下命令：</p>
<p>1），设置环境变量：</p>
<pre><code>$ <span class="keyword">source</span> admin-openrc.<span class="keyword">sh</span>
</code></pre><p>2），查看nova开启的服务有几个：</p>
<pre><code>root<span class="comment">@controller:~# nova service-list</span>
+----+------------------+------------+----------+---------+-------+----------------------------+-----------------+
|<span class="string"> Id </span>|<span class="string"> Binary           </span>|<span class="string"> Host       </span>|<span class="string"> Zone     </span>|<span class="string"> Status  </span>|<span class="string"> State </span>|<span class="string"> Updated_at                 </span>|<span class="string"> Disabled Reason </span>|
+----+------------------+------------+----------+---------+-------+----------------------------+-----------------+
|<span class="string"> 1  </span>|<span class="string"> nova-cert        </span>|<span class="string"> controller </span>|<span class="string"> internal </span>|<span class="string"> enabled </span>|<span class="string"> up    </span>|<span class="string"> 2015-05-20T03:58:58.000000 </span>|<span class="string"> -               </span>|
|<span class="string"> 2  </span>|<span class="string"> nova-consoleauth </span>|<span class="string"> controller </span>|<span class="string"> internal </span>|<span class="string"> enabled </span>|<span class="string"> up    </span>|<span class="string"> 2015-05-20T03:58:58.000000 </span>|<span class="string"> -               </span>|
|<span class="string"> 3  </span>|<span class="string"> nova-conductor   </span>|<span class="string"> controller </span>|<span class="string"> internal </span>|<span class="string"> enabled </span>|<span class="string"> up    </span>|<span class="string"> 2015-05-20T03:59:03.000000 </span>|<span class="string"> -               </span>|
|<span class="string"> 4  </span>|<span class="string"> nova-scheduler   </span>|<span class="string"> controller </span>|<span class="string"> internal </span>|<span class="string"> enabled </span>|<span class="string"> up    </span>|<span class="string"> 2015-05-20T03:59:04.000000 </span>|<span class="string"> -               </span>|
|<span class="string"> 5  </span>|<span class="string"> nova-compute     </span>|<span class="string"> 10.0.0.11  </span>|<span class="string"> nova     </span>|<span class="string"> enabled </span>|<span class="string"> down  </span>|<span class="string"> 2015-05-18T14:23:34.000000 </span>|<span class="string"> -               </span>|
|<span class="string"> 6  </span>|<span class="string"> nova-compute     </span>|<span class="string"> compute    </span>|<span class="string"> nova     </span>|<span class="string"> enabled </span>|<span class="string"> up    </span>|<span class="string"> 2015-05-20T03:59:02.000000 </span>|<span class="string"> -               </span>|
|<span class="string"> 7  </span>|<span class="string"> nova-network     </span>|<span class="string"> compute    </span>|<span class="string"> internal </span>|<span class="string"> enabled </span>|<span class="string"> up    </span>|<span class="string"> 2015-05-20T03:59:07.000000 </span>|<span class="string"> -               </span>|
+----+------------------+------------+----------+---------+-------+----------------------------+-----------------+
</code></pre><p>问题：可能你有时候会查看nova的服务列表时候会报以下错误：</p>
<pre><code>root@controller:~# nova service-list
ERROR (Forbidden): Policy doesn't allow compute_extension:services to be performed. (HTTP 403) (Request-ID: req-<span class="number">7c66e2a1</span>-<span class="number">87e0-4552</span>-bae<span class="number">0-9f89700</span>96bb1)
</code></pre><p>这是因为认证没通过，策略不允许。具体的策略是由/etc/nova/policy.json这个文件定义的（JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。）<br>解决方法：</p>
<pre><code># <span class="keyword">source</span> admin-openrc.<span class="keyword">sh</span>  //<span class="keyword">source</span>环境变量
</code></pre><p>3），查看nova的可用的镜像列</p>
<pre><code>root<span class="comment">@controller:~# nova image-list</span>
+--------------------------------------+---------------------+--------+--------+
|<span class="string"> ID                                   </span>|<span class="string"> Name                </span>|<span class="string"> Status </span>|<span class="string"> Server </span>|
+--------------------------------------+---------------------+--------+--------+
|<span class="string"> e60963d5-fcb3-4ebb-b41e-51aa100adfcb </span>|<span class="string"> centos6.6x64        </span>|<span class="string"> ACTIVE </span>|<span class="string">        </span>|
|<span class="string"> 0eb0e87c-450f-4a68-b4d0-d8f6abf26449 </span>|<span class="string"> cirros-0.3.3-x86_64 </span>|<span class="string"> ACTIVE </span>|<span class="string">        </span>|
|<span class="string"> c4b8af42-dea4-42e8-bb2a-daaa3d18117f </span>|<span class="string"> ubuntu server       </span>|<span class="string"> ACTIVE </span>|<span class="string">        </span>|
+--------------------------------------+---------------------+--------+--------+
</code></pre><p>（第一和第三个是我后来上传的，但是格式不对，不能使用）。<br> 至此，compute组件基本安装完成。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：</p>]]>
    
    </summary>
    
      <category term="compute" scheme="http://www.stackops.info/tags/compute/"/>
    
      <category term="nova" scheme="http://www.stackops.info/tags/nova/"/>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建-Glance组件]]></title>
    <link href="http://www.stackops.info/2015/08/19/OpenStack%E6%90%AD%E5%BB%BA-Glance%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.stackops.info/2015/08/19/OpenStack搭建-Glance组件/</id>
    <published>2015-08-19T13:41:14.000Z</published>
    <updated>2015-08-20T04:40:09.238Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="OpenStack_镜像服务">OpenStack 镜像服务</h2><p>openstack是Iaas的核心，它接受用户和opentack组件请求磁盘或则镜像服务和镜像元数据。它支持多种存储类型，包括openstack对象存储（ Object Storage）。</p>
<p>运行在OpenStack Image Service 的进程支持缓存。通过集群的备份确保一致性和可用性。其它周期性进程包括：<br>auditors, updaters, and reapers。</p>
<p>Glance组件完成镜像模板snapshot的存储工作，例如我们新创的一台实例，给他配置LANMP环境，然后做一个快照之后，以后再想创建一个实例并运行LANMP环境，就可以直接从快照启动一个实例，非常方便。并且对实例的备份工作也可以这么实现。从整体上看，为了保证数据的安全性与可用性，应该采用分布式存储来存储镜像文件，不仅可以实现高速存储读取，对安全性也有很大提高，例如openstack的swift组件就是提供分布式存储的功能。</p>
<h3 id="openstack_glance（_Image_Service_）包含下面组件">openstack glance（ Image Service ）包含下面组件</h3><p><strong>glance-api</strong>：接受api请求，并提供相应操作，包括显示，检索，存储<br><strong>glance-registry</strong>：存储、处理、检索镜像的元数据，元数据包括例如镜像大小、类型等</p>
<p>注意：<br><em>glance-registry</em>是<em>OpenStack Image Service</em> 内部服务，不对用户开放</p>
<p>数据库可以选择自己喜欢的数据库存储镜像元数据，大多数使用 MySQL 或则 SQLite.<br>图像文件存储库不同类型的库支持包括文件系统、对象存储、RADOS block devices、HTTP, 和 Amazon S3<br>注意：<br>    一些库只支持只读</p>
<h3 id="安装Glance组件的步骤分为如下几步：">安装Glance组件的步骤分为如下几步：</h3><ul>
<li>安装软件包，编辑配置文件</li>
<li>创建Glance的数据库</li>
<li>在keystone中，创建glance的用户，服务，Endpoint</li>
<li>初始化Glance数据库，启动服务，确认服务正常运行。</li>
<li>在Glance中添加虚拟机镜像。</li>
</ul>
<h4 id="1，安装配置glance服务：">1，安装配置glance服务：</h4><p>1），创建数据库：</p>
<pre><code>a,  进入数据库，并输入密码

$ mysql -u root -p

b,  创建glance数据库

<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> glance;</span>

c,授权给glance。.授权glance数据库，使得本地及远程都能访问  

<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">'glance'</span>@<span class="string">'localhost'</span> \
<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'GLANCE_DBPASS'</span>;</span>        
<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> glance.* <span class="keyword">TO</span> <span class="string">'glance'</span>@<span class="string">'%'</span> \
<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'GLANCE_DBPASS'</span>;</span>

d, 退出数据库。
</code></pre><p>2，环境变量生效：</p>
<pre><code>$ <span class="keyword">source</span> admin-openrc.<span class="keyword">sh</span>
</code></pre><p>3，创建glance（凭据）用户<br>a.创建glance用户</p>
<pre><code><span class="header">$ keystone user-create --name glance --pass GLANCE_PASS
+----------+----------------------------------+</span>
<span class="header">| Property | Value |
+----------+----------------------------------+</span>
| email | |
| enabled | True |
| id | f89cca5865dc42b18e2421fa5f5cce66 |
| name | glance |
<span class="header">| username | glance |
+----------+----------------------------------+</span>
</code></pre><p>b.给glance用户授予admin role（角色）</p>
<pre><code><span class="comment">$</span> <span class="comment">keystone</span> <span class="comment">user</span><span class="literal">-</span><span class="comment">role</span><span class="literal">-</span><span class="comment">add</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user</span> <span class="comment">glance</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">tenant</span> <span class="comment">service</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">role</span> <span class="comment">admin</span>
</code></pre><p>c.创建  glance service 实例:</p>
<pre><code>$ keystone service-create --name glance --type image \
<span class="header">--description "OpenStack Image Service"
+-------------+----------------------------------+</span>
<span class="header">| Property | Value |
+-------------+----------------------------------+</span>
| description | OpenStack Image Service |
| enabled | True |    
| id | 23f409c4e79f4c9e9d23d809c50fbacf |
| name | glance |
<span class="header">| type | image |
+-------------+----------------------------------+</span>
</code></pre><p>d, 创建   Image 服务 API endpoints</p>
<pre><code>$ keystone endpoint-create \
--service-id $(keystone service-list |<span class="string"> awk '/ image / {print $2}') \
--publicurl http://controller:9292 \
--internalurl http://controller:9292 \
--adminurl http://controller:9292 \
--region regionOne
+-------------+----------------------------------+
</span>|<span class="string"> Property </span>|<span class="string"> Value </span>|
+-------------+----------------------------------+
|<span class="string"> adminurl </span>|<span class="string"> http://controller:9292 </span>|
|<span class="string"> id </span>|<span class="string"> a2ee818c69cb475199a1ca108332eb35 </span>|
|<span class="string"> internalurl </span>|<span class="string"> http://controller:9292 </span>|
|<span class="string"> publicurl </span>|<span class="string"> http://controller:9292 </span>|
|<span class="string"> region </span>|<span class="string"> regionOne </span>|
|<span class="string"> service_id </span>|<span class="string"> 23f409c4e79f4c9e9d23d809c50fbacf </span>|
+-------------+----------------------------------+  
</code></pre><p>2,安装配置Image  Service 组成部分。<br>    1），安装包</p>
<pre><code><span class="comment"># apt-get install glance python-glanceclient</span>

2），修改配置文件: /etc/glance/glance-api.conf

[database]
...
<span class="constant">connection</span> = mysql://glance:GLANCE_DBPASS@controller/glance
[keystone_authtoken]
...
<span class="constant">auth_uri</span> = http://controller:5000/v2.0
<span class="constant">identity_uri</span> = http://controller:35357
<span class="constant">admin_tenant_name</span> = service
<span class="constant">admin_user</span> = glance
<span class="constant">admin_password</span> = GLANCE_PASS
</code></pre><p>注意：这里使用auth_uri 替换掉了auth_port等。所以要注释掉原来的认证：</p>
<pre><code>[<span class="atom">paste_deploy</span>]
...
<span class="atom">flavor</span> = <span class="atom">keystone</span>
[<span class="atom">glance_store</span>]
...
<span class="atom">default_store</span> = <span class="atom">file</span>
<span class="atom">filesystem_store_datadir</span> = /<span class="atom">var</span>/<span class="atom">lib</span>/<span class="atom">glance</span>/<span class="atom">images</span>/
</code></pre><p>配置本地文件存储及存储路径</p>
<pre><code>[DEFAULT]
...
<span class="constant">notification_driver</span> = noop
[DEFAULT]
...
<span class="constant">verbose</span> = True

3），修改/etc/glance/glance-registry.conf配置文件。

[database]
...
<span class="constant">connection</span> = mysql://glance:GLANCE_DBPASS@controller/glance
[keystone_authtoken]
...
<span class="constant">auth_uri</span> = http://controller:5000/v2.0
<span class="constant">identity_uri</span> = http://controller:35357
<span class="constant">admin_tenant_name</span> = service
<span class="constant">admin_user</span> = glance
<span class="constant">admin_password</span> = GLANCE_PASS
</code></pre><p>同上，注视掉auth_port等内容。</p>
<pre><code><span class="title">[paste_deploy]</span>
<span class="setting">flavor = <span class="value">keystone</span></span>
<span class="title">[DEFAULT]</span>
<span class="setting">notification_driver = <span class="value">noop    </span></span>
<span class="setting">verbose = <span class="value"><span class="keyword">True</span></span></span>
</code></pre><p>配置 noop通知驱动</p>
<pre><code><span class="number">4</span>），同步数据库；

<span class="preprocessor"># su -s /bin/sh -c <span class="string">"glance-manage db_sync"</span> glance</span>
</code></pre><p>注意：如果配置文件有什么语法上的错位，同步的时候会提示，根据提示来修改。</p>
<pre><code><span class="number">5</span>），重启服务：

<span class="preprocessor"># service glance-registry restart</span>
<span class="preprocessor"># service glance-api restart</span>

<span class="number">6</span>），删掉ubuntu有安装的SQLite 数据库

<span class="preprocessor"># rm -f /var/lib/glance/glance.sqlite</span>
</code></pre><p>3，下载镜像文件：<br>1），创建一个零时文件：</p>
<pre><code>$ <span class="built_in">mkdir</span> /tmp/images
</code></pre><p>2），从网上下载镜像到零时文件中：</p>
<pre><code><span class="variable">$ </span>wget  <span class="symbol">http:</span>/<span class="regexp">/download.cirros-cloud.net/</span><span class="number">0</span>.<span class="number">3.3</span>/cirros-<span class="number">0</span>.<span class="number">3.3</span>-x86_64-disk.img
</code></pre><p>注意：官方文档给的链接不能用。这里使用的是一个小镜像，用于测试。</p>
<p>提供官网找到的链接，里面包含centos，ubuntu，windows server2012等的镜像：</p>
<p><a href="http://docs.openstack.org/image-guide/content/ch_obtaining_images.html" target="_blank" rel="external">官网链接</a></p>
<p>3），source 环境变量</p>
<pre><code>$ <span class="keyword">source</span> admin-openrc.<span class="keyword">sh</span>
</code></pre><p>4)，上传镜像文件到glance的Image服务中：</p>
<pre><code><span class="comment">$</span> <span class="comment">glance</span> <span class="comment">image</span><span class="literal">-</span><span class="comment">create</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">"cirros</span><span class="literal">-</span><span class="comment">0</span><span class="string">.</span><span class="comment">3</span><span class="string">.</span><span class="comment">3</span><span class="literal">-</span><span class="comment">x86_64"</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">file</span> <span class="comment">/tmp/images/cirros</span><span class="literal">-</span><span class="comment">0</span><span class="string">.</span><span class="comment">3</span><span class="string">.</span><span class="comment">3</span><span class="literal">-</span><span class="comment">x86_64</span><span class="literal">-</span><span class="comment">disk</span><span class="string">.</span><span class="comment">img</span> <span class="comment">\</span>
<span class="literal">-</span><span class="literal">-</span><span class="comment">disk</span><span class="literal">-</span><span class="comment">format</span> <span class="comment">qcow2</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">container</span><span class="literal">-</span><span class="comment">format</span> <span class="comment">bare</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">is</span><span class="literal">-</span><span class="comment">public</span> <span class="comment">True</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">progress</span>
</code></pre><p>附上镜像文件下载的地址：<a href="http://download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img" target="_blank" rel="external">http://download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img</a></p>
<p>5），校验上传的镜像：</p>
<pre><code>root<span class="comment">@controller:~# glance image-list</span>
+--------------------------------------+---------------------+-------------+------------------+-----------+--------+
|<span class="string"> ID                                   </span>|<span class="string"> Name                </span>|<span class="string"> Disk Format </span>|<span class="string"> Container Format </span>|<span class="string"> Size      </span>|<span class="string"> Status </span>|
+--------------------------------------+---------------------+-------------+------------------+-----------+--------+
|<span class="string"> e60963d5-fcb3-4ebb-b41e-51aa100adfcb </span>|<span class="string"> centos6.6x64        </span>|<span class="string"> iso         </span>|<span class="string"> bare             </span>|<span class="string"> 401604608 </span>|<span class="string"> active </span>|
|<span class="string"> 0eb0e87c-450f-4a68-b4d0-d8f6abf26449 </span>|<span class="string"> cirros-0.3.3-x86_64 </span>|<span class="string"> qcow2       </span>|<span class="string"> bare             </span>|<span class="string"> 13200896  </span>|<span class="string"> active </span>|
|<span class="string"> c4b8af42-dea4-42e8-bb2a-daaa3d18117f </span>|<span class="string"> ubuntu server       </span>|<span class="string"> iso         </span>|<span class="string"> bare             </span>|<span class="string"> 623902720 </span>|<span class="string"> active </span>|
+--------------------------------------+---------------------+-------------+------------------+-----------+--------+
</code></pre><p>6），上传成功后，删除掉零时文件：</p>
<pre><code><span class="variable">$ </span>rm -r /tmp/images
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="glance" scheme="http://www.stackops.info/tags/glance/"/>
    
      <category term="image" scheme="http://www.stackops.info/tags/image/"/>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建-Keystone组件]]></title>
    <link href="http://www.stackops.info/2015/08/19/OpenStack%E6%90%AD%E5%BB%BA-Keystone%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.stackops.info/2015/08/19/OpenStack搭建-Keystone组件/</id>
    <published>2015-08-19T09:10:02.000Z</published>
    <updated>2015-08-20T04:40:13.267Z</updated>
    <content type="html"><![CDATA[<p>显示全文：</p>
<a id="more"></a>
<h2 id="安装验证服务Keystone">安装验证服务Keystone</h2><p>Keystone是Openstack的认证系统，负责Openstack的用户管理，只有创建了用户，才能以这个用户的身份执行。每一个Openstack的组件都需要现在keystone创建用户，并给用户授予角色和权限。包括后来如果采用swift分布式存储，也可以使用keystone组件作为认证节点，</p>
<h3 id="安装keystone的过程主要分为一下几步：">安装keystone的过程主要分为一下几步：</h3><ul>
<li>安装软件包和修改配置文件</li>
<li>创建Keystone的数据库，并建立Keystone的表结构</li>
<li>启动服务，确认服务正常运行。验证keystone可以使用</li>
<li>创建keystone的管理员用户</li>
<li>定义keystone使用的services和API Endpoints</li>
<li>以创建的用户来使用Keystone客户端命令行。</li>
</ul>
<h4 id="安装步骤：">安装步骤：</h4><ul>
<li>1，创建数据库，创建一个用户，赋予其对keystone数据库的操作权限：</li>
</ul>
<pre><code>$ mysql -u root -p*pass*
<span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> keystone;</span> 
<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">'keystone'</span>@<span class="string">'localhost'</span> \
<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'KEYSTONE_DBPASS'</span>;</span>                                                    
<span class="operator"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> keystone.* <span class="keyword">TO</span> <span class="string">'keystone'</span>@<span class="string">'%'</span> \
<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'KEYSTONE_DBPASS'</span>;</span>  
exit或者 \q  退出数据库。
</code></pre><p>刚建立好的数据库时空的，需要初始化keystone数据库的表结构，可以使用keystone提供命令：</p>
<pre><code><span class="variable">$ </span>keystone-manage db_sync
</code></pre><ul>
<li>2，安装keystone</li>
</ul>
<pre><code>apt-<span class="built_in">get</span> install keystone <span class="keyword">python</span>-keystoneclientne：
</code></pre><ul>
<li>3，修改配置文件：/etc/keystone/keystone.conf</li>
</ul>
<pre><code>[<span class="name">DEFAULT</span>]
...
<span class="atom">admin_token</span> = <span class="name">ADMIN_TOKEN</span>
注释：<span class="atom">admin_token</span>：这个选项很重要，可以将它比喻称获取<span class="name">Keystone</span>管理权限的钥匙。

[<span class="atom">database</span>]
...
<span class="atom">connection</span> = <span class="atom">mysql</span>://<span class="atom">keystone</span>:<span class="name">KEYSTONE_DBPASS</span>@<span class="atom">controller</span>/<span class="atom">keystone</span>  
注释：<span class="atom">connection</span>：这个选项定义了<span class="name">Keystone</span>使用数据库的<span class="name">URL</span>，这里使用了<span class="atom">mysql</span>的<span class="atom">keystone</span>用户，密码是你自己设置的密码，数据库的地址是在<span class="atom">controller</span>上面。数据库的名字是<span class="atom">keystone</span>。
注意：需要注视掉原来自带的<span class="atom">connection</span>，否则会报错）
[<span class="atom">revoke</span>]
...
<span class="atom">driver</span> = <span class="atom">keystone</span>.<span class="atom">contrib</span>.<span class="atom">revoke</span>.<span class="atom">backends</span>.<span class="atom">sql</span>.<span class="name">Revoke</span>
[<span class="name">DEFAULT</span>]
...
<span class="atom">verbose</span> = <span class="name">True</span>
用于测试时查看详细的输出信息。输出信息回保存在<span class="atom">log_dir</span>和<span class="atom">log_file</span>的目录文件中，开启日志功能非常重要，调试过程中遇到问题可以根据日志信息来分析。
</code></pre><p>每次修改过配置文件之后都要进行重启服务：</p>
<pre><code><span class="id">#service</span> keystone restart
</code></pre><ul>
<li>4，同步数据库：</li>
</ul>
<pre><code>su <span class="operator">-s</span> /bin/sh -c <span class="string">"keystone-manage db_sync"</span> keystone

  <span class="comment">## 接下来验证安装效果：</span>
</code></pre><ul>
<li>1，重启keystone服务：</li>
</ul>
<pre><code><span class="variable">$ </span>service keystone restart
</code></pre><ul>
<li>2，删除Ubuntu安装包默认安装的SQLite database.</li>
</ul>
<pre><code>$ <span class="keyword">rm</span> -f /<span class="keyword">var</span>/lib/keystone/keystone.<span class="keyword">db</span>
</code></pre><ul>
<li>3，为了效率设定定期清理过期token</li>
</ul>
<pre><code>$ (crontab -<span class="keyword">l</span> -<span class="keyword">u</span> keystone 2&gt;&amp;1 | grep -q token_flush) || \
echo '@hourly /usr/bin/keystone-manage token_flush &gt;/<span class="keyword">var</span>/<span class="keyword">log</span>/keystone/
keystone-tokenflush.<span class="keyword">log</span> 2&gt;&amp;1' \
&gt;&gt; /<span class="keyword">var</span>/spool/cron/crontabs/keystone  
</code></pre><h5 id="配置环境变量：">配置环境变量：</h5><pre><code>$ <span class="preprocessor">export</span> OS_SERVICE_TOKEN<span class="label">=ADMIN_TOKEN</span>                
$ <span class="preprocessor">export</span> OS_SERVICE_ENDPOINT<span class="label">=http</span>://controller:<span class="number">35357</span>/<span class="literal">v2</span>.<span class="number">0</span>
</code></pre><h3 id="1，这里将创建一个用户，一个tenant（租户）和一个role(角色），他们之间的关系使用户属于tenant，用户在tenant中可以有不同的角色。">1，这里将创建一个用户，一个tenant（租户）和一个role(角色），他们之间的关系使用户属于tenant，用户在tenant中可以有不同的角色。</h3><p>首先，创建一个具有管理权限的tenant，称为admin：</p>
<pre><code><span class="header">$ keystone tenant-create --name admin --description "Admin Tenant" 
+-------------+----------------------------------+</span>
<span class="header">| Property | Value |
+-------------+----------------------------------+</span>
| description | Admin Tenant |
| enabled | True |
| id | 365c70b767824a49862f937a888a4f8e |
<span class="header">|    name | admin |
+-------------+----------------------------------+</span>
</code></pre><p>然后，创建一个用户，命名为admin，密码设置为<em>yourpass</em>，其代码如下：</p>
<pre><code>$  keystone user-create --name admin --pass ADMIN<span class="emphasis">_PASS --email EMAIL_</span>ADDRESS     /这里email地址我没有配置。
<span class="header">$ keystone user-create --name admin --pass *yourpass*
+----------+----------------------------------+</span>
<span class="header">| Property | Value |
+----------+----------------------------------+</span>
| email | admin@example.com |
| enabled | True |
| id | 5ae84085a6c345d7a70ccb90b63c41c9 |
| name | admin |
<span class="header">| username | admin |
+----------+----------------------------------+</span>
</code></pre><p>接着，创建一个称为admin的角色。</p>
<pre><code><span class="header">$ keystone role-create --name admin  
+----------+----------------------------------+</span>
<span class="header">| Property |              Value               |
+----------+----------------------------------+</span>
|    id    | c2958a4cc98a4e5b997e87e3971d2569 |
<span class="header">|   name   |              admin               |
+----------+----------------------------------+</span>
</code></pre><p>最后，将前面创建的tenant，用户和role组合起来，在admin的tenant中分配admin角色给用户admin：</p>
<pre><code>$ keystone <span class="literal">user</span>-role-add --<span class="literal">user</span> <span class="literal">admin</span> --tenant <span class="literal">admin</span> --role <span class="literal">admin</span>
（该命令没有输出结果）。
</code></pre><h3 id="2，创建Demo租户，用户，角色：">2，创建Demo租户，用户，角色：</h3><pre><code>a,创建demo租户：
$ keystone tenant-create --name demo --description "Demo Tenant"  
<span class="header">$ keystone tenant-create --name demo --description "Demo Tenant"
+-------------+----------------------------------+</span>
<span class="header">| Property | Value |
+-------------+----------------------------------+</span>
| description | Demo Tenant |
| enabled | True |
| id | 2508931360da4b9b887ef7dae0dcea71 |
<span class="header">| name | demo |
+-------------+----------------------------------+</span>
</code></pre><p>b，创建demo租户下的用户：</p>
<pre><code>$ keystone user-create --name demo --tenant demo --pass DEMO_PASS --email EMAIL_ADDRESS  
$ keystone user-create --name demo --tenant demo --pass <span class="keyword">*</span>yourpass<span class="keyword">*</span> [--email EMAIL_ADDRESS]  / 暂时不用指定emai地址。
+----------+----------------------------------+
|<span class="string"> Property </span>|<span class="string"> Value </span>|
+----------+----------------------------------+
|<span class="string"> email </span>|<span class="string"> demo@example.com </span>|
|<span class="string"> enabled </span>|<span class="string"> True </span>|
|<span class="string"> id </span>|<span class="string"> 7004dfa0dda84d63aef81cf7f100af01 </span>|
|<span class="string"> name </span>|<span class="string"> demo </span>|
|<span class="string"> tenantId </span>|<span class="string"> 4aa51bb942be4dd0ac0555d7591f80a6 </span>|
|<span class="string"> username </span>|<span class="string"> demo </span>|
+----------+----------------------------------+
</code></pre><p>使用–tenant选项的时候，会自动为member的角色给用户，如果不存在member这个角色，也会自动创建。</p>
<p>c，到这里，demo租户就创建完成了。（全部完成之后截的图，和做到这一步截图会有所不同，具体参照官方文档）。</p>
<h3 id="3，创建service用户：">3，创建service用户：</h3><pre><code><span class="header">$ keystone tenant-create --name service --description "Service Tenant"
+-------------+----------------------------------+</span>
<span class="header">| Property | Value |
+-------------+----------------------------------+</span>
| description | Service Tenant |
| enabled | True |
| id | 6b69202e1bf846a4ae50d65bc4789122 |
<span class="header">| name | service |
+-------------+----------------------------------+</span>
</code></pre><p>（注意创建的时候要通过export环境变量来通过验证，否则会提示报错：</p>
<pre><code>root<span class="variable">@controller</span><span class="symbol">:~</span><span class="comment"># keystone user-list</span>
<span class="constant">Expecting </span>an auth <span class="constant">URL </span>via either --os-auth-url <span class="keyword">or</span> env[<span class="constant">OS_AUTH_URL]</span>）
</code></pre><h3 id="4，定义Services和API_Endpoints：">4，定义Services和API Endpoints：</h3><p>为了使用Keystone来扔正用户使用的Openstack中的其他组件，需要在keystone中创建组件的服务和相应的API Endpoints，组件服务的API  Endpoints是一组URL加端口号，用来也提供组件服务的API接口。<br>这里需要创建一个Keystone的服务和Keystone的API  Endpoints。</p>
<pre><code>$ keystone service-create --name keystone --type identity \
--description <span class="string">"OpenStack Identity"</span>
+-------------+----------------------------------+
|<span class="string"> Property </span>|<span class="string"> Value </span>|
+-------------+----------------------------------+    
|<span class="string"> description </span>|<span class="string"> OpenStack Identity </span>|
|<span class="string"> enabled </span>|<span class="string"> True </span>|
|<span class="string"> id </span>|<span class="string"> 15c11a23667e427e91bc31335b45f4bd </span>|
|<span class="string"> name </span>|<span class="string"> keystone </span>|
|<span class="string"> type </span>|<span class="string"> identity </span>|
+-------------+----------------------------------+  
</code></pre><p>查看创建的服务：</p>
<pre><code><span class="id">#keystone</span>  service-list
</code></pre><p>删除创建的服务：</p>
<pre><code>#keystone  service-<span class="operator"><span class="keyword">delete</span> <span class="keyword">id</span></span>
</code></pre><p>创建endpoint：</p>
<pre><code>$ keystone endpoint-create \
--service-id $(keystone service-list |<span class="string"> awk '/ identity / {print $2}') \
--publicurl http://controller:5000/v2.0 \
--internalurl http://controller:5000/v2.0 \
--adminurl http://controller:35357/v2.0 \
--region regionOne
+-------------+----------------------------------+
</span>|<span class="string"> Property </span>|<span class="string"> Value </span>|
+-------------+----------------------------------+
|<span class="string"> adminurl </span>|<span class="string"> http://controller:35357/v2.0 </span>|
|<span class="string"> id </span>|<span class="string"> 11f9c625a3b94a3f8e66bf4e5de2679f </span>|
|<span class="string"> internalurl </span>|<span class="string"> http://controller:5000/v2.0 </span>|
|<span class="string"> publicurl </span>|<span class="string"> http://controller:5000/v2.0 </span>|
|<span class="string"> region </span>|<span class="string"> regionOne </span>|
|<span class="string"> service_id </span>|<span class="string"> 15c11a23667e427e91bc31335b45f4bd </span>|
+-------------+----------------------------------+  
</code></pre><p>注意：service-id是service-create命令得到的ID号，使用的是‘/ identity / ‘ 匹配到带有identity那一行，并且取出第二列。所以前面创建服务的时候不能够重复创建。否则awk取出的就不是一个id了。<br>例如问题：</p>
<pre><code><span class="comment">keystone</span> <span class="comment">endpoint</span><span class="literal">-</span><span class="comment">create</span> <span class="comment">\</span>
    &gt;   <span class="literal">-</span><span class="literal">-</span><span class="comment">service</span><span class="literal">-</span><span class="comment">id</span> <span class="comment">$(keystone</span> <span class="comment">service</span><span class="literal">-</span><span class="comment">list</span> <span class="comment">|</span> <span class="comment">awk</span> <span class="comment">'/</span> <span class="comment">identity</span> <span class="comment">/</span> <span class="comment">{print</span> <span class="comment">$2}')</span> <span class="comment">\</span>    
    &gt;   <span class="literal">-</span><span class="literal">-</span><span class="comment">publicurl</span> <span class="comment">http://controller:5000/v2</span><span class="string">.</span><span class="comment">0</span> <span class="comment">\</span>
    &gt;   <span class="literal">-</span><span class="literal">-</span><span class="comment">internalurl</span> <span class="comment">http://controller:5000/v2</span><span class="string">.</span><span class="comment">0</span> <span class="comment">\</span>
    &gt;   <span class="literal">-</span><span class="literal">-</span><span class="comment">adminurl</span> <span class="comment">http://controller:35357/v2</span><span class="string">.</span><span class="comment">0</span> <span class="comment">\</span>
    &gt;   <span class="literal">-</span><span class="literal">-</span><span class="comment">region</span> <span class="comment">regionOne</span>
    <span class="comment">usage:</span> <span class="comment">keystone</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">version</span><span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">debug</span><span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">username</span> &lt;<span class="comment">auth</span><span class="literal">-</span><span class="comment">user</span><span class="literal">-</span><span class="comment">name</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">password</span> &lt;<span class="comment">auth</span><span class="literal">-</span><span class="comment">password</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">tenant</span><span class="literal">-</span><span class="comment">name</span> &lt;<span class="comment">auth</span><span class="literal">-</span><span class="comment">tenant</span><span class="literal">-</span><span class="comment">name</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">tenant</span><span class="literal">-</span><span class="comment">id</span> &lt;<span class="comment">tenant</span><span class="literal">-</span><span class="comment">id</span>&gt;<span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">auth</span><span class="literal">-</span><span class="comment">url</span> &lt;<span class="comment">auth</span><span class="literal">-</span><span class="comment">url</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">region</span><span class="literal">-</span><span class="comment">name</span> &lt;<span class="comment">region</span><span class="literal">-</span><span class="comment">name</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">identity</span><span class="literal">-</span><span class="comment">api</span><span class="literal">-</span><span class="comment">version</span> &lt;<span class="comment">identity</span><span class="literal">-</span><span class="comment">api</span><span class="literal">-</span><span class="comment">version</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">token</span> &lt;<span class="comment">service</span><span class="literal">-</span><span class="comment">token</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">endpoint</span> &lt;<span class="comment">service</span><span class="literal">-</span><span class="comment">endpoint</span>&gt;<span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">cache</span><span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">force</span><span class="literal">-</span><span class="comment">new</span><span class="literal">-</span><span class="comment">token</span><span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">stale</span><span class="literal">-</span><span class="comment">duration</span> &lt;<span class="comment">seconds</span>&gt;<span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">insecure</span><span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">cacert</span> &lt;<span class="comment">ca</span><span class="literal">-</span><span class="comment">certificate</span>&gt;<span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">cert</span> &lt;<span class="comment">certificate</span>&gt;<span class="title">]</span>
                <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">os</span><span class="literal">-</span><span class="comment">key</span> &lt;<span class="comment">key</span>&gt;<span class="title">]</span> <span class="title">[</span><span class="literal">-</span><span class="literal">-</span><span class="comment">timeout</span> &lt;<span class="comment">seconds</span>&gt;<span class="title">]</span>
                &lt;<span class="comment">subcommand</span>&gt; <span class="string">.</span><span class="string">.</span><span class="string">.</span>
    <span class="comment">keystone:</span> <span class="comment">error:</span> <span class="comment">unrecognized</span> <span class="comment">arguments:</span> <span class="comment">cf4399b85ab14cfb81beb3bb9d53b8dd</span>
</code></pre><p>解决方法是：</p>
<pre><code><span class="header">keystone service-list
+----------------------------------+----------+----------+--------------------+</span>
<span class="header">| id | name | type | description |
+----------------------------------+----------+----------+--------------------+</span>
| 0fb9984647124844b9c94be934318b95 | keystone | identity | OpenStack Identity |
<span class="header">| cf4399b85ab14cfb81beb3bb9d53b8dd | keystone | identity | OpenStack Identity |
+----------------------------------+----------+----------+--------------------+</span>
删除掉重复的id
root@controller:~# keystone service-delete cf4399b85ab14cfb81beb3bb9d53b8dd
</code></pre><h3 id="5，验证：">5，验证：</h3><p>1），unset环境变量：</p>
<pre><code>$ <span class="built_in">unset</span> OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT
</code></pre><p>2），以admin租户，admin用户申请认证口令。</p>
<pre><code>$ keystone --os-tenant-name admin --os-username admin --ospassword
ADMIN_PASS \    
--os-auth-url http://controller:35357/v2.0 token-get
+-----------+----------------------------------+
|<span class="string"> Property </span>|<span class="string"> Value </span>|
+-----------+----------------------------------+
|<span class="string"> expires </span>|<span class="string"> 2014-10-10T12:50:12Z </span>|
|<span class="string"> id </span>|<span class="string"> 8963eb5ccd864769a894ec316ef8f7d4 </span>|
|<span class="string"> tenant_id </span>|<span class="string"> 6f4c1e4cbfef4d5a8a1345882fbca110 </span>|
|<span class="string"> user_id </span>|<span class="string"> ea8c352d253443118041c9c8b8416040 </span>|
+-----------+----------------------------------+  
</code></pre><p>（用之前设置的密码替换掉ADMIN_PASS，如果有特殊字符，用’’括起来）。</p>
<p>3），以admin租户的admin用户查看租户列表：</p>
<pre><code>$ keystone --os-tenant-name admin --os-username admin --ospassword
ADMIN_PASS \
--os-auth-url http://controller:35357/v2.0 tenant-list
+----------------------------------+----------+---------+
|<span class="string"> id </span>|<span class="string"> name </span>|<span class="string"> enabled </span>|
+----------------------------------+----------+---------+
|<span class="string"> 6f4c1e4cbfef4d5a8a1345882fbca110 </span>|<span class="string"> admin </span>|<span class="string"> True </span>|
|<span class="string"> 4aa51bb942be4dd0ac0555d7591f80a6 </span>|<span class="string"> demo </span>|<span class="string"> True </span>|
|<span class="string"> 6b69202e1bf846a4ae50d65bc4789122 </span>|<span class="string"> service </span>|<span class="string"> True </span>|
+----------------------------------+----------+---------+
</code></pre><p>4），申请用户列表：</p>
<pre><code>$ keystone --os-tenant-name admin --os-username admin --ospassword
ADMIN_PASS \
--os-auth-url http://controller:35357/v2.0 user-list
+----------------------------------+---------+---------
+---------------------+
|<span class="string"> id </span>|<span class="string"> name </span>|<span class="string"> enabled </span>|<span class="string"> email
</span>|
+----------------------------------+---------+---------
+---------------------+
|<span class="string"> ea8c352d253443118041c9c8b8416040 </span>|<span class="string"> admin </span>|<span class="string"> True </span>|<span class="string"> admin@example.com </span>|
|<span class="string"> 7004dfa0dda84d63aef81cf7f100af01 </span>|<span class="string"> demo </span>|<span class="string"> True </span>|<span class="string"> demo@example.com
</span>|<span class="string">+----------------------------------+---------+---------+---------------------+ </span>
</code></pre><p>5），申请角色列表：</p>
<pre><code><span class="code"> $ keystone --os-tenant-name admin --os-username admin --ospassword</span>
ADMIN<span class="emphasis">_PASS \
--os-auth-url http://controller:35357/v2.0 role-list
+----------------------------------+----------+
| id | name |
+----------------------------------+----------+
| 9fe2ff9ee4384b1894a90878d3e92bab | _</span>member_ |
<span class="header">| bff3a6083b714fa29c9344bf8930d199 | admin |
+----------------------------------+----------+</span>
</code></pre><p>6），以demo租户的demo用户获取token：</p>
<pre><code>$ keystone --os-tenant-name demo --os-username demo --ospassword
DEMO_PASS \
--os-auth-url http://controller:35357/v2.0 token-get    
+-----------+----------------------------------+
|<span class="string"> Property </span>|<span class="string"> Value </span>|
+-----------+----------------------------------+
|<span class="string"> expires </span>|<span class="string"> 2014-10-10T12:51:33Z </span>|
|<span class="string"> id </span>|<span class="string"> 1b87ceae9e08411ba4a16e4dada04802 </span>|
|<span class="string"> tenant_id </span>|<span class="string"> 4aa51bb942be4dd0ac0555d7591f80a6 </span>|
|<span class="string"> user_id </span>|<span class="string"> 7004dfa0dda84d63aef81cf7f100af01 </span>|
+-----------+----------------------------------+  
</code></pre><p>7），申请用户列表：</p>
<pre><code>$ keystone <span class="comment">--os-tenant-name demo --os-username demo --ospassword</span>
DEMO_PASS \
<span class="comment">--os-auth-url http://controller:35357/v2.0 user-list</span>
You are <span class="operator">not</span> authorized <span class="built_in">to</span> perform <span class="operator">the</span> requested action, admin_required.
(HTTP <span class="number">403</span>)
</code></pre><p>6，创建openstack客户环境变量脚本：<br>1），创建一个叫做admin_openrc.sh的文件内容如下：</p>
<pre><code><span class="keyword">export</span> OS_TENANT_NAME=admin
<span class="keyword">export</span> OS_USERNAME=admin
<span class="keyword">export</span> OS_PASSWORD=ADMIN_PASS
<span class="keyword">export</span> OS_AUTH_URL=http:<span class="comment">//controller:35357/v2.0</span>
</code></pre><p>替换掉ADMIN_PASS</p>
<p>2),创建demo-openrc.sh的脚本文件，内容如下：</p>
<pre><code><span class="keyword">export</span> OS_TENANT_NAME=demo
<span class="keyword">export</span> OS_USERNAME=demo
<span class="keyword">export</span> OS_PASSWORD=DEMO_PASS
<span class="keyword">export</span> OS_AUTH_URL=http:<span class="comment">//controller:5000/v2.0</span>
</code></pre><p>注释：端口说明： 端口35357仅用作管理端口，而5000是给普通用户功能使用的。<br>使用source来引用脚本。<br>例如：</p>
<pre><code>$ <span class="keyword">source</span> admin-openrc.<span class="keyword">sh</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：</p>]]>
    
    </summary>
    
      <category term="Keystone" scheme="http://www.stackops.info/tags/Keystone/"/>
    
      <category term="OpenStack" scheme="http://www.stackops.info/tags/OpenStack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cisco-2960交换机配置]]></title>
    <link href="http://www.stackops.info/2015/08/17/Cisco-2960%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.stackops.info/2015/08/17/Cisco-2960交换机配置/</id>
    <published>2015-08-17T12:32:58.000Z</published>
    <updated>2015-08-17T16:10:00.706Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p><em>接上一篇blog，这次补充具体的配置命令</em>：</p>
<p>网络大概拓扑：<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/EC拓扑.jpg" alt="topo"></p>
<h2 id="具体的配置思路：">具体的配置思路：</h2><ul>
<li>1 配置交换机基本功能</li>
<li>2 配置RSTP协议</li>
<li>3 配置Portfast</li>
<li>4 配置Etherchannel</li>
<li>5 配置端口安全（可选）</li>
<li>6 校验检查</li>
</ul>
<h3 id="步骤一：配置交换机的基本环境：">步骤一：配置交换机的基本环境：</h3><p>cisco交换机开机的时间可能会有点长，和一般的系统一样也都会执行post加电自检等行为，需等待几秒钟。</p>
<h4 id="交换机的基本状态：">交换机的基本状态：</h4><pre><code>rommon&gt;   ROM状态
hostname&gt;    用户模式
hostname<span class="comment">#    特权模式</span>
hostname(config)<span class="comment">#    全局配置模式</span>
hostname(config-<span class="keyword">if</span>)<span class="comment">#    接口状态</span>
</code></pre><h4 id="switch基础配置：">switch基础配置：</h4><pre><code><span class="keyword">switch</span>&gt; enable  ：进入特权模式
<span class="keyword">switch</span><span class="preprocessor">#config terminal    :进入全局配置模式</span>
<span class="keyword">switch</span>(config)<span class="preprocessor"># enable password *yourpasswd*  :配置你的特权密码。</span>
不过使用 enable password  *yourpasswd*  ，你的密码会明文存储，可以使用命令：
<span class="preprocessor">#service passwd-encryption  对密码进行加密。也可以直接配置密文密码：</span>
<span class="keyword">switch</span>(config)<span class="preprocessor"># enable secret  *yourpasswd*   </span>
这样在使用<span class="preprocessor">#show run 看配置的时候你的密码就会加密存放。</span>

sw2(config)<span class="preprocessor">#<span class="keyword">line</span> console <span class="number">0</span>  ： 进入console控制台</span>
sw2(config-line)<span class="preprocessor">#no exec-timeout  ：关掉超时时间</span>
sw2(config-line)<span class="preprocessor">#logging synchronous  ：光标同步，再输入命令的时候不会因为控制台的消息而打断。</span>
sw2(config-line)<span class="preprocessor">#exit  ： 退出console控制台</span>
sw2(config)<span class="preprocessor">#hostname sw2  ：将交换机的名字改为sw2</span>
sw2(config)<span class="preprocessor">#no ip domain lookup  ： 关闭域名查询，如果不关掉的话，错误的命令可能引起查询而卡在</span>
Translating <span class="string">"sw2"</span>...<span class="function">domain <span class="title">server</span> <span class="params">(<span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span>)</span> 这个状态， 这时候就需要等待。（大多数卡住的情况可以使用ctrl+shift+6来终止）。</span>
</code></pre><h5 id="给vlan配置ip地址：">给vlan配置ip地址：</h5><pre><code>sw1<span class="preprocessor">#conf terminal </span>
Enter configuration commands, one per line.  End with CNTL/Z.
sw1(config)<span class="preprocessor">#interface vlan1</span>
sw1(config-<span class="keyword">if</span>)<span class="preprocessor">#ip add <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> </span>
sw1(config-<span class="keyword">if</span>)<span class="preprocessor">#no shut</span>

sw2<span class="preprocessor">#configure terminal </span>
Enter configuration commands, one per line.  End with CNTL/Z.
sw2(config)<span class="preprocessor">#interface vlan1</span>
sw2(config-<span class="keyword">if</span>)<span class="preprocessor">#ip add <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span>
sw2(config-<span class="keyword">if</span>)<span class="preprocessor">#no shut</span>
</code></pre><h5 id="配置过ip地址后，要验证连通性，否则后面的ssh服务无法完成。">配置过ip地址后，要验证连通性，否则后面的ssh服务无法完成。</h5><pre><code>sw2<span class="preprocessor">#ping <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span> source <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></span>

Type escape sequence to <span class="built_in">abort</span>.
Sending <span class="number">5</span>, <span class="number">100</span>-byte ICMP Echos to <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>, timeout is <span class="number">2</span> seconds:
Packet sent with a source address of <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span> 
!!!!!
Success rate is <span class="number">100</span> percent (<span class="number">5</span>/<span class="number">5</span>), round-trip min/avg/max = <span class="number">8</span>/<span class="number">48</span>/<span class="number">68</span> ms
</code></pre><h4 id="配置ssh功能">配置ssh功能</h4><p>因为telnet在网络中时明文传输的，不安全，而ssh也正在被众多企业所应用，所以这里演示配置ssh服务：<br>全局模式下配置：</p>
<pre><code><span class="function"><span class="title">sw2</span><span class="params">(config)</span></span><span class="id">#ip</span> domain name sw2<span class="class">.com</span>   ：配置域名
<span class="id">#crypto</span> key generate rsa  modulus <span class="number">1024</span>   :生成ssh的key
<span class="id">#username</span> sw2 pass xxx  ：创建用户和密码
<span class="id">#ip</span> ssh logging events  : 开启 ssh的控制台信息。如果有人登录，会报信息。
<span class="id">#ip</span> ssh max <span class="number">5</span> ：定义同时最多多少人同时ssh登录。
<span class="hexcolor">#acc</span>ess-list  <span class="number">1</span> permit  <span class="number">10.0</span>.<span class="number">0.0</span> <span class="number">0.0</span>.<span class="number">0.255</span>  ：设置访问控制列表，只允许指定的网段ipssh登录。（注意掩码使用的是反掩码）
<span class="hexcolor">#acc</span>ess-list <span class="number">1</span> deny any ：access-list的默认行为，除了放行的网段，其他都拒绝。
<span class="id">#line</span> vty <span class="number">0</span> <span class="number">4</span>  ：指定<span class="number">0</span>-<span class="number">4</span> 总共<span class="number">5</span>个vty可同时登录。
<span class="id">#login</span> local   ： 将本地的认证信息加载。
<span class="hexcolor">#acc</span>ess-class <span class="number">1</span> <span class="keyword">in</span> ： 将访问控制列表放在入口方向。
<span class="function"><span class="title">sw1</span><span class="params">(config-line)</span></span><span class="id">#transport</span> <span class="tag">input</span> ssh  : 定义使用ssh进行传输。
<span class="function"><span class="title">sw1</span><span class="params">(config)</span></span><span class="id">#ip</span> ssh source-interface  vlan <span class="number">1</span>   ：定义使用ssh的源接口。交换机上使用的是vlan1
</code></pre><h4 id="加上banner信息：">加上banner信息：</h4><pre><code><span class="function"><span class="title">sw1</span><span class="params">(config)</span></span><span class="id">#banner</span> login @
“输入文本信息并以@作为结束符”
WARNNING! ACCESS RESTRICTED!
@
</code></pre><p>这样当用户ssh登录这台交换机的时候就会看到banner的信息。</p>
<p>两台交换机ssh配置相类似，配置完后，分别在两台交换机上尝试登录对方：</p>
<pre><code>sw1<span class="preprocessor">#ssh -l sw2 <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>   ：-l 指定用户名， 后面加ip地址。</span>

Password:                输入之前设置的密码后即可登录

sw2&gt;en
% No password <span class="built_in">set</span>            这里需要注意，必须配置了特权密码的情况下才能进入特权模式。否则会像这里一样报错。
sw2&gt;

sw2&gt;en
Password:     添加特权密码后即可正常登录。 
sw2<span class="preprocessor">#</span>
</code></pre><hr>
<h3 id="步骤二：配置RSTP协议：">步骤二：配置RSTP协议：</h3><pre><code><span class="function"><span class="title">sw1</span><span class="params">(config)</span></span><span class="id">#spanning-tree</span> mode rapid-pvst  全局配置模式下启用RSTP协议。
</code></pre><p>这里就是简单启用RSTP协议，只有两台交换机，没必要指定根桥等特性。</p>
<p>当RSTP配置完成之后，我们可以查看RSTP协议是否起效。</p>
<pre><code>Switch#<span class="operator"><span class="keyword">show</span> spanning-tree summery    检测vlan生成树配置    可以看到交换机端口角色变换。
<span class="keyword">Switch</span>#<span class="keyword">show</span> spanning-tree vlan&lt;vlan-<span class="keyword">id</span>&gt; detail    浏览详细生成树配置信息  
<span class="keyword">Switch</span>#<span class="keyword">show</span> spanning-tree <span class="keyword">interface</span> &lt;<span class="built_in">int</span>-<span class="keyword">id</span>&gt; detail    浏览详细生成树端口配置信息</span>
</code></pre><p>注意RSTP协议是相对于vlan来说的。</p>
<p>我们在没配置etherchannel的时候会发现，当我们在交换机之间用两个网线连接的时候，会有一个接口处于blk（block）状态，不会进行数据的转发。这是正常的，说明RSTP协议起作用了，防止环路的出现。</p>
<hr>
<h3 id="步骤三：配置portfast：">步骤三：配置portfast：</h3><p>在一些准备用于连接服务器的接口，进行快速端口的配置portfast。这样连接服务器的端口会直接跳过状态变化，直接变为forwarding状态。</p>
<pre><code><span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#spanning-tree</span> portfast   ：开启快速端口，加快接口收敛速度。
</code></pre><p>同时也可以使用宏命令：</p>
<pre><code><span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#switchport</span>  host
</code></pre><p>提供终端设备访问的端口可以配置一条宏命令：#switchport  host，在指定的交换机端口上执行了这条命令后，交换机会执行以下行为：把交换机端口置于Access模式，启用生成树Portfast特性并禁用通道组（channel group)。相当于一条命令执行多个动作，如果想撤销这个命令，不能简单的使用#no switchport host ，必须在全局模式中使用 #default interface  interface-id命令。这个命令会将所有接口恢复默认配置。</p>
<hr>
<h3 id="步骤四：配置Etherchannel：">步骤四：配置Etherchannel：</h3><p><strong>注意</strong>：配置成etherchannel的接口配置必须相同，无论双工模式还是速率，接口模式access|trunk，必须相同。在这里不做改变即可。</p>
<pre><code><span class="keyword">switch</span>(config)<span class="preprocessor">#interface range fasternet0/<span class="number">1</span> - <span class="number">2</span>    将fasternet0/<span class="number">1</span>和<span class="number">0</span>/<span class="number">2</span> 口捆绑，注意最多不能够超过<span class="number">8</span>根，且接口号必须连续。 </span>
<span class="keyword">switch</span>(config-<span class="keyword">if</span>)<span class="preprocessor">#channel-group <span class="number">1</span> mode on    配置以太通道模式 直接使用on模式，不用协议自动创建。 </span>
<span class="keyword">switch</span>(config-<span class="keyword">if</span>)<span class="preprocessor">#port-channel load-balance {dst-mac | src-mac}在链路间实现负载均衡 这里可以选择基于src-dst-mac 源和目的mac进行负载分担。</span>
<span class="keyword">switch</span><span class="preprocessor">#show etherchannel  <span class="number">1</span>  summary    查看通道信息  ，可以查看捆绑的链路有哪些，以及接口的状态。</span>
<span class="keyword">switch</span><span class="preprocessor">#show  etherchannel  load-balance    查看通道负载均衡信息</span>

<span class="keyword">switch</span><span class="preprocessor">#show ip interface brief   查看接口的时候，我们会看到通过etherchannel捆绑产生的一个逻辑接口portchannel，并且处于up状态。</span>
</code></pre><hr>
<h3 id="步骤五：配置端口安全（可选）">步骤五：配置端口安全（可选）</h3><pre><code><span class="function"><span class="title">sw2</span><span class="params">(config)</span></span><span class="id">#int</span> fa1/<span class="number">1</span>  进入你要配置端口安全的接口
<span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#switchport</span> port-security   启用端口安全。
<span class="function"><span class="title">sw2</span><span class="params">(config-if)</span></span><span class="id">#switchport</span> port-security  mac-add sticky  ：进行端口mac地址绑定，一个端口只能绑定一个mac地址，意味着只能连接服务器，不能连接交换机，并且服务器使用虚拟化的时候，虚拟出来的mac可能会被误杀。所以慎用，否则可能会导致接口进入down状态。


<span class="id">#show</span>  port-security  <span class="tag">address</span> ：这个一定要看到输出画面。
</code></pre><hr>
<h3 id="步骤六：校验">步骤六：校验</h3><p>可以拿服务器进行测试，看负载分担是否生效，还有从etherchannel中拔掉一根网线是否会造成整个portchannel都down掉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="Cisco" scheme="http://www.stackops.info/tags/Cisco/"/>
    
      <category term="switch" scheme="http://www.stackops.info/tags/switch/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[机房网络优化]]></title>
    <link href="http://www.stackops.info/2015/08/15/%E6%9C%BA%E6%88%BF%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/"/>
    <id>http://www.stackops.info/2015/08/15/机房网络优化/</id>
    <published>2015-08-15T12:50:58.000Z</published>
    <updated>2015-08-16T15:56:16.154Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="硬件介绍：">硬件介绍：</h2><p>cisco经典的接入层交换机：catalyst 2960</p>
<h2 id="机房网络分析：">机房网络分析：</h2><p>网络拓扑比较简单，主要分为内网和外网两个环境。电信机房托管，外网几乎不用做太多改变。整个网络只需要一些二层的配置，网络层都由电信机房提供，我们只需要用交换机接入即可。因为服务器大概的角色分配是web应用服务器和DB，内网之间的数据读写比较平凡，相对来说对网络带宽要求比较高。据说之前有因为交换机带宽瓶颈带来过down机现象。本次改善主要是针对带宽扩展而做的。之前的交换机都是当傻瓜交换机用，无任何配置，无任何链路冗余。<br>需要改进的几点：</p>
<ul>
<li>1， 配置RSTP生成树协议，即快速生成树。</li>
<li>2， 配置Etherchannel，以太信道，即链路聚合</li>
<li>3， 连接服务器的端口配置portfast，即快速端口。</li>
<li>4， (可选)配置端口安全，mac和ip地址绑定。</li>
</ul>
<hr>
<h3 id="一，简单介绍STP：">一，简单介绍STP：</h3><p>STP即生成树协议。实现高可用性是企业网络的主要目标之一，确保高可用性的方法是通过网络来提供设备，模块和链路的二层冗余，但是提供二层网络冗余又可能会形成桥接环路，如果产生桥接环路，数据包就会永远在设备间循环，产生广播风暴，占用网络带宽。生成树协议就是用来防止二层环路的。</p>
<p>STP只允许存在一条活动的路径，并同时阻塞其他冗余路径。在（active）活跃路径失效的情况下，冗余路径就会有一条路径成为活动路径。</p>
<h3 id="STP的几个常用版本：">STP的几个常用版本：</h3><ul>
<li><p>1， <strong>PVST+（每VLAN生成树增强版）</strong>：对stp进行增强后的版本，会为网络中配置的每个vlan提供一个独立的802.1D生成树实例。这个独立的实例支持很多增强特性：Portfast，BPUD guard，BPDU过滤，根防护（root guard）和环路保护（loop guard）。为每个vlan分别创建一个vlan会占用很多cpu和内存资源，但是这可以为每个vlan生成一个根桥。是STP树对每个VLAN的流量来说都是最优的。</p>
</li>
<li><p>2，    <strong>RSTP（快速STP）</strong>： STP的进化版本，它可以使STP更快速地收敛，这个版本可以解决很多手链的问题，不过由于这仍然是单实例的STP协议，因此它无法解决出现次优路径的问题。（次优路径的产生是因为当有多个vlan同时存在一台交换机上时，stp只会针对一个实例（vlan）进行路径选择，选出来的路径并不一定适合其他vlan故产生次优路由）。本拓扑中，两台交换机都直接连接的是内网，主要是由服务器内网接口和远程卡接口组成，之间需要互相通信，故不应该进行vlan划分。选择这种stp，收敛速度快，当发生网络故障，恢复速度相对较快。</p>
</li>
<li><p>3， <strong>MSTP(多生成树)</strong>：巨型交换网使用，cisco私有的，可以将多个拥有同样数据流量需求的VLAN映射进同一个生成树实例中。CISCO的实施方案可以提供最多16个RSTP实例，并将同一个物理和逻辑拓扑中的多个VLAN合进一个公共的RSTP实例中，每个实例都支持PortFast，BPDUguard，BPDU过滤和root guard。</p>
</li>
</ul>
<p>选择RSTP的原因：二层网络拓扑简单，无复杂vlan划分。收敛速度上看，RSTP算法源比802.1D STP要优越的多，甚至比PVST+的速度更快，大大提高了任何一个vlan在链路建立起来时拓扑收敛的速度，同时它也大大减少了任何非直连链路出现故障时，BackboneFast的收敛时间。</p>
<h3 id="RSTP的端口状态：">RSTP的端口状态：</h3><p>总共有三种端口状态：丢弃状态，学习状态和转发状态，丢弃状态，代表了802.1D STP的禁用，阻塞和监听状态</p>
<ul>
<li>丢弃（discarding）：15s，阻止传输数据帧的行为，可以阻断二层环路。</li>
<li>学习（learning）：15s，接收数据帧，并用来填充MAC表，以对未知单播数据帧的泛洪行为进行限制</li>
<li>转发（forwarding）：处于稳定状态，转发数据。</li>
</ul>
<h3 id="RSTP端口角色：">RSTP端口角色：</h3><ul>
<li>根端口：非根网桥上选择出来与根网桥相连的端口，每台交换机只有一个根端口。端口标记是R，根端口稳定状态处于转发状态。</li>
<li>指定端口：每个王端中至少有一个交换机端口作为该网段的指定端口。指定端口处于转发状态。端口标记为：D</li>
<li>替代端口：用来提供去往根网桥替代路径的端口，在稳定工作状态处于丢弃状态。当指定端口出现故障的时候会过度为指定端口。替代端口标记为A。</li>
<li>备份端口：交换机上一个额外的交换机端口，作用是为交换机充当指定交换机那个网段提供一条备份链路。备份端口处于丢弃状态。端口标记为B。</li>
<li>禁用端口：不担当任何角色。</li>
</ul>
<p><strong>注意</strong>：那些直接连接到服务器的端口，通常不会在网络中产生桥接环路，可以直接允许他们直接过度到转发状态，而跳过监听和学习阶段。边缘端口（就是启用了portfast的端口）和点到点链路会快速过度到转发状态。注意不能将交换机和交换机相连的端口配置成快速端口。</p>
<hr>
<h2 id="二，介绍EtherChannel：">二，介绍EtherChannel：</h2><p>1），作用：链路捆绑，（最多8条物理链路捆绑，为什么是8条？据说是模拟双绞线的收发）多条链路被逻辑上捆绑成一条，提高带宽，同时可以对流量进行负载分担；提供一定的冗余性，只要交换机之间还有一条链路时正常工作的，那么Etherchannel就会照常工作，尽管他的吞吐量会相应的降低；</p>
<p>2）cisco设备被捆绑的接口端号必须是连续的；华为的设备接口号可以不连续；</p>
<p>3）被捆绑的接口的所有配置必须一致（trunk）端口的速率，双工模式，vlan信息的设置必须完全一致。如果有4个100M和4个10M，则只有4个100M的工作；（这里交换机是10/100/1000M自适应的，那就不做改变，让所有参与etherchannel的接口配置都相同）。</p>
<p>2， EC的分类：<br>      1）二层EC，分为三类：<br>          a，8个access 模式捆绑；<br>          b，8个trunk link捆绑，<br>          c，access模式（接口加入某个vlan）<br>      2）三层EC：noswitchport  二层接口提升为三层<br>        portchannel 逻辑接口，IP地址加给portchannel；</p>
<p>路由器不能做EC，而使用FRR：快速重路由；</p>
<p>3，EC的配置分为两种<br>    1）手动配置：接口下：channel-group 《id》  mode on<br>2）协议协商：pagp/lacp<br>     <strong>PAGP(端口聚集协议）</strong>:cisco私有；<strong>自动创建EC链路</strong>，pagp数据包就会在启用了EC端口之间发送，以协商建立起来这条通道；<br>     <strong>LACP链路聚合控制协议</strong>：IEEE定义；可以将多个物理端口捆绑起来来建立一条EC通道；混合交换机环境中应该用这种协议来部署EC，在CISCO环境中，这两种协议都是支持的；</p>
<hr>
<p><strong>PAGP模式</strong>：<br>数据包每30s发送一次；PAGP会通过这些数据报来查看两端的配置是否一致，<br>模式：<br>AUTO：被动协商状态，会对PAGP数据包做出响应，但不会主动发起协商（此为默认模式）<br>Desirable：主动协商状态，接口会发送PAGP数据包来主动与其他接口进行协商；<br>ON：这种模式会强制端口不使用PAGP而形成EC，这种模式下，接口不会交换PAgp数据包；<br>Non-silent：non-silent是Auto和Desirable模式使用的关键字；这种模式会使用PAGP来进行操作，使接口连接到一个通道组中，并使用这个接口来进行数据传输；</p>
<table>
<thead>
<tr>
<th>模式</th>
<th style="text-align:center">隧道</th>
<th>模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>on</td>
<td style="text-align:center">可以建立</td>
<td>on</td>
</tr>
<tr>
<td>on/auto/desirable</td>
<td style="text-align:center">无法建立</td>
<td>off</td>
</tr>
<tr>
<td>auto/desirable</td>
<td style="text-align:center">可以建立</td>
<td>Desirable</td>
</tr>
<tr>
<td>auto/on</td>
<td style="text-align:center">无法建立</td>
<td>auto</td>
</tr>
</tbody>
</table>
<p>这里需要注意的是On模式，使用这条命令等于手动将接口设置为了EC，而无需进行任何的协商；不过，只有另一端也设置了on之后，这一设置才会有效；因为on模式不会进行协商；</p>
<p><strong>LACP模式</strong>：<br>passive：被动协商模式，接口会对LACP数据包做出响应，但不会主动发起协商（默认模式）；<br>Active；主动协商状态，接口会通过发送LACP数据包主动与其他接口进行协商；<br>On：这种模式会强制端口形成EC，并且不需要PAGP或LACP；</p>
<table>
<thead>
<tr>
<th>模式</th>
<th style="text-align:center">隧道</th>
<th>模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>on</td>
<td style="text-align:center">可以建立</td>
<td>on</td>
</tr>
<tr>
<td>on/active/passive</td>
<td style="text-align:center">无法建立</td>
<td>off</td>
</tr>
<tr>
<td>active/passive</td>
<td style="text-align:center">可以建立</td>
<td>active</td>
</tr>
<tr>
<td>passive/on</td>
<td style="text-align:center">无法建立</td>
<td>passive</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="配置EC的指导方针：">配置EC的指导方针：</h2><ul>
<li>1，支持EC，最大8个接口支持一个EC；</li>
<li>2，速率及双工模式：所有接口必须工作在相同的速率和双攻模式下，如果一个接口处于关闭状态，那么这条链路就会失效，而流量就会通过EC捆绑的其他接口流向对端；</li>
<li>3，交换多口分析器与EC：如果某个端口被配置为SPAN目标端口，那么EC就不会建立起来；</li>
<li>4，三层EC：管理员应该为Portchannel逻辑接口分配三层地址，而不是为通道中的物理接口分配地址；</li>
<li>5，vlan匹配：必须将EC内的所有端口划分进相同的VLAN中，或者将其配置为TRUNK。两台交换机所有链路的Native vlan 也必须匹配；</li>
<li><ol>
<li>vlan的取值范围：如果两边允许的vlan范畴不同，那么接口就不会建立起EC；</li>
</ol>
</li>
<li>7，STP路径开销：管理员仅将STP端口路径开销设置为不同的值，不会使接口在建立EC的过程中出现不兼容的问题；</li>
<li>8，端口通道与接口配置的对比：在配置好EC后，任何在port channel 接口上的配置都会对EC构成影响，而所有应用在物理接口上的配置却只会影响到其配置的那个特定接口；</li>
</ul>
<hr>
<h2 id="EC负载分担选项：">EC负载分担选项：</h2><p>当EC建立起来之后，流量就会在多条链路之间负载分担；<br>如果负载分担基于目的IP地址的，那么大多数流量都会通过同一条物理链路进行转发，因为路由器只能通过一个IP地址去往EC束中对端接口，因此这个IP地址只会与第一个物理端口相关联，也就是说所有去往这个地址的流量都会通过同一条物理链路到达对端，而这会使负载分担机制变得很低，另一方面，如果负载分担是基于MAC地址执行的，那么流量就会相当好的在两条物理链路之间进行分担，因为每一台交换机上拥有每一台PC的MAC地址；</p>
<pre><code><span class="keyword">port</span>-channel  load-balance [<span class="keyword">type</span>]
<span class="keyword">type</span>: src-mac,dst-mac,src-dst-mac,src-ip,dst-ip,src-dst-ip,src-<span class="keyword">port</span>,dst-<span class="keyword">port</span>,src-dst-<span class="keyword">port</span>;
</code></pre><p><strong>基于源MAC的负载分担</strong>：来自不同主机的数据包就会从通道的不同端口中转发出去，而来自同一台主机的数据包也会从通道的同一个端口中转发出去，这就是实现了负载分担（而交换机学到的MAC地址并不会变化）；</p>
<p><strong>基于目的MAC的负载分担</strong>：设备会根据数据帧的目的MAC地址来判断应该将数据包通过通道的哪个端口转发出去，于是去往同一目的地的数据包就会从通道的同一个端口中转发出去，而去往不同主机的数据包则会从通道的不同端口中转发出去；</p>
<p><strong>基于源ip</strong>：来自不同的ip的数据包就会从不同的端口中转发，而同一个ip的数据包也会从同一个端口转发出去。</p>
<p><strong>基于目的ip</strong>：去往不同的ip地址的数据包慧聪不同的端口进行转发，而去往同一个ip的数据包会从同一个端口转发。</p>
<p><strong>基于src-ip,dst-ip</strong>：针对来自不同ip，去往不同目的ip的数据包从不同的端口进行转发，而从同一个源ip出发，去往同一个目的ip的数据包会从同一个端口转发。</p>
<p><strong>基于src-mac,dst-mac</strong>：针对来自不同的mac地址去网不同的目的mac地址的数据包从不同的端口转发，而从同一个源mac去往同一个目的mac的数据包会从同一个端口转发。</p>
<p>当前的网络拓扑中，比较适合src-ip+dst-ip和src-mac+dst-mac这两种负载分担方式。同时可能存在虚拟mac和虚拟ip的现象，可以选择基于src-mac+dst-mac的方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="Etherchannel" scheme="http://www.stackops.info/tags/Etherchannel/"/>
    
      <category term="RSTP" scheme="http://www.stackops.info/tags/RSTP/"/>
    
      <category term="portfast" scheme="http://www.stackops.info/tags/portfast/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用submin搭建图形化svn管理工具]]></title>
    <link href="http://www.stackops.info/2015/08/09/%E4%BD%BF%E7%94%A8submin%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BD%A2%E5%8C%96svn%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.stackops.info/2015/08/09/使用submin搭建图形化svn管理工具/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-19T08:52:27.074Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="具体的安装步骤分四个部分：">具体的安装步骤分四个部分：</h2><ul>
<li>安装subversion+mod_dav_svn模块。</li>
<li>apache安装</li>
<li>python安装</li>
<li>submin安装</li>
<li>apache配置</li>
<li>问题汇总<h3 id="1-安装subversion+mod_dav_svn模块：">1.安装subversion+mod_dav_svn模块：</h3></li>
</ul>
<p><strong>注意:</strong>这里一定要安装mod_dav_svn这个模块。subversion也直接用yum安装即可。</p>
<pre><code><span class="id">#yum</span> install subversion  mod_dav_svn
</code></pre><p>如果没有安装mod_dav_svn这个模块则会导致不能打开库，不能使用svn的客户端连接svn库。</p>
<p>提示如下错误：</p>
<pre><code>[root@submin modules]# /etc/init.<span class="keyword">d</span>/httpd restart

Stopping httpd:                                            [  OK  ]

Starting httpd: httpd: <span class="keyword">Syntax</span> <span class="keyword">error</span> <span class="keyword">on</span> <span class="keyword">line</span> 221 of /etc/httpd/<span class="keyword">conf</span>/httpd.<span class="keyword">conf</span>: <span class="keyword">Syntax</span> <span class="keyword">error</span> <span class="keyword">on</span> <span class="keyword">line</span> 2 of /etc/httpd/<span class="keyword">conf</span>.<span class="keyword">d</span>/subversion.<span class="keyword">conf</span>: Cannot load /etc/httpd/modules/mod_dav_svn.<span class="keyword">so</span> into server: /etc/httpd/modules/mod_dav_svn.<span class="keyword">so</span>: cannot <span class="keyword">open</span> shared object <span class="keyword">file</span>: <span class="keyword">No</span> such <span class="keyword">file</span> or directory

                                                           [FAILED]
</code></pre><p><strong>并且每次对apache的配置文件进行修改之后都要记得进行httpd服务的重启。</strong></p>
<h3 id="2_安装apache2-2-15(可以编译或者直接yum安装，视情况而定)">2 安装apache2.2.15(可以编译或者直接yum安装，视情况而定)</h3><hr>
<p>安装apache中间由于涉及到很多依赖的插件，因此需要先完成apr，pcre等安装才能进行apache安装。<br>具体的安装操作命令如下：</p>
<h4 id="a)_apr安装_//_#_这里直接用yum安装即可：_#yum_install_apr_apr-util">a) apr安装      // # 这里直接用yum安装即可： #yum  install  apr   apr-util</h4><pre><code>wget http:<span class="comment">//www.apache.org/dist/apr/apr-1.4.6.tar.gz</span>
tar -xzvf apr-<span class="number">1.4</span><span class="number">.6</span>.tar.gz
cd apr-<span class="number">1.4</span><span class="number">.6</span>
./configure --prefix=/opt/apr --enable-threads
make
make install
</code></pre><h4 id="b)_apr-util安装">b) apr-util安装</h4><pre><code>wget http:<span class="comment">//www.apache.org/dist/apr/apr-util-1.5.1.tar.gz</span>
tar -xzvf apr-util-<span class="number">1.5</span><span class="number">.1</span>.tar.gz
cd apr-util-<span class="number">1.5</span><span class="number">.1</span>
./configure --prefix=/opt/apr --with-apr=/opt/apr
make
make install
</code></pre><h4 id="c)_pcre安装_//#直接yum安装:_#yum_install_pcre">c) pcre安装    //#直接yum安装:  #yum install pcre</h4><pre><code>wget <span class="symbol">http:</span>/<span class="regexp">/sourceforge.net/projects</span><span class="regexp">/pcre/files</span><span class="regexp">/pcre/</span><span class="number">8.32</span>/pcre-<span class="number">8.32</span>.tar.gz/download
tar -xzvf pcre-<span class="number">8.32</span>.tar.gz
cd pcre-<span class="number">8.32</span>
./configure --prefix=<span class="regexp">/opt/pcre</span>
make
make install
</code></pre><h4 id="d)_apache2-4-4安装_//注意这里submin2对apache2-2支持更好些，并没选择2-4-4直接用yum安装apache2-2即可。#yum_install_httpd">d) apache2.4.4安装    //注意这里submin2对apache2.2支持更好些，并没选择2.4.4直接用yum安装apache2.2即可。#yum install httpd</h4><pre><code>wget http:<span class="comment">//www.apache.org/dist/httpd/httpd-2.4.4.tar.gz</span>
tar -xzvf httpd-<span class="number">2.4</span><span class="number">.4</span>.tar.gz
cd httpd-<span class="number">2.4</span><span class="number">.4</span>
./configure --prefix=<span class="regexp">/opt/</span>apache24 --<span class="keyword">with</span>-pcre=<span class="regexp">/opt/</span>pcre --<span class="keyword">with</span>-apr=<span class="regexp">/opt/</span>apr --<span class="keyword">with</span>-apr-util=<span class="regexp">/opt/</span>apr  --enable-cgid  --enable-cgi
make clean
make
make install
</code></pre><h3 id="2-_安装python2-7-3_#//这里还是简单起见，直接yum安装python2-6（系统默认就带的是python2-6）个人使用的是python2-6没有问题。">2. 安装python2.7.3  #//这里还是简单起见，直接yum安装python2.6（系统默认就带的是python2.6）个人使用的是python2.6没有问题。</h3><hr>
<p>由于submin需要使用到sqlite3数据库，因此在安装python2.7.3的时候，把sqlite3模块安装上。但2.7.3的安装脚本中存在bug，需要打最新的patch解决。具体的步骤如下：</p>
<pre><code>yum search sqlite3
yum <span class="operator"><span class="keyword">install</span> sqlite-devel
wget <span class="keyword">http</span>://python.org/<span class="keyword">ftp</span>/python/<span class="number">2.7</span><span class="number">.3</span>/Python-<span class="number">2.7</span><span class="number">.3</span>.tar.bz2
tar -xvjf Python-<span class="number">2.7</span><span class="number">.3</span>.tar.bz2
cd Python-<span class="number">2.7</span><span class="number">.3</span>
more README
wget <span class="keyword">http</span>://bugs.python.org/file25647/sqlite3_int64_v2.<span class="keyword">patch</span>
<span class="keyword">patch</span> -p1 &lt; sqlite3_int64_v2.<span class="keyword">patch</span>  #打补丁   
./configure
make
make <span class="keyword">install</span></span>
</code></pre><p>因为是通过sqlite这个数据库存储用户的账户名和密码。而且验证的时候也是直接从sqlite数据库中读取比较，所以不要忘记安装  apr-util-sqlite</p>
<pre><code><span class="id">#yum</span> install apr-util-sqlite
</code></pre><p>这个包。安装正常之后我们可以在/usr/lib64/apr-util-1/这个目录下看到apr_dbd_sqlite3.so这个动态库。</p>
<pre><code>[root@svnadmin conf]<span class="preprocessor"># cd /usr/lib64/apr-util-<span class="number">1</span>/</span>

[root@svnadmin apr-util-<span class="number">1</span>]<span class="preprocessor"># ls</span>

apr_dbd_sqlite3-<span class="number">1.</span>so  apr_dbd_sqlite3.so  apr_ldap-<span class="number">1.</span>so  apr_ldap.so

[root@svnadmin apr-util-<span class="number">1</span>]<span class="preprocessor"># ll</span>

total <span class="number">28</span>

-rwxr-xr-x. <span class="number">1</span> root root <span class="number">15792</span> Jun <span class="number">25</span>  <span class="number">2011</span> apr_dbd_sqlite3-<span class="number">1.</span>so

lrwxrwxrwx. <span class="number">1</span> root root    <span class="number">20</span> Aug <span class="number">13</span> <span class="number">15</span>:<span class="number">51</span> apr_dbd_sqlite3.so -&gt; apr_dbd_sqlite3-<span class="number">1.</span>so

-rwxr-xr-x. <span class="number">1</span> root root  <span class="number">9488</span> Jun <span class="number">25</span>  <span class="number">2011</span> apr_ldap-<span class="number">1.</span>so

lrwxrwxrwx. <span class="number">1</span> root root    <span class="number">13</span> Aug <span class="number">13</span> <span class="number">14</span>:<span class="number">25</span> apr_ldap.so -&gt; apr_ldap-<span class="number">1.</span>so
</code></pre><h2 id="3-_安装submin">3. 安装submin</h2><hr>
<p>安装submin过程比较简单的，直接使用python执行安装包中的安装脚本。</p>
<pre><code>wget http:<span class="comment">//supermind.nl/submin/current/submin-2.1.0-1.tar.gz</span>
tar -zxvf submin-<span class="number">2.1</span>.<span class="number">0</span>-<span class="number">1</span><span class="class">.tar</span><span class="class">.gz</span>
cd submin-<span class="number">2.1</span>.<span class="number">0</span>-<span class="number">1</span>
python setup<span class="class">.py</span> install  <span class="comment">//还是使用的python2.6安装。使用python2.7安装可能会报错：</span>

submin2-admin /var/lib/submin initenv liyahua@xxx<span class="class">.com</span>   <span class="comment">//这里是初始化submin的安装环境，指定submin的安装路径，根据自己的实际情况来选择，例如我们可以将svn的repository存放在/opt/svnroot目录下，就在这里进行修改。</span>
</code></pre><h2 id="4-_配置apache">4. 配置apache</h2><hr>
<p>配置apache的过程中需要修改submin的配置文件。默认安装路径是/var/lib/submin/，需要安装相应的模块：</p>
<h3 id="例如报错：">例如报错：</h3><p><img src="http://7xl5dz.com1.z0.glb.clouddn.com/12a90e46-b7dd-4480-8fc5-490ee586bbd5.png" alt="error"><br>报错有  <strong>mod_dbd</strong>和<strong>mod_auth_dbd</strong>两个模块没有加载。只需要在/etc/httpd/conf/httpd.conf中加载相关的模块就可以了。</p>
<pre><code><span class="keyword"><span class="common">LoadModule</span></span> authn_dbd_module modules/mod_authn_dbd.so
<span class="keyword"><span class="common">LoadModule</span></span> dbd_module modules/mod_dbd.so
</code></pre><p><strong>配置apache</strong>，主要是设置submin的conf文件，另外需要dbd,authz,cgi的module就可以。如果启动过程发现缺少，就打开配置即可。</p>
<p>另外一个问题就是在配置完毕后，访问submin报403错误，后查到是，submin的脚本是在apache2.2的基础上开发的，没有支持apache2.4.4，需要设置符合apache2.4.4的访问策略。//我这里使用的是apache2.2，所以没有上述的问题。</p>
<pre><code>[root@localhost ~]# tail -<span class="number">10</span>f /opt/apache24/conf/httpd.conf
<span class="preprocessor">#BrowserMatch "MSIE 10.0;" bad_DNT</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#RequestHeader unset DNT env=bad_DNT</span>
<span class="preprocessor">#</span>
Include /<span class="keyword">var</span>/lib/submin/conf/apache-webui-cgi.conf
Include /<span class="keyword">var</span>/lib/submin/conf/apache-svn.conf
</code></pre><p>这里附上我修改过后的submin的配置文件：</p>
<pre><code><span class="tag">&lt;Virtualhost *:80&gt;</span>
        <span class="keyword">serveradmin</span> liyahua@xxx.com
        <span class="keyword"><span class="common">Servername</span></span> svnadmin.xx.com
        <span class="keyword"><span class="common">DocumentRoot</span></span> /var/lib/submin/cgi-bin

     <span class="keyword"><span class="common">RewriteEngine</span></span> <span class="literal">On</span>
        <span class="keyword"><span class="common">RewriteRule</span></span> ^[/]?$ http://svnadmin.ci.com/submin<span class="sqbracket"> [L,R]</span>
<span class="tag">&lt;IfModule !mod_authn_dbd.c&gt;</span>
    <span class="comment"># Nothing should work, so show a page describing this</span>
    <span class="keyword">AliasMatch</span> <span class="string">"^/svn"</span> /usr/lib/python2.6/site-packages/submin/static/www/nomodauthndbd.html
    <span class="tag">&lt;Location "/svn"&gt;</span>
        <span class="keyword"><span class="common">Order</span></span> allow,deny
        <span class="keyword"><span class="common">Allow</span></span> from <span class="literal">all</span>
    <span class="tag">&lt;/Location&gt;</span>
<span class="tag">&lt;/IfModule&gt;</span>
<span class="tag">&lt;IfModule mod_authn_dbd.c&gt;</span>
    <span class="keyword">DBDriver</span> sqlite3
    <span class="keyword">DBDParams</span> <span class="string">"/var/lib/submin/conf/submin.db"</span>    #这是一个sqlite的数据库文件，存放了用户名和密码。

    <span class="tag">&lt;IfModule mod_dav_svn.c&gt;</span>
        <span class="tag">&lt;Location "/svn"&gt;</span>
            <span class="keyword">DAV</span> svn
            <span class="keyword">SVNParentPath</span> /var/lib/submin/svn   #这给目录里面存放了所有的svn库

            <span class="keyword">AuthType</span> Basic
            <span class="keyword">AuthName</span> <span class="string">"Subversion repository"</span>

            <span class="comment"># Authentication</span>
            <span class="keyword">AuthBasicProvider</span> dbd
            <span class="keyword">AuthDBDUserPWQuery</span> <span class="string">"SELECT password FROM users WHERE name=%s"</span>

            <span class="comment"># Authorization</span>
            <span class="keyword">AuthzSVNAccessFile</span> /var/lib/submin/conf/authz       #这个文件定义了不同的用户角色，具有不同的权限

            <span class="keyword">Satisfy</span> Any
            <span class="keyword">Require</span> valid-user
        <span class="tag">&lt;/Location&gt;</span>
    <span class="tag">&lt;/IfModule&gt;</span>

<span class="tag">&lt;/IfModule&gt;</span>
<span class="tag">&lt;/VirtualHost&gt;</span>
</code></pre><p>当通过浏览器访问web管理界面的时候：<a href="http://192.168.3.48/submin会提示你输入账户和密码，这时候你可以点击页面上的" target="_blank" rel="external">http://192.168.3.48/submin会提示你输入账户和密码，这时候你可以点击页面上的</a>  Forgot your  password , 然后会主动发一封邮件给root用户：<br>可以通过命令：# cat /var/spool/mail/root 查看发过来的重置密码的连接，我们可以通过该链接进行密码的修改：<br>    From: root@localhost.novalocal<br>    To: liyahua@xxx.com<br>    Subject: Submin password reset request<br>    Message-Id: <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#50;&#48;&#x31;&#x35;&#x30;&#x38;&#x31;&#51;&#48;&#x36;&#x32;&#x37;&#53;&#x35;&#46;&#x42;&#54;&#x38;&#x36;&#x46;&#54;&#49;&#x46;&#55;&#x44;&#x40;&#115;&#x76;&#x6e;&#97;&#x64;&#x6d;&#x69;&#x6e;&#46;&#110;&#111;&#x76;&#x61;&#108;&#x6f;&#x63;&#97;&#x6c;">&#50;&#48;&#x31;&#x35;&#x30;&#x38;&#x31;&#51;&#48;&#x36;&#x32;&#x37;&#53;&#x35;&#46;&#x42;&#54;&#x38;&#x36;&#x46;&#54;&#49;&#x46;&#55;&#x44;&#x40;&#115;&#x76;&#x6e;&#97;&#x64;&#x6d;&#x69;&#x6e;&#46;&#110;&#111;&#x76;&#x61;&#108;&#x6f;&#x63;&#97;&#x6c;</a><br>    Date: Thu, 13 Aug 2015 06:27:55 +0000 (UTC)</p>
<pre><code>You <span class="keyword">are</span> receiving this email because someone requested a password reset for
your account. If you don't know what this <span class="keyword">is</span> about, you can safely ignore it,
the reset request will expire automatically.

If you requested this passwod reset, you can reset your password by going to
the following URL:

http://svnadmin.novalocal/submin/password/admin/IANqikp4ZvSIFIWZ9sTDKoYr4OIYmTtBBcnYfkiXIc9y1oegJm

<span class="keyword">Kind</span> regards,
Submin

PS. The request was sent from submin2-admin

--B686F61F7D.1439447277/svnadmin.novalocal--
</code></pre><p>可以看到链接，在浏览器中打开链接，输入账户之后会再发一封邮件给你，里面包含了重置之后的密码。可以使用密码重新登陆submin。<br>如果没有收到邮件，在/var/spool/mail/目录下没有root这个用户，说明postfix没有正常启动。查看错误日志：<br>    [Tue Aug 18 14:05:21 2015] [error] [client 192.168.1.124] postdrop: warning: unable to look up public/pickup: No such file or directory, referer: <a href="http://svnadmin.ci.com/submin/password/" target="_blank" rel="external">http://svnadmin.ci.com/submin/password/</a><br>    [Tue Aug 18 14:06:38 2015] [error] [client 192.168.1.124] postdrop: warning: unable to look up public/pickup: No such file or directory, referer: <a href="http://svnadmin.ci.com/submin/password/" target="_blank" rel="external">http://svnadmin.ci.com/submin/password/</a></p>
<h4 id="解决方法是：">解决方法是：</h4><pre><code>mkfifo /<span class="keyword">var</span>/spool/<span class="keyword">postfix</span>/public/pickup
ps aux | grep mail
kill  掉运行的进程。
sudo /etc/<span class="keyword">init</span>.d/<span class="keyword">postfix</span> restart
重新启动<span class="keyword">postfix</span>即可
</code></pre><p>修改过密码后即可正常登录<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/5eede493-8e20-429e-95e6-eff22784e4f5.png" alt="login"><br>可以在这个图形化的界面中进行密码修改，用户，组，repository创建删除，权限的授予等svn账户管理,比较方便直观.</p>
<p>当所有的环境都安装完成之后，可以使用tortoise svn这个windows下的客户端连接svn库。<br><img src="http://7xl5dz.com1.z0.glb.clouddn.com/2b2576d2-5dc5-4e31-b3bb-3b4cbdfff49b.jpg" alt="tortois svn"><br>至此，svn的图形化管理工具submin已经安装完成了。<br>这里还是有必要提一下，submin几个比较重要的目录：</p>
<ul>
<li>1   /var/lib/submin/svn : 这个目录相当于svn仓库，存放了所有svn的repository，至关重要。</li>
<li>2   /var/lib/conf/  :  这个目录下存放了submin的所有配置文件，</li>
<li>3   /var/lib/conf/submin.db  ：这是一个sqlite数据库文件，里面存放的是svn的用户名和密码</li>
<li>4   /var/lib/conf/authz  ：这个文件里面存放了每个svn用户对应的权限。</li>
</ul>
<hr>
<h3 id="nginx反向代理：">nginx反向代理：</h3><p>当submin配置在内网的服务器时，我们无法通过外网打开submin进行svn的管理。这时候就需要用到nginx的反向代理特性。</p>
<p>这个功能的主要思想是（个人理解）：<br>    在nginx建立虚拟主机，根据用户请求的内容进行处理，当用户请求的内容匹配到nginx中虚拟主机定义的location之时，将会由nginx将请求转交给配置的nginx的虚拟主机。（工作中应该大多会使用nginx做前端代理，将请求负载分担给后端不同的apache服务器）。通常nginx启用80端口对外开放，httpd启用8080（自己定义的端口），将对80端口的请求代理到8080端口。</p>
<h4 id="首先nginx的安装：">首先nginx的安装：</h4><p>简单起见，使用yum安装，不过这里必须先使用nginx的源：</p>
<pre><code>rpm -ivh <span class="string">http:</span><span class="comment">//nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span>
yum info  nginx  ： 查看nginx包的信息。
yum install <span class="string">nginx    :</span>安装nginx
</code></pre><p>安装过nginx之后，其配置文件都在它的默认路径下，/etc/nginx/  </p>
<p>nginx的主要修改的配置文件有这么几个：nginx.conf  conf.d/default.conf  …等。我主要修改了default.conf这个配置文件，并加了一个svnadmin.ci.com.conf（nginx.conf 会include  conf.d/*.conf）</p>
<h4 id="简单default-conf配置文件：">简单default.conf配置文件：</h4><pre><code>server {
    listen       <span class="number">80</span>;
    server_name _;
    <span class="keyword">return</span> <span class="number">404</span>;
}    
    access_log  /var/<span class="built_in">log</span>/nginx/access.<span class="built_in">log</span>  main;
    error_page  <span class="number">404</span>            /usr/share/nginx/html/<span class="number">404.</span>html;
</code></pre><h4 id="svnadmin-ci-com-conf配置文件：（很简陋，小白手笔。）">svnadmin.ci.com.conf配置文件：（很简陋，小白手笔。）</h4><pre><code>server {
        listen       <span class="number">80</span>;
        server_name  <span class="number">192.168</span>.<span class="number">3.47</span>;
        location /        {
                proxy_pass  http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">88</span>;
                proxy_set_header   Host   <span class="variable">$host</span>;
                proxy_set_header   X-Real-IP        <span class="variable">$remote</span>_addr;
                proxy_set_header   X-Forwarded-For  <span class="variable">$proxy</span>_add_x_forwarded_for;
                proxy_hide_header X-Powered-By;
                client_max_body_size <span class="number">200</span>M;

        }
        location /submin/       {
            proxy_pass  http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">88</span>;
            proxy_set_header   Host   <span class="variable">$host</span>;
            proxy_set_header   X-Real-IP        <span class="variable">$remote</span>_addr;
            proxy_set_header   X-Forwarded-For  <span class="variable">$proxy</span>_add_x_forwarded_for;
            proxy_hide_header X-Powered-By;
        }
}
</code></pre><p>然后重启nginx服务即可，在浏览器中输入 192.168.3.47/submin将会代理到192.168.3.47:88/submin这里。</p>
<hr>
<h3 id="使用submin进行submin库的迁移备份。">使用submin进行submin库的迁移备份。</h3><pre><code>当前线上已经有一台运行<span class="keyword">submin </span> svn的服务器，可以再配置一台作为备用，并且同步原来的svn库。
</code></pre><p>使用submin进行svn库的同步，关键的主要有三个文件：</p>
<pre><code><span class="regexp">/var/</span>lib<span class="regexp">/submin/</span>conf/authz  这个文件存放的是用户对应的权限信息。
<span class="regexp">/var/</span>lib<span class="regexp">/submin/</span>conf/submindb   ：这个存放的是用户的用户名和密码。
<span class="regexp">/opt/</span>svnroot  ：个人指定的用于存储svn代码库。
</code></pre><p>迁移主要是把这三个文件拷贝到对应的位置。如果作为从库，则需要定期对数据库进行同步。个人想法是使用crontab在每天晚上12点左右使用rsync脚本实现增量备份的功能。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="submin" scheme="http://www.stackops.info/tags/submin/"/>
    
      <category term="svn" scheme="http://www.stackops.info/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建文档]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack搭建文档/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T03:39:45.748Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h3 id="openstack：">openstack：</h3><pre><code>官方文档中有两种openstack的架构，一种是采用openstack的<span class="keyword">*</span><span class="keyword">*</span>neutron<span class="keyword">*</span><span class="keyword">*</span>网络模型来搭建，需要至少三个节点：compute，controller和network。另一种是使用nova-network这个模型，相对来说比较简单\(包括三种模式：flat,dhcp flat,vlan\)
</code></pre><h4 id="一，硬件的需求：(服务器最好都要支持硬件虚拟化功能)">一，硬件的需求：(服务器最好都要支持硬件虚拟化功能)</h4><pre><code>三个节点要求：
    Controller Node: <span class="number">1</span> processor, <span class="number">2</span> GB memory, and <span class="number">5</span> GB storage
    Network Node: <span class="number">1</span> processor, <span class="number">512</span> MB memory, and <span class="number">5</span> GB storage
    Compute Node: <span class="number">1</span> processor, <span class="number">2</span> GB memory, and <span class="number">10</span> GB storage
</code></pre><h4 id="网卡要求：">网卡要求：</h4><pre><code>compute节点：<span class="number">2</span> NIC
controller节点：<span class="number">1</span> NIC
network节点： <span class="number">3</span> NIC  (因为三台服务器的网卡都只有两块。暂时不满足硬件需求，第一次尝试搭建的时候没注意，按照三个节点搭建，并且没配置tunnel接口，导致网络不通）。
</code></pre><h4 id="网络名称解释：">网络名称解释：</h4><p><strong>外部网络</strong>: 公共网络，外部或Internet可以访问的网络<br><strong>内部网络</strong>: 私有网络，仅内部访问的网络<br><strong>管理网络</strong>: 用于OpenStack组件以及MySQL DB Server, RabbitMQmessaging server之间的通信<br>这次采用的网络拓扑架构比较简单，网络模式选择的是nova-network的FlatDHCP，只配置了两个节点，compute和controller节点。最多只需要两个NIC，现有的服务器满足需求。具体选型根据大家现有的硬件配置来进行选择，也可以在一台服务器上配置所有服务，只不过性能上会相对来说比较差。<br>后续会详细介绍各网络模型。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建二]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BA%8C/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack-基础环境搭建二/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T03:00:50.443Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="NTP服务的安装_：">NTP服务的安装 ：</h2><p>（1），安装NTP服务实现各个节点之间的时间同步(这点很重要，如果各节点之间时间不同步会导致后来的服务异常)。</p>
<h2 id="controller节点：">controller节点：</h2><pre><code><span class="number">1.</span> 安装NTP服务：
   <span class="preprocessor">#apt-get install ntp </span>
<span class="number">2.</span> 修改/etc/ntp.conf配置文件：
server controller iburst
<span class="keyword">restrict</span> -<span class="number">4</span> <span class="keyword">default</span> kod notrap nomodify
<span class="keyword">restrict</span> -<span class="number">6</span> <span class="keyword">default</span> kod notrap nomodify   
（删掉nopeer and noquery ）
如果 /var/lib/ntp/ntp.conf文件存在，则删除。
<span class="number">3.</span> 重启ntp的服务
<span class="preprocessor">#  service ntp restart</span>
</code></pre><h2 id="其他节点：">其他节点：</h2><pre><code><span class="number">1.</span> 安装NTP服务
 <span class="preprocessor">#apt-get install  ntp</span>
<span class="number">2.</span> 修改/etc/ntp.conf的配置文件
 server controller iburst 
<span class="number">3.</span> 重启ntp服务
 <span class="preprocessor">#service  ntp restart</span>
</code></pre><h3 id="NTP同步状态查看：">NTP同步状态查看：</h3><pre><code>root@compute:~<span class="preprocessor"># ntpq -c peers</span>
 remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">796</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">19.549</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1067</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>

root@compute:~<span class="preprocessor"># ntpq -c assoc</span>
ind assid status  conf reach auth condition  last_event cnt
===========================================================
  <span class="number">1</span> <span class="number">52871</span>  <span class="number">9424</span>   yes   yes  none candidate   reachable  <span class="number">2</span>
  <span class="number">2</span> <span class="number">52872</span>  <span class="number">963</span>a   yes   yes  none  sys.peer    sys_peer  <span class="number">3</span>
</code></pre><p>可以很明显看出来服务器之间已经处于同步状态，计算节点都和控制节点建立同步关系了。<br>同时我们可以通过命令</p>
<pre><code><span class="preprocessor">#watch  ntp -p   动态的查看ntp状态</span>
very <span class="number">2.0</span>s: ntpq -p                                      Tue Aug <span class="number">11</span> <span class="number">23</span>:<span class="number">23</span>:<span class="number">04</span> <span class="number">2015</span>

 remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">448</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">20.335</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1800</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>
</code></pre><p>我来解释一下其中的含义</p>
<h3 id="remote:_它指的就是本地机器所连接的远程NTP服务器">remote: 它指的就是本地机器所连接的远程NTP服务器</h3><h3 id="refid:_它指的是给远程服务器(e-g-_91-189-89-199_)提供时间同步的服务器">refid: 它指的是给远程服务器(e.g. 91.189.89.199 )提供时间同步的服务器</h3><h3 id="st:_远程服务器的层级别（stratum）-_由于NTP是层型结构,有顶端的服务器,多层的Relay_Server再到客户端-_所以服务器从高到低级别可以设定为1-16-_为了减缓负荷和网络堵塞,原则上应该避免直接连接到级别为1的服务器的-">st: 远程服务器的层级别（stratum）. 由于NTP是层型结构,有顶端的服务器,多层的Relay Server再到客户端. 所以服务器从高到低级别可以设定为1-16. 为了减缓负荷和网络堵塞,原则上应该避免直接连接到级别为1的服务器的.</h3><h3 id="t:_这个…-我也不知道啥意思^_^">t: 这个…..我也不知道啥意思^_^</h3><h3 id="when:_我个人把它理解为一个计时器用来告诉我们还有多久本地机器就需要和远程服务器进行一次时间同步">when: 我个人把它理解为一个计时器用来告诉我们还有多久本地机器就需要和远程服务器进行一次时间同步</h3><h3 id="poll:_本地机和远程服务器多少时间进行一次同步(单位为秒)-_在一开始运行NTP的时候这个poll值会比较小,那样和服务器同步的频率也就增加了,可以尽快调整到正确的时间范围-之后poll值会逐渐增大,同步的频率也就会相应减小">poll: 本地机和远程服务器多少时间进行一次同步(单位为秒). 在一开始运行NTP的时候这个poll值会比较小,那样和服务器同步的频率也就增加了,可以尽快调整到正确的时间范围.之后poll值会逐渐增大,同步的频率也就会相应减小</h3><h3 id="reach:_这是一个八进制值,用来测试能否和服务器连接-每成功连接一次它的值就会增加">reach: 这是一个八进制值,用来测试能否和服务器连接.每成功连接一次它的值就会增加</h3><h3 id="delay:_从本地机发送同步要求到服务器的round_trip_time">delay: 从本地机发送同步要求到服务器的round trip time</h3><h3 id="offset:_这是个最关键的值,_它告诉了我们本地机和服务器之间的时间差别-_offset越接近于0,我们就和服务器的时间越接近">offset: 这是个最关键的值, 它告诉了我们本地机和服务器之间的时间差别. offset越接近于0,我们就和服务器的时间越接近</h3><h3 id="jitter:_这是一个用来做统计的值-_它统计了在特定个连续的连接数里offset的分布情况-_简单地说这个数值的绝对值越小我们和服务器的时间就越精确">jitter: 这是一个用来做统计的值. 它统计了在特定个连续的连接数里offset的分布情况. 简单地说这个数值的绝对值越小我们和服务器的时间就越精确</h3><h3 id="NTP安全设置(restrict)">NTP安全设置(restrict)</h3><h3 id="运行一个NTP_Server不需要占用很多的系统资源,所以也不用专门配置独立的服务器,就可以给许多client提供时间同步服务但是一些基本的安全设置还是很有必要的。">运行一个NTP Server不需要占用很多的系统资源,所以也不用专门配置独立的服务器,就可以给许多client提供时间同步服务但是一些基本的安全设置还是很有必要的。</h3><h3 id="那么这里一个很简单的思路就是第一我们只允许局域网内一部分的用户连接到我们的服务器-_第二个就是这些client不能修改我们服务器上的时间关于权限设定部分">那么这里一个很简单的思路就是第一我们只允许局域网内一部分的用户连接到我们的服务器. 第二个就是这些client不能修改我们服务器上的时间关于权限设定部分</h3><h3 id="权限的设定主要以_restrict_这个参数来设定，主要的语法为：">权限的设定主要以 restrict 这个参数来设定，主要的语法为：</h3><pre><code><span class="label">restrict</span> <span class="literal">IP</span>地址 mask 子网掩码 参数 
</code></pre><h3 id="其中_IP_可以是IP地址，也可以是_default_，default_就是指所有的IP">其中 IP 可以是IP地址，也可以是 default ，default 就是指所有的IP</h3><ul>
<li>参数有以下几个 ： <h3 id="ignore_：关闭所有的_NTP_联机服务">ignore　：关闭所有的 NTP 联机服务</h3><h3 id="nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。">nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。</h3><h3 id="notrust_：客户端除非通过认证，否则该客户端来源将被视为不信任子网">notrust ：客户端除非通过认证，否则该客户端来源将被视为不信任子网</h3><h3 id="noquery_：不提供客户端的时间查询">noquery ：不提供客户端的时间查询</h3></li>
</ul>
<p>在安装Openstack的各个功能组件之前，先安装Openstack的packages：（在所有节点上都安装）</p>
<pre><code><span class="id">#apt-get</span> install ubuntu-cloud-keyring
<span class="id">#echo</span> <span class="string">"deb http://ubuntu-cloud.archive.canonical.com/ubuntu"</span> \
<span class="string">"trusty-updates/juno main"</span> &gt; /etc/apt/sources<span class="class">.list</span><span class="class">.d</span>/cloudarchive-juno.list
</code></pre><p>更新系统上的包：</p>
<pre><code>#apt-<span class="built_in">get</span> update &amp;&amp; apt-<span class="built_in">get</span> <span class="built_in">dist</span>-upgrade  
</code></pre><p>如果不安装openstack库，直接安装keystone，会keystone能够安装成功，但是keystone启动后，接着就会失败。造成keystone为unknown instance</p>
<h2 id="（2），接着安装MYSQL的数据库**：">（2），接着安装MYSQL的数据库**：</h2><p>Openstack的主要组件都需要数据库的支持，Openstack支持MySQL，PostgreSQL，SQLite。这里选择mysql作为数据库。数据库安装在controller节点上。<br> (补充： MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险).</p>
<pre><code>## controller节点安装：
        1. 安装包：#apt-get <span class="operator"><span class="keyword">install</span> mariadb-<span class="keyword">server</span> python-mysqldb
               （安装完会提示输入root密码）
        <span class="number">2.</span> 修改/etc/mysql/my.cnf这个配置文件，修改以下内容：
        [mysqld]
        ...
        bind-address = <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>  
        <span class="keyword">default</span>-<span class="keyword">storage</span>-<span class="keyword">engine</span> = <span class="keyword">innodb</span>
        innodb_file_per_table
        <span class="keyword">collation</span>-<span class="keyword">server</span> = utf8_general_ci
        init-<span class="keyword">connect</span> = <span class="string">'SET NAMES utf8'</span>
        <span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span> = utf8

        <span class="number">3.</span> 重启服务：# service mysql restart
        <span class="number">4.</span> 保护数据库服务：# mysql_secure_installation</span>
</code></pre><h2 id="（3），安装Messaging服务：（通常安装在controller节点上）。">（3），安装Messaging服务：（通常安装在controller节点上）。</h2><pre><code><span class="number">1.</span> Openstack组件之间的通需要通过支持AMQP的Messaging的服务软件，Openstack支持的有RabbitMQ，Qpid，和ZeroMQ，这里安装的RabbitMQ，
<span class="preprocessor"># apt-get install rabbitmq-server</span>
<span class="number">2.</span> 安装RabbitMQ服务软件时，RabbitMQ默认用户guest的密码是guest，我们需要修改一下guest密码： 
<span class="preprocessor"># rabbitmqctl change_password guest RABBIT_PASS   (替换成你用的密码)</span>
<span class="number">3.</span> 安装完之后需要查看RabbitMQ的version
root@controller:~<span class="preprocessor">#  rabbitmqctl status | grep rabbit</span>
Status of node rabbit@controller ...
{running_applications,[{rabbit,<span class="string">"RabbitMQ"</span>,<span class="string">"3.2.4"</span>},
<span class="number">4.</span> 如果 <span class="number">3.3</span><span class="number">.0</span> 或则更新，则需要配置允许guest 账户，允许访问
修改配置文件/etc/rabbitmq/rabbitmq.config
添加如下内容：  [{rabbit, [{loopback_users, []}]}]. 
<span class="number">5</span>，重启服务：
<span class="preprocessor"># service rabbitmq-server restart </span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://www.stackops.info/tags/AMQP/"/>
    
      <category term="NTP" scheme="http://www.stackops.info/tags/NTP/"/>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建一]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%80/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack-基础环境搭建一/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T10:48:06.023Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p> <strong>操作系统系统选择</strong>：使用ubuntu server  ubuntu-14.04.2-server-amd64  作为服务器的操作系统。<br> 第一次给服务器安装操作系统，我很low的拿着个小U盘来安装，使用UltraISO制作系统镜像。安装系统前对磁盘做了RAID5。</p>
<p>安装完操作系统之后，需要修改接口的ip地址，使服务器能够连得上外网(不能简单的按照官方文档配置，必须切合实际，毕竟还需要安装组件),具体接口的配置如下：</p>
<h3 id="controller节点：">controller节点：</h3><pre><code>root@controller:~<span class="preprocessor"># cat /etc/network/interfaces</span>
\<span class="preprocessor"># This file describes the network interfaces available on your system</span>
\<span class="preprocessor"># and how to activate them. For more information, see interfaces(<span class="number">5</span>).</span>

\<span class="preprocessor"># The loopback network interface</span>
<span class="keyword">auto</span> lo
iface lo inet loopback
<span class="keyword">auto</span> eth0
iface eth0 inet <span class="keyword">static</span>
address <span class="number">192.168</span><span class="number">.3</span><span class="number">.10</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
gateway <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>
<span class="keyword">auto</span> eth1
iface eth1 inet <span class="keyword">static</span>
address <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> 
</code></pre><p>(这里发生过一件很挫的事，居然在同一台服务器上配置了两个网关，导致有的时候网关是10.0.0.1一会儿又编程192.168.3.254.使得网络出现故障)。</p>
<h3 id="修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。">修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。</h3><pre><code>root@controller:~<span class="preprocessor"># cat /etc/hosts</span>
\<span class="preprocessor">#<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    localhost</span>
\<span class="preprocessor">#<span class="number">127.0</span><span class="number">.1</span><span class="number">.1</span>    controller</span>

\<span class="preprocessor"># controller    <span class="number">192.168</span><span class="number">.3</span><span class="number">.10</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>       controller
\<span class="preprocessor">#compute    <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.31</span>       compute
\<span class="preprocessor">#compute1    <span class="number">192.168</span><span class="number">.3</span><span class="number">.11</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.41</span>    compute1
\<span class="preprocessor">#compute2    <span class="number">192.168</span><span class="number">.3</span><span class="number">.14</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>    compute2

<span class="preprocessor"># The following lines are desirable for IPv6 capable hosts</span>
<span class="preprocessor">#::<span class="number">1</span>     localhost ip6-localhost ip6-loopback</span>
<span class="preprocessor">#ff02::<span class="number">1</span> ip6-allnodes</span>
<span class="preprocessor">#ff02::<span class="number">2</span> ip6-allrouters</span>
</code></pre><p>这里注释掉了127.0.0.1。这里使用hosts为以后网络环境发生变化提供了很高的可扩展性，比如我从公司的内网192.168.0.0/24迁移到192.168.3.0/24段，需要进行改变的内容就比较小(因为很多配置文件中用到ip地址进行彼此之间信息交互,而是用host则比较方便)目前的博客是在我迁移过后做的.</p>
<h3 id="compute节点：">compute节点：</h3><pre><code>root@compute:~<span class="preprocessor"># cat /etc/network/interfaces</span>
<span class="preprocessor"># This file describes the network interfaces available on your system</span>
<span class="preprocessor"># and how to activate them. For more information, see interfaces(<span class="number">5</span>).</span>

<span class="preprocessor"># The loopback network interfaces</span>
<span class="keyword">auto</span> lo
iface lo inet loopback

<span class="keyword">auto</span> eth0
iface eth0 inet <span class="keyword">static</span>
<span class="preprocessor">#address <span class="number">192.168</span><span class="number">.0</span><span class="number">.142</span></span>
address <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
gateway <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>
<span class="preprocessor">#auto eth0 </span>
iface eth0 inet manual
    up ip link <span class="built_in">set</span> dev $IFACE up
    down ip link <span class="built_in">set</span> dev $IFACE down
<span class="keyword">auto</span> eth1
iface eth1 inet <span class="keyword">static</span>
address <span class="number">10.0</span><span class="number">.0</span><span class="number">.31</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
</code></pre><p>###　修改/etc/hosts配置文件，关联IP和name<br>    root@compute:~# cat /etc/hosts</p>
<pre><code><span class="hexcolor">#127</span>.<span class="number">0.0</span>.<span class="number">1</span>    localhost
<span class="hexcolor">#127</span>.<span class="number">0.1</span>.<span class="number">1</span>    compute
<span class="id">#computel</span>
<span class="number">10.0</span>.<span class="number">0.31</span>    compute
<span class="id">#controller</span>
<span class="number">10.0</span>.<span class="number">0.11</span>    controller
<span class="id">#The</span> following lines are desirable <span class="keyword">for</span> IPv6 capable hosts
::<span class="number">1</span>     localhost ip6-localhost ip6-loopback
ff02::<span class="number">1</span> ip6-allnodes
ff02::<span class="number">2</span> ip6-allrouters
</code></pre><h4 id="同时修改两个节点的DNS配置文件为：/etc/resolv-conf">同时修改两个节点的DNS配置文件为：/etc/resolv.conf</h4><p>添加：<br>    nameserver  114.114.114.114<br>///使用电信的DNS服务器。其实这样修改在ubuntu系统环境中时不对的，只能够暂时生效，如果想要永久生效，必须修改配置文件/etc/resolvconf/resolv.conf.d/base  每次开机都会从这个配置文件加载dns到/etc/resolv.conf这个配置文件中,这一点和centos不同。</p>
<p>基本的网络地址配置完成之后，能够实现：</p>
<ul>
<li>1），compute和controller之间相互ping通，包括10.0.0.0网段和192.168.3.0网段</li>
<li>2），都能够访问外网。</li>
<li>3），都能够进行地址解析。</li>
</ul>
<h3 id="接着配置ubuntu的更新源：这里使用的是阿里云的更新源。_配置文件是：/etc/apt/source-list">接着配置ubuntu的更新源：这里使用的是阿里云的更新源。 配置文件是：<strong>/etc/apt/source.list</strong></h3><pre><code>root<span class="property">@controller</span>:~<span class="comment"># cat /etc/apt/sources.list</span>
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-security main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-security main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse
</code></pre><p>配置完更新源之后进行更新：</p>
<pre><code>#apt-<span class="built_in">get</span>  <span class="keyword">update</span>
</code></pre><p>然后安装ssh服务，实现远程访问：</p>
<pre><code><span class="id">#apt-get</span> install  ssh  -y
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[first]]></title>
    <link href="http://www.stackops.info/2015/08/09/first/"/>
    <id>http://www.stackops.info/2015/08/09/first/</id>
    <published>2015-08-09T08:37:45.000Z</published>
    <updated>2015-08-12T02:57:16.322Z</updated>
    <content type="html"><![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]>
    </summary>
    
      <category term="hexo" scheme="http://www.stackops.info/tags/hexo/"/>
    
  </entry>
  
</feed>