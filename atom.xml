<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Leoli's  blog]]></title>
  <subtitle><![CDATA[Follow your heart]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://liyahua.github.io//"/>
  <updated>2015-08-12T02:51:10.838Z</updated>
  <id>http://liyahua.github.io//</id>
  
  <author>
    <name><![CDATA[liyahua]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[OpenStack搭建文档]]></title>
    <link href="http://liyahua.github.io/2015/08/09/OpenStack%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
    <id>http://liyahua.github.io/2015/08/09/OpenStack搭建文档/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-12T02:51:10.838Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p><strong>openstack</strong>：<br>    官方文档中有两种openstack的架构，一种是采用openstack的neutron网络模型来搭建，需要至少三个节点：compute，controller和network。<br><strong>一，硬件的需求：</strong><br>    <em>三个节点要求：</em><br>        Controller Node: 1 processor, 2 GB memory, and 5 GB storage<br>        Network Node: 1 processor, 512 MB memory, and 5 GB storage<br>        Compute Node: 1 processor, 2 GB memory, and 10 GB storage<br><strong>网卡要求：</strong><br>    <em>compute节点</em>：2 NIC<br>    <em>controller节点</em>：1 NIC<br>    <em>network节点</em>： 3 NIC  (因为三台服务器的网卡都只有两块。暂时不满足硬件需求，第一次尝试搭建的时候没注意，按照三个节点搭建，并且没配置tunnel接口，导致网络不通）。</p>
<p><em>外部网络</em>:公共网络，外部或Internet可以访问的网络<br><em>内部网络</em>:私有网络，仅内部访问的网络<br><em>管理网络</em>:用于OpenStack组件以及MySQL DB Server, RabbitMQmessaging server之间的通信<br>这次采用的网络拓扑架构比较简单，网络模式选择的是nova-network的FlatDHCP，只配置了两个节点，compute和controller节点。最多只需要两个NIC，现有的服务器满足需求。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://liyahua.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建二]]></title>
    <link href="http://liyahua.github.io/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BA%8C/"/>
    <id>http://liyahua.github.io/2015/08/09/OpenStack-基础环境搭建二/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-12T03:52:34.469Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p><strong>NTP服务的安装</strong>：<br>（1），安装NTP服务实现各个节点之间的时间同步(这点很重要，如果各节点之间时间不同步会导致后来的服务异常)。<br><em>controller</em>节点：</p>
<pre><code><span class="number">1.</span> 安装NTP服务：
    <span class="preprocessor">#apt-get install ntp </span>
<span class="number">2.</span> 修改/etc/ntp.conf配置文件：
server controller iburst
<span class="keyword">restrict</span> -<span class="number">4</span> <span class="keyword">default</span> kod notrap nomodify
<span class="keyword">restrict</span> -<span class="number">6</span> <span class="keyword">default</span> kod notrap nomodify  
（删掉nopeer and noquery ）
如果 /var/lib/ntp/ntp.conf文件存在，则删除。
<span class="number">3.</span> 重启ntp的服务
<span class="preprocessor">#  service ntp restart</span>
</code></pre><p><em>其他节点</em>：</p>
<pre><code><span class="number">1.</span> 安装NTP服务
 <span class="preprocessor">#apt-get install  ntp</span>
<span class="number">2.</span> 修改/etc/ntp.conf的配置文件
 server controller iburst 
<span class="number">3.</span> 重启ntp服务
 <span class="preprocessor">#service  ntp restart</span>
</code></pre><p><em>NTP同步状态查看</em>：<br>    root@compute:~# ntpq -c peers</p>
<pre><code> remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">796</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">19.549</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1067</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>

root@compute:~<span class="preprocessor"># ntpq -c assoc</span>
ind assid status  conf reach auth condition  last_event cnt
===========================================================
  <span class="number">1</span> <span class="number">52871</span>  <span class="number">9424</span>   yes   yes  none candidate   reachable  <span class="number">2</span>
  <span class="number">2</span> <span class="number">52872</span>  <span class="number">963</span>a   yes   yes  none  sys.peer    sys_peer  <span class="number">3</span>
</code></pre><p>可以很明显看出来服务器之间已经处于同步状态，计算节点都和控制节点建立同步关系了。<br>同时我们可以通过命令</p>
<pre><code><span class="preprocessor">#watch  ntp -p   动态的查看ntp状态</span>
very <span class="number">2.0</span>s: ntpq -p                                      Tue Aug <span class="number">11</span> <span class="number">23</span>:<span class="number">23</span>:<span class="number">04</span> <span class="number">2015</span>

 remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">448</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">20.335</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1800</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>
</code></pre><p>现在我就来解释一下其中的含义<br><em>remote</em>: 它指的就是本地机器所连接的远程NTP服务器<br><em>refid</em>: 它指的是给远程服务器(e.g. 91.189.89.199 )提供时间同步的服务器<br><em>st</em>: 远程服务器的层级别（stratum）. 由于NTP是层型结构,有顶端的服务器,多层的Relay Server再到客户端. 所以服务器从高到低级别可以设定为1-16. 为了减缓负荷和网络堵塞,原则上应该避免直接连接到级别为1的服务器的.<br><em>t</em>: 这个…..我也不知道啥意思^_^<br><em>when</em>: 我个人把它理解为一个计时器用来告诉我们还有多久本地机器就需要和远程服务器进行一次时间同步<br><em>poll</em>: 本地机和远程服务器多少时间进行一次同步(单位为秒). 在一开始运行NTP的时候这个poll值会比较小,那样和服务器同步的频率也就增加了,可以尽快调整到正确的时间范围.之后poll值会逐渐增大,同步的频率也就会相应减小<br><em>reach</em>: 这是一个八进制值,用来测试能否和服务器连接.每成功连接一次它的值就会增加<br><em>delay</em>: 从本地机发送同步要求到服务器的round trip time<br><em>offset</em>: 这是个最关键的值, 它告诉了我们本地机和服务器之间的时间差别. offset越接近于0,我们就和服务器的时间越接近<br><em>jitter</em>: 这是一个用来做统计的值. 它统计了在特定个连续的连接数里offset的分布情况. 简单地说这个数值的绝对值越小我们和服务器的时间就越精确<br><em>NTP安全设置(restrict)</em><br>运行一个NTP Server不需要占用很多的系统资源,所以也不用专门配置独立的服务器,就可以给许多client提供时间同步服务, 但是一些基本的安全设置还是很有必要的<br>那么这里一个很简单的思路就是第一我们只允许局域网内一部分的用户连接到我们的服务器. 第二个就是这些client不能修改我们服务器上的时间<br>关于权限设定部分<br>权限的设定主要以 restrict 这个参数来设定，主要的语法为：<br>restrict IP地址 mask 子网掩码 参数<br>其中 IP 可以是IP地址，也可以是 default ，default 就是指所有的IP<br>参数有以下几个：<br><em>ignore</em>　：关闭所有的 NTP 联机服务<br><em>nomodify</em>：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。<br><em>notrust</em> ：客户端除非通过认证，否则该客户端来源将被视为不信任子网<br><em>noquery</em> ：不提供客户端的时间查询</p>
<p>在安装Openstack的各个功能组件之前，先安装Openstack的packages：（在所有节点上都安装）</p>
<pre><code><span class="id">#apt-get</span> install ubuntu-cloud-keyring
<span class="id">#echo</span> <span class="string">"deb http://ubuntu-cloud.archive.canonical.com/ubuntu"</span> \
<span class="string">"trusty-updates/juno main"</span> &gt; /etc/apt/sources<span class="class">.list</span><span class="class">.d</span>/cloudarchive-juno.list
</code></pre><p>更新系统上的包：</p>
<pre><code>#apt-<span class="built_in">get</span> update &amp;&amp; apt-<span class="built_in">get</span> <span class="built_in">dist</span>-upgrade  
</code></pre><p>如果不安装openstack库，直接安装keystone，会keystone能够安装成功，但是keystone启动后，接着就会失败。造成keystone为unknown instance</p>
<p><strong>（2），接着安装MYSQL的数据库</strong>：<br>Openstack的主要组件都需要数据库的支持，Openstack支持MySQL，PostgreSQL，SQLite。这里选择mysql作为数据库。数据库安装在controller节点上。<br> (补充： MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险).<br>    <em>controller</em>节点安装：</p>
<pre><code>1. 安装包：#apt-get <span class="operator"><span class="keyword">install</span> mariadb-<span class="keyword">server</span> python-mysqldb
       （安装完会提示输入root密码）
<span class="number">2.</span> 修改/etc/mysql/my.cnf这个配置文件，修改以下内容：
[mysqld]
...
bind-address = <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>  
<span class="keyword">default</span>-<span class="keyword">storage</span>-<span class="keyword">engine</span> = <span class="keyword">innodb</span>
innodb_file_per_table
<span class="keyword">collation</span>-<span class="keyword">server</span> = utf8_general_ci
init-<span class="keyword">connect</span> = <span class="string">'SET NAMES utf8'</span>
<span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span> = utf8

<span class="number">3.</span> 重启服务：# service mysql restart
<span class="number">4.</span> 保护数据库服务：# mysql_secure_installation</span>
</code></pre><p><strong>（3），安装Messaging服务</strong>：（通常安装在controller节点上）。</p>
<pre><code><span class="number">1.</span> Openstack组件之间的通需要通过支持AMQP的Messaging的服务软件，Openstack支持的有RabbitMQ，Qpid，和ZeroMQ，这里安装的RabbitMQ，
<span class="preprocessor"># apt-get install rabbitmq-server</span>
<span class="number">2.</span> 安装RabbitMQ服务软件时，RabbitMQ默认用户guest的密码是guest，我们需要修改一下guest密码： 
<span class="preprocessor"># rabbitmqctl change_password guest RABBIT_PASS   (替换成你用的密码)</span>
<span class="number">3.</span> 安装完之后需要查看RabbitMQ的version
root@controller:~<span class="preprocessor">#  rabbitmqctl status | grep rabbit</span>
Status of node rabbit@controller ...
{running_applications,[{rabbit,<span class="string">"RabbitMQ"</span>,<span class="string">"3.2.4"</span>},
<span class="number">4.</span> 如果 <span class="number">3.3</span><span class="number">.0</span> 或则更新，则需要配置允许guest 账户，允许访问
修改配置文件/etc/rabbitmq/rabbitmq.config
添加如下内容：  [{rabbit, [{loopback_users, []}]}]. 
<span class="number">5</span>，重启服务：
<span class="preprocessor"># service rabbitmq-server restart </span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://liyahua.github.io/tags/AMQP/"/>
    
      <category term="NTP" scheme="http://liyahua.github.io/tags/NTP/"/>
    
      <category term="openstack" scheme="http://liyahua.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建]]></title>
    <link href="http://liyahua.github.io/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%80/"/>
    <id>http://liyahua.github.io/2015/08/09/OpenStack-基础环境搭建一/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-12T02:52:07.564Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p>   <em>操作系统系统选择</em>：使用ubuntu server  ubuntu-14.04.2-server-amd64  作为服务器的操作系统。<br>   第一次给服务器安装操作系统，我很low的拿着个小U盘来安装，使用UltraISO制作系统镜像。安装系统前对磁盘做了RAID5。</p>
<p>安装完操作系统之后，需要修改接口的ip地址，使服务器能够连得上外网。具体接口的配置如下：<br><em>controller</em>节点：<br>root@controller:~# cat /etc/network/interfaces<br># This file describes the network interfaces available on your system<br># and how to activate them. For more information, see interfaces(5).</p>
<p># The loopback network interface<br>auto lo<br>iface lo inet loopback<br>auto eth0<br>iface eth0 inet static<br>address 192.168.3.10<br>netmask 255.255.255.0<br>gateway 192.168.3.254<br>auto eth1<br>iface eth1 inet static<br>address 10.0.0.11<br>netmask 255.255.255.0<br>root@controller:~#<br>\这里发生过一件很挫的事，居然在同一台服务器上配置了两个网关，导致有的时候网关是10.0.0.1一会儿又编程192.168.3.254.使得网络出现故障。</p>
<p>修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。<br>root@controller:~# cat /etc/hosts<br>#127.0.0.1    localhost<br>#127.0.1.1    controller</p>
<p># controller    192.168.3.10<br>10.0.0.11       controller<br>#compute    192.168.3.12<br>10.0.0.31       compute<br>#compute1    192.168.3.11<br>10.0.0.41    compute1<br>#compute2    192.168.3.14<br>10.0.0.51    compute2</p>
<p># The following lines are desirable for IPv6 capable hosts<br>#::1     localhost ip6-localhost ip6-loopback<br>#ff02::1 ip6-allnodes<br>#ff02::2 ip6-allrouters</p>
<p>这里注释掉了127.0.0.1。这里使用hosts为以后网络环境发生变化提供了很高的可扩展性，比如我从公司的内网192.168.0.0/24迁移到192.168.3.0/24段，需要进行改变的内容就比较小(因为很多配置文件中用到ip地址进行彼此之间信息交互)目前的博客是在我迁移过后做的.</p>
<p><em>compute</em>节点：<br>root@compute:~# cat /etc/network/interfaces<br># This file describes the network interfaces available on your system<br># and how to activate them. For more information, see interfaces(5).</p>
<p># The loopback network interface<br>auto lo<br>iface lo inet loopback</p>
<p>auto eth0<br>iface eth0 inet static<br>#address 192.168.0.142<br>address 192.168.3.12<br>netmask 255.255.255.0<br>gateway 192.168.3.254<br>#auto eth0<br>iface eth0 inet manual<br>        up ip link set dev $IFACE up<br>        down ip link set dev $IFACE down<br>auto eth1<br>iface eth1 inet static<br>address 10.0.0.31<br>netmask 255.255.255.0</p>
<p>修改/etc/hosts配置文件，关联IP和name<br>root@compute:~# cat /etc/hosts<br>#127.0.0.1    localhost<br>#127.0.1.1    compute<br>#computel<br>10.0.0.31    compute<br>#controller<br>10.0.0.11    controller</p>
<h1 id="The_following_lines_are_desirable_for_IPv6_capable_hosts">The following lines are desirable for IPv6 capable hosts</h1><p>::1     localhost ip6-localhost ip6-loopback<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br>root@compute:~# </p>
<p>同时修改两个节点的DNS配置文件为：/etc/resolv.conf<br>添加：  nameserver  114.114.114.114     //使用电信的DNS服务器。其实这样修改在ubuntu系统环境中时不对的，只能够暂时生效，如果想要永久生效，必须修改配置文件/etc/resolvconf/resolv.conf.d/base  每次开机都会从这个配置文件加载dns到/etc/resolv.conf这个配置文件中。</p>
<p>基本的网络地址配置完成之后，能够实现：<br>    1），compute和controller之间相互ping通，包括10.0.0.0网段和192.168.3.0网段<br>    2），都能够访问外网。<br>    3），都能够进行地址解析。</p>
<p>接着配置ubuntu的更新源：这里使用的是阿里云的更新源。 配置文件是：/etc/apt/source.list<br>root@controller:~# cat /etc/apt/sources.list<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-security main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-updates main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-proposed main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-backports main restricted universe multiverse<br>root@controller:~# </p>
<p>配置完更新源之后进行更新：<br>#apt-get  update<br>然后安装ssh服务，实现远程访问：<br>#apt-get install  ssh  -y</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://liyahua.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建]]></title>
    <link href="http://liyahua.github.io/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://liyahua.github.io/2015/08/09/OpenStack-基础环境搭建/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-12T04:21:48.948Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p>   <em>操作系统系统选择</em>：使用ubuntu server  ubuntu-14.04.2-server-amd64  作为服务器的操作系统。<br>   第一次给服务器安装操作系统，我很low的拿着个小U盘来安装，使用UltraISO制作系统镜像。安装系统前对磁盘做了RAID5。</p>
<p>安装完操作系统之后，需要修改接口的ip地址，使服务器能够连得上外网。具体接口的配置如下：<br><em>controller</em>节点：<br>root@controller:~# cat /etc/network/interfaces<br># This file describes the network interfaces available on your system<br># and how to activate them. For more information, see interfaces(5).</p>
<p># The loopback network interface<br>auto lo<br>iface lo inet loopback<br>auto eth0<br>iface eth0 inet static<br>address 192.168.3.10<br>netmask 255.255.255.0<br>gateway 192.168.3.254<br>auto eth1<br>iface eth1 inet static<br>address 10.0.0.11<br>netmask 255.255.255.0<br>root@controller:~#<br>\这里发生过一件很挫的事，居然在同一台服务器上配置了两个网关，导致有的时候网关是10.0.0.1一会儿又编程192.168.3.254.使得网络出现故障。</p>
<p>修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。<br>root@controller:~# cat /etc/hosts<br>#127.0.0.1    localhost<br>#127.0.1.1    controller</p>
<p># controller    192.168.3.10<br>10.0.0.11       controller<br>#compute    192.168.3.12<br>10.0.0.31       compute<br>#compute1    192.168.3.11<br>10.0.0.41    compute1<br>#compute2    192.168.3.14<br>10.0.0.51    compute2</p>
<p># The following lines are desirable for IPv6 capable hosts<br>#::1     localhost ip6-localhost ip6-loopback<br>#ff02::1 ip6-allnodes<br>#ff02::2 ip6-allrouters</p>
<p>这里注释掉了127.0.0.1。这里使用hosts为以后网络环境发生变化提供了很高的可扩展性，比如我从公司的内网192.168.0.0/24迁移到192.168.3.0/24段，需要进行改变的内容就比较小(因为很多配置文件中用到ip地址进行彼此之间信息交互)目前的博客是在我迁移过后做的.</p>
<p><em>compute</em>节点：<br>root@compute:~# cat /etc/network/interfaces<br># This file describes the network interfaces available on your system<br># and how to activate them. For more information, see interfaces(5).</p>
<p># The loopback network interface<br>auto lo<br>iface lo inet loopback</p>
<p>auto eth0<br>iface eth0 inet static<br>#address 192.168.0.142<br>address 192.168.3.12<br>netmask 255.255.255.0<br>gateway 192.168.3.254<br>#auto eth0<br>iface eth0 inet manual<br>        up ip link set dev $IFACE up<br>        down ip link set dev $IFACE down<br>auto eth1<br>iface eth1 inet static<br>address 10.0.0.31<br>netmask 255.255.255.0</p>
<p>修改/etc/hosts配置文件，关联IP和name<br>root@compute:~# cat /etc/hosts<br>#127.0.0.1    localhost<br>#127.0.1.1    compute<br>#computel<br>10.0.0.31    compute<br>#controller<br>10.0.0.11    controller</p>
<h1 id="The_following_lines_are_desirable_for_IPv6_capable_hosts">The following lines are desirable for IPv6 capable hosts</h1><p>::1     localhost ip6-localhost ip6-loopback<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br>root@compute:~# </p>
<p>同时修改两个节点的DNS配置文件为：/etc/resolv.conf<br>添加：  nameserver  114.114.114.114     //使用电信的DNS服务器。其实这样修改在ubuntu系统环境中时不对的，只能够暂时生效，如果想要永久生效，必须修改配置文件/etc/resolvconf/resolv.conf.d/base  每次开机都会从这个配置文件加载dns到/etc/resolv.conf这个配置文件中。</p>
<p>基本的网络地址配置完成之后，能够实现：<br>    1），compute和controller之间相互ping通，包括10.0.0.0网段和192.168.3.0网段<br>    2），都能够访问外网。<br>    3），都能够进行地址解析。</p>
<p>接着配置ubuntu的更新源：这里使用的是阿里云的更新源。 配置文件是：/etc/apt/source.list<br>root@controller:~# cat /etc/apt/sources.list<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-security main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-updates main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-proposed main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu/</a> trusty-backports main restricted universe multiverse<br>root@controller:~# </p>
<p>配置完更新源之后进行更新：<br>#apt-get  update<br>然后安装ssh服务，实现远程访问：<br>#apt-get install  ssh  -y</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://liyahua.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[first]]></title>
    <link href="http://liyahua.github.io/2015/08/09/first/"/>
    <id>http://liyahua.github.io/2015/08/09/first/</id>
    <published>2015-08-09T08:37:45.000Z</published>
    <updated>2015-08-12T02:57:16.322Z</updated>
    <content type="html"><![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]>
    </summary>
    
      <category term="hexo" scheme="http://liyahua.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>