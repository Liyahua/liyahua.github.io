<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Leoli's  blog]]></title>
  <subtitle><![CDATA[Follow your heart]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.stackops.info//"/>
  <updated>2015-08-15T04:32:49.780Z</updated>
  <id>http://www.stackops.info//</id>
  
  <author>
    <name><![CDATA[liyahua]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.stackops.info/2015/08/15/svn%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7submin%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.stackops.info/2015/08/15/svn图形化管理工具submin搭建/</id>
    <published>2015-08-15T04:33:19.685Z</published>
    <updated>2015-08-15T04:32:49.780Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack搭建文档]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack搭建文档/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T03:39:45.748Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h3 id="openstack：">openstack：</h3><pre><code>官方文档中有两种openstack的架构，一种是采用openstack的<span class="keyword">*</span><span class="keyword">*</span>neutron<span class="keyword">*</span><span class="keyword">*</span>网络模型来搭建，需要至少三个节点：compute，controller和network。另一种是使用nova-network这个模型，相对来说比较简单\(包括三种模式：flat,dhcp flat,vlan\)
</code></pre><h4 id="一，硬件的需求：(服务器最好都要支持硬件虚拟化功能)">一，硬件的需求：(服务器最好都要支持硬件虚拟化功能)</h4><pre><code>三个节点要求：
    Controller Node: <span class="number">1</span> processor, <span class="number">2</span> GB memory, and <span class="number">5</span> GB storage
    Network Node: <span class="number">1</span> processor, <span class="number">512</span> MB memory, and <span class="number">5</span> GB storage
    Compute Node: <span class="number">1</span> processor, <span class="number">2</span> GB memory, and <span class="number">10</span> GB storage
</code></pre><h4 id="网卡要求：">网卡要求：</h4><pre><code>compute节点：<span class="number">2</span> NIC
controller节点：<span class="number">1</span> NIC
network节点： <span class="number">3</span> NIC  (因为三台服务器的网卡都只有两块。暂时不满足硬件需求，第一次尝试搭建的时候没注意，按照三个节点搭建，并且没配置tunnel接口，导致网络不通）。
</code></pre><h4 id="网络名称解释：">网络名称解释：</h4><p><strong>外部网络</strong>: 公共网络，外部或Internet可以访问的网络<br><strong>内部网络</strong>: 私有网络，仅内部访问的网络<br><strong>管理网络</strong>: 用于OpenStack组件以及MySQL DB Server, RabbitMQmessaging server之间的通信<br>这次采用的网络拓扑架构比较简单，网络模式选择的是nova-network的FlatDHCP，只配置了两个节点，compute和controller节点。最多只需要两个NIC，现有的服务器满足需求。具体选型根据大家现有的硬件配置来进行选择，也可以在一台服务器上配置所有服务，只不过性能上会相对来说比较差。<br>后续会详细介绍各网络模型。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建二]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BA%8C/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack-基础环境搭建二/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T03:00:50.443Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<h2 id="NTP服务的安装_：">NTP服务的安装 ：</h2><p>（1），安装NTP服务实现各个节点之间的时间同步(这点很重要，如果各节点之间时间不同步会导致后来的服务异常)。</p>
<h2 id="controller节点：">controller节点：</h2><pre><code><span class="number">1.</span> 安装NTP服务：
   <span class="preprocessor">#apt-get install ntp </span>
<span class="number">2.</span> 修改/etc/ntp.conf配置文件：
server controller iburst
<span class="keyword">restrict</span> -<span class="number">4</span> <span class="keyword">default</span> kod notrap nomodify
<span class="keyword">restrict</span> -<span class="number">6</span> <span class="keyword">default</span> kod notrap nomodify   
（删掉nopeer and noquery ）
如果 /var/lib/ntp/ntp.conf文件存在，则删除。
<span class="number">3.</span> 重启ntp的服务
<span class="preprocessor">#  service ntp restart</span>
</code></pre><h2 id="其他节点：">其他节点：</h2><pre><code><span class="number">1.</span> 安装NTP服务
 <span class="preprocessor">#apt-get install  ntp</span>
<span class="number">2.</span> 修改/etc/ntp.conf的配置文件
 server controller iburst 
<span class="number">3.</span> 重启ntp服务
 <span class="preprocessor">#service  ntp restart</span>
</code></pre><h3 id="NTP同步状态查看：">NTP同步状态查看：</h3><pre><code>root@compute:~<span class="preprocessor"># ntpq -c peers</span>
 remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">796</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">19.549</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1067</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>

root@compute:~<span class="preprocessor"># ntpq -c assoc</span>
ind assid status  conf reach auth condition  last_event cnt
===========================================================
  <span class="number">1</span> <span class="number">52871</span>  <span class="number">9424</span>   yes   yes  none candidate   reachable  <span class="number">2</span>
  <span class="number">2</span> <span class="number">52872</span>  <span class="number">963</span>a   yes   yes  none  sys.peer    sys_peer  <span class="number">3</span>
</code></pre><p>可以很明显看出来服务器之间已经处于同步状态，计算节点都和控制节点建立同步关系了。<br>同时我们可以通过命令</p>
<pre><code><span class="preprocessor">#watch  ntp -p   动态的查看ntp状态</span>
very <span class="number">2.0</span>s: ntpq -p                                      Tue Aug <span class="number">11</span> <span class="number">23</span>:<span class="number">23</span>:<span class="number">04</span> <span class="number">2015</span>

 remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+controller      <span class="number">91.189</span><span class="number">.89</span><span class="number">.199</span>    <span class="number">3</span> u  <span class="number">448</span> <span class="number">1024</span>  <span class="number">377</span>    <span class="number">0.165</span>   <span class="number">10.130</span>  <span class="number">20.335</span>
*golem.canonical <span class="number">131.188</span><span class="number">.3</span><span class="number">.220</span>    <span class="number">2</span> u <span class="number">1800</span> <span class="number">1024</span>  <span class="number">336</span>  <span class="number">409.188</span>   <span class="number">66.053</span>  <span class="number">24.625</span>
</code></pre><p>我来解释一下其中的含义</p>
<h3 id="remote:_它指的就是本地机器所连接的远程NTP服务器">remote: 它指的就是本地机器所连接的远程NTP服务器</h3><h3 id="refid:_它指的是给远程服务器(e-g-_91-189-89-199_)提供时间同步的服务器">refid: 它指的是给远程服务器(e.g. 91.189.89.199 )提供时间同步的服务器</h3><h3 id="st:_远程服务器的层级别（stratum）-_由于NTP是层型结构,有顶端的服务器,多层的Relay_Server再到客户端-_所以服务器从高到低级别可以设定为1-16-_为了减缓负荷和网络堵塞,原则上应该避免直接连接到级别为1的服务器的-">st: 远程服务器的层级别（stratum）. 由于NTP是层型结构,有顶端的服务器,多层的Relay Server再到客户端. 所以服务器从高到低级别可以设定为1-16. 为了减缓负荷和网络堵塞,原则上应该避免直接连接到级别为1的服务器的.</h3><h3 id="t:_这个…-我也不知道啥意思^_^">t: 这个…..我也不知道啥意思^_^</h3><h3 id="when:_我个人把它理解为一个计时器用来告诉我们还有多久本地机器就需要和远程服务器进行一次时间同步">when: 我个人把它理解为一个计时器用来告诉我们还有多久本地机器就需要和远程服务器进行一次时间同步</h3><h3 id="poll:_本地机和远程服务器多少时间进行一次同步(单位为秒)-_在一开始运行NTP的时候这个poll值会比较小,那样和服务器同步的频率也就增加了,可以尽快调整到正确的时间范围-之后poll值会逐渐增大,同步的频率也就会相应减小">poll: 本地机和远程服务器多少时间进行一次同步(单位为秒). 在一开始运行NTP的时候这个poll值会比较小,那样和服务器同步的频率也就增加了,可以尽快调整到正确的时间范围.之后poll值会逐渐增大,同步的频率也就会相应减小</h3><h3 id="reach:_这是一个八进制值,用来测试能否和服务器连接-每成功连接一次它的值就会增加">reach: 这是一个八进制值,用来测试能否和服务器连接.每成功连接一次它的值就会增加</h3><h3 id="delay:_从本地机发送同步要求到服务器的round_trip_time">delay: 从本地机发送同步要求到服务器的round trip time</h3><h3 id="offset:_这是个最关键的值,_它告诉了我们本地机和服务器之间的时间差别-_offset越接近于0,我们就和服务器的时间越接近">offset: 这是个最关键的值, 它告诉了我们本地机和服务器之间的时间差别. offset越接近于0,我们就和服务器的时间越接近</h3><h3 id="jitter:_这是一个用来做统计的值-_它统计了在特定个连续的连接数里offset的分布情况-_简单地说这个数值的绝对值越小我们和服务器的时间就越精确">jitter: 这是一个用来做统计的值. 它统计了在特定个连续的连接数里offset的分布情况. 简单地说这个数值的绝对值越小我们和服务器的时间就越精确</h3><h3 id="NTP安全设置(restrict)">NTP安全设置(restrict)</h3><h3 id="运行一个NTP_Server不需要占用很多的系统资源,所以也不用专门配置独立的服务器,就可以给许多client提供时间同步服务但是一些基本的安全设置还是很有必要的。">运行一个NTP Server不需要占用很多的系统资源,所以也不用专门配置独立的服务器,就可以给许多client提供时间同步服务但是一些基本的安全设置还是很有必要的。</h3><h3 id="那么这里一个很简单的思路就是第一我们只允许局域网内一部分的用户连接到我们的服务器-_第二个就是这些client不能修改我们服务器上的时间关于权限设定部分">那么这里一个很简单的思路就是第一我们只允许局域网内一部分的用户连接到我们的服务器. 第二个就是这些client不能修改我们服务器上的时间关于权限设定部分</h3><h3 id="权限的设定主要以_restrict_这个参数来设定，主要的语法为：">权限的设定主要以 restrict 这个参数来设定，主要的语法为：</h3><pre><code><span class="label">restrict</span> <span class="literal">IP</span>地址 mask 子网掩码 参数 
</code></pre><h3 id="其中_IP_可以是IP地址，也可以是_default_，default_就是指所有的IP">其中 IP 可以是IP地址，也可以是 default ，default 就是指所有的IP</h3><ul>
<li>参数有以下几个 ： <h3 id="ignore_：关闭所有的_NTP_联机服务">ignore　：关闭所有的 NTP 联机服务</h3><h3 id="nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。">nomodify：客户端不能更改服务端的时间参数，但是客户端可以通过服务端进行网络校时。</h3><h3 id="notrust_：客户端除非通过认证，否则该客户端来源将被视为不信任子网">notrust ：客户端除非通过认证，否则该客户端来源将被视为不信任子网</h3><h3 id="noquery_：不提供客户端的时间查询">noquery ：不提供客户端的时间查询</h3></li>
</ul>
<p>在安装Openstack的各个功能组件之前，先安装Openstack的packages：（在所有节点上都安装）</p>
<pre><code><span class="id">#apt-get</span> install ubuntu-cloud-keyring
<span class="id">#echo</span> <span class="string">"deb http://ubuntu-cloud.archive.canonical.com/ubuntu"</span> \
<span class="string">"trusty-updates/juno main"</span> &gt; /etc/apt/sources<span class="class">.list</span><span class="class">.d</span>/cloudarchive-juno.list
</code></pre><p>更新系统上的包：</p>
<pre><code>#apt-<span class="built_in">get</span> update &amp;&amp; apt-<span class="built_in">get</span> <span class="built_in">dist</span>-upgrade  
</code></pre><p>如果不安装openstack库，直接安装keystone，会keystone能够安装成功，但是keystone启动后，接着就会失败。造成keystone为unknown instance</p>
<h2 id="（2），接着安装MYSQL的数据库**：">（2），接着安装MYSQL的数据库**：</h2><p>Openstack的主要组件都需要数据库的支持，Openstack支持MySQL，PostgreSQL，SQLite。这里选择mysql作为数据库。数据库安装在controller节点上。<br> (补充： MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险).</p>
<pre><code>## controller节点安装：
        1. 安装包：#apt-get <span class="operator"><span class="keyword">install</span> mariadb-<span class="keyword">server</span> python-mysqldb
               （安装完会提示输入root密码）
        <span class="number">2.</span> 修改/etc/mysql/my.cnf这个配置文件，修改以下内容：
        [mysqld]
        ...
        bind-address = <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>  
        <span class="keyword">default</span>-<span class="keyword">storage</span>-<span class="keyword">engine</span> = <span class="keyword">innodb</span>
        innodb_file_per_table
        <span class="keyword">collation</span>-<span class="keyword">server</span> = utf8_general_ci
        init-<span class="keyword">connect</span> = <span class="string">'SET NAMES utf8'</span>
        <span class="built_in">character</span>-<span class="keyword">set</span>-<span class="keyword">server</span> = utf8

        <span class="number">3.</span> 重启服务：# service mysql restart
        <span class="number">4.</span> 保护数据库服务：# mysql_secure_installation</span>
</code></pre><h2 id="（3），安装Messaging服务：（通常安装在controller节点上）。">（3），安装Messaging服务：（通常安装在controller节点上）。</h2><pre><code><span class="number">1.</span> Openstack组件之间的通需要通过支持AMQP的Messaging的服务软件，Openstack支持的有RabbitMQ，Qpid，和ZeroMQ，这里安装的RabbitMQ，
<span class="preprocessor"># apt-get install rabbitmq-server</span>
<span class="number">2.</span> 安装RabbitMQ服务软件时，RabbitMQ默认用户guest的密码是guest，我们需要修改一下guest密码： 
<span class="preprocessor"># rabbitmqctl change_password guest RABBIT_PASS   (替换成你用的密码)</span>
<span class="number">3.</span> 安装完之后需要查看RabbitMQ的version
root@controller:~<span class="preprocessor">#  rabbitmqctl status | grep rabbit</span>
Status of node rabbit@controller ...
{running_applications,[{rabbit,<span class="string">"RabbitMQ"</span>,<span class="string">"3.2.4"</span>},
<span class="number">4.</span> 如果 <span class="number">3.3</span><span class="number">.0</span> 或则更新，则需要配置允许guest 账户，允许访问
修改配置文件/etc/rabbitmq/rabbitmq.config
添加如下内容：  [{rabbit, [{loopback_users, []}]}]. 
<span class="number">5</span>，重启服务：
<span class="preprocessor"># service rabbitmq-server restart </span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://www.stackops.info/tags/AMQP/"/>
    
      <category term="NTP" scheme="http://www.stackops.info/tags/NTP/"/>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenStack基础环境搭建一]]></title>
    <link href="http://www.stackops.info/2015/08/09/OpenStack-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%80/"/>
    <id>http://www.stackops.info/2015/08/09/OpenStack-基础环境搭建一/</id>
    <published>2015-08-09T14:58:11.000Z</published>
    <updated>2015-08-15T03:29:20.084Z</updated>
    <content type="html"><![CDATA[<p>显示全文：<br><a id="more"></a></p>
<p> <strong>操作系统系统选择</strong>：使用ubuntu server  ubuntu-14.04.2-server-amd64  作为服务器的操作系统。<br> 第一次给服务器安装操作系统，我很low的拿着个小U盘来安装，使用UltraISO制作系统镜像。安装系统前对磁盘做了RAID5。</p>
<p>安装完操作系统之后，需要修改接口的ip地址，使服务器能够连得上外网(不能简单的按照官方文档配置，必须切合实际，毕竟还需要安装组件),具体接口的配置如下：</p>
<h3 id="controller节点：">controller节点：</h3><pre><code>root@controller:~<span class="preprocessor"># cat /etc/network/interfaces</span>
\<span class="preprocessor"># This file describes the network interfaces available on your system</span>
\<span class="preprocessor"># and how to activate them. For more information, see interfaces(<span class="number">5</span>).</span>

\<span class="preprocessor"># The loopback network interface</span>
<span class="keyword">auto</span> lo
iface lo inet loopback
<span class="keyword">auto</span> eth0
iface eth0 inet <span class="keyword">static</span>
address <span class="number">192.168</span><span class="number">.3</span><span class="number">.10</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
gateway <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>
<span class="keyword">auto</span> eth1
iface eth1 inet <span class="keyword">static</span>
address <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> 
</code></pre><p>(这里发生过一件很挫的事，居然在同一台服务器上配置了两个网关，导致有的时候网关是10.0.0.1一会儿又编程192.168.3.254.使得网络出现故障)。</p>
<h3 id="修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。">修改/etc/hosts这个文件，地址和服务器名相关联，地址解析。</h3><pre><code>root@controller:~<span class="preprocessor"># cat /etc/hosts</span>
\<span class="preprocessor">#<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>    localhost</span>
\<span class="preprocessor">#<span class="number">127.0</span><span class="number">.1</span><span class="number">.1</span>    controller</span>

\<span class="preprocessor"># controller    <span class="number">192.168</span><span class="number">.3</span><span class="number">.10</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span>       controller
\<span class="preprocessor">#compute    <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.31</span>       compute
\<span class="preprocessor">#compute1    <span class="number">192.168</span><span class="number">.3</span><span class="number">.11</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.41</span>    compute1
\<span class="preprocessor">#compute2    <span class="number">192.168</span><span class="number">.3</span><span class="number">.14</span></span>
<span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>    compute2

<span class="preprocessor"># The following lines are desirable for IPv6 capable hosts</span>
<span class="preprocessor">#::<span class="number">1</span>     localhost ip6-localhost ip6-loopback</span>
<span class="preprocessor">#ff02::<span class="number">1</span> ip6-allnodes</span>
<span class="preprocessor">#ff02::<span class="number">2</span> ip6-allrouters</span>
</code></pre><p>这里注释掉了127.0.0.1。这里使用hosts为以后网络环境发生变化提供了很高的可扩展性，比如我从公司的内网192.168.0.0/24迁移到192.168.3.0/24段，需要进行改变的内容就比较小(因为很多配置文件中用到ip地址进行彼此之间信息交互,而是用host则比较方便)目前的博客是在我迁移过后做的.</p>
<h3 id="compute节点：">compute节点：</h3><pre><code>root@compute:~<span class="preprocessor"># cat /etc/network/interfaces</span>
<span class="preprocessor"># This file describes the network interfaces available on your system</span>
<span class="preprocessor"># and how to activate them. For more information, see interfaces(<span class="number">5</span>).</span>

<span class="preprocessor"># The loopback network interfaces</span>
<span class="keyword">auto</span> lo
iface lo inet loopback

<span class="keyword">auto</span> eth0
iface eth0 inet <span class="keyword">static</span>
<span class="preprocessor">#address <span class="number">192.168</span><span class="number">.0</span><span class="number">.142</span></span>
address <span class="number">192.168</span><span class="number">.3</span><span class="number">.12</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
gateway <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>
<span class="preprocessor">#auto eth0 </span>
iface eth0 inet manual
    up ip link <span class="built_in">set</span> dev $IFACE up
    down ip link <span class="built_in">set</span> dev $IFACE down
<span class="keyword">auto</span> eth1
iface eth1 inet <span class="keyword">static</span>
address <span class="number">10.0</span><span class="number">.0</span><span class="number">.31</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>
</code></pre><p>###　修改/etc/hosts配置文件，关联IP和name<br>    root@compute:~# cat /etc/hosts</p>
<pre><code><span class="hexcolor">#127</span>.<span class="number">0.0</span>.<span class="number">1</span>    localhost
<span class="hexcolor">#127</span>.<span class="number">0.1</span>.<span class="number">1</span>    compute
<span class="id">#computel</span>
<span class="number">10.0</span>.<span class="number">0.31</span>    compute
<span class="id">#controller</span>
<span class="number">10.0</span>.<span class="number">0.11</span>    controller
<span class="id">#The</span> following lines are desirable <span class="keyword">for</span> IPv6 capable hosts
::<span class="number">1</span>     localhost ip6-localhost ip6-loopback
ff02::<span class="number">1</span> ip6-allnodes
ff02::<span class="number">2</span> ip6-allrouters
</code></pre><h4 id="同时修改两个节点的DNS配置文件为：/etc/resolv-conf">同时修改两个节点的DNS配置文件为：/etc/resolv.conf</h4><p>添加：<br>    nameserver  114.114.114.114<br>///使用电信的DNS服务器。其实这样修改在ubuntu系统环境中时不对的，只能够暂时生效，如果想要永久生效，必须修改配置文件/etc/resolvconf/resolv.conf.d/base  每次开机都会从这个配置文件加载dns到/etc/resolv.conf这个配置文件中,这一点和centos不同。</p>
<p>基本的网络地址配置完成之后，能够实现：</p>
<ul>
<li>1），compute和controller之间相互ping通，包括10.0.0.0网段和192.168.3.0网段</li>
<li>2），都能够访问外网。</li>
<li>3），都能够进行地址解析。</li>
</ul>
<h3 id="接着配置ubuntu的更新源：这里使用的是阿里云的更新源。_配置文件是：/etc/apt/source-list">接着配置ubuntu的更新源：这里使用的是阿里云的更新源。 配置文件是：<strong>/etc/apt/source.list</strong></h3><pre><code>root<span class="property">@controller</span>:~<span class="comment"># cat /etc/apt/sources.list</span>
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-security main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse
deb <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-security main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-updates main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-proposed main restricted universe multiverse
deb-src <span class="attribute">http</span>:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> trusty-backports main restricted universe multiverse
</code></pre><p>配置完更新源之后进行更新：</p>
<pre><code>#apt-<span class="built_in">get</span>  <span class="keyword">update</span>
</code></pre><p>然后安装ssh服务，实现远程访问：</p>
<pre><code><span class="id">#apt-get</span> install  ssh  -y
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>显示全文：<br>]]>
    
    </summary>
    
      <category term="openstack" scheme="http://www.stackops.info/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[first]]></title>
    <link href="http://www.stackops.info/2015/08/09/first/"/>
    <id>http://www.stackops.info/2015/08/09/first/</id>
    <published>2015-08-09T08:37:45.000Z</published>
    <updated>2015-08-12T02:57:16.322Z</updated>
    <content type="html"><![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>随心记录</strong></p>
<p><em>花了两天时间</em><br><em>折腾了这<br>个博客</em><br><em>简陋的blog</em></p>
]]>
    </summary>
    
      <category term="hexo" scheme="http://www.stackops.info/tags/hexo/"/>
    
  </entry>
  
</feed>